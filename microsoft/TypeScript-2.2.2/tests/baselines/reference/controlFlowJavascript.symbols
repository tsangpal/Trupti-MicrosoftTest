=== tests/cases/compiler/controlFlowJavascript.js ===

let cond = true;
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

// CFA for 'let' and no initializer
function f1() {
>f1 : Symbol(f1, Decl(controlFlowJavascript.js, 1, 16))

    let x;
>x : Symbol(x, Decl(controlFlowJavascript.js, 5, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 5, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 5, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowJavascript.js, 12, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 5, 7))
}

// CFA for 'let' and 'undefined' initializer
function f2() {
>f2 : Symbol(f2, Decl(controlFlowJavascript.js, 13, 1))

    let x = undefined;
>x : Symbol(x, Decl(controlFlowJavascript.js, 17, 7))
>undefined : Symbol(undefined)

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 17, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 17, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowJavascript.js, 24, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 17, 7))
}

// CFA for 'let' and 'null' initializer
function f3() {
>f3 : Symbol(f3, Decl(controlFlowJavascript.js, 25, 1))

    let x = null;
>x : Symbol(x, Decl(controlFlowJavascript.js, 29, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 29, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 29, 7))
    }
    const y = x;  // string | number | null
>y : Symbol(y, Decl(controlFlowJavascript.js, 36, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 29, 7))
}

// CFA for 'var' with no initializer
function f5() {
>f5 : Symbol(f5, Decl(controlFlowJavascript.js, 37, 1))

    var x;
>x : Symbol(x, Decl(controlFlowJavascript.js, 41, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 41, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 41, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowJavascript.js, 48, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 41, 7))
}

// CFA for 'var' with 'undefined' initializer
function f6() {
>f6 : Symbol(f6, Decl(controlFlowJavascript.js, 49, 1))

    var x = undefined;
>x : Symbol(x, Decl(controlFlowJavascript.js, 53, 7))
>undefined : Symbol(undefined)

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 53, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 53, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowJavascript.js, 60, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 53, 7))
}

// CFA for 'var' with 'null' initializer
function f7() {
>f7 : Symbol(f7, Decl(controlFlowJavascript.js, 61, 1))

    var x = null;
>x : Symbol(x, Decl(controlFlowJavascript.js, 65, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 65, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 65, 7))
    }
    const y = x;  // string | number | null
>y : Symbol(y, Decl(controlFlowJavascript.js, 72, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 65, 7))
}

// No CFA for captured outer variables
function f9() {
>f9 : Symbol(f9, Decl(controlFlowJavascript.js, 73, 1))

    let x;
>x : Symbol(x, Decl(controlFlowJavascript.js, 77, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 77, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 77, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowJavascript.js, 84, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 77, 7))

    function f() {
>f : Symbol(f, Decl(controlFlowJavascript.js, 84, 16))

        const z = x;  // any
>z : Symbol(z, Decl(controlFlowJavascript.js, 86, 13))
>x : Symbol(x, Decl(controlFlowJavascript.js, 77, 7))
    }
}

// No CFA for captured outer variables
function f10() {
>f10 : Symbol(f10, Decl(controlFlowJavascript.js, 88, 1))

    let x;
>x : Symbol(x, Decl(controlFlowJavascript.js, 92, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = 1;
>x : Symbol(x, Decl(controlFlowJavascript.js, 92, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowJavascript.js, 1, 3))

        x = "hello";
>x : Symbol(x, Decl(controlFlowJavascript.js, 92, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowJavascript.js, 99, 9))
>x : Symbol(x, Decl(controlFlowJavascript.js, 92, 7))

    const f = () => {
>f : Symbol(f, Decl(controlFlowJavascript.js, 100, 9))

        const z = x;  // any
>z : Symbol(z, Decl(controlFlowJavascript.js, 101, 13))
>x : Symbol(x, Decl(controlFlowJavascript.js, 92, 7))

    };
}

