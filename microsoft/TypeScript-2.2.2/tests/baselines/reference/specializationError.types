=== tests/cases/compiler/specializationError.ts ===
interface Promise<T> {
>Promise : Promise<T>
>T : T

    then<U>(value: T): void;
>then : { (onfulfilled?: (value: T) => T | PromiseLike<T>, onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>; <TResult>(onfulfilled: (value: T) => T | PromiseLike<T>, onrejected: (reason: any) => TResult | PromiseLike<TResult>): Promise<T | TResult>; <TResult>(onfulfilled: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>; <TResult1, TResult2>(onfulfilled: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>; <U>(value: T): void; }
>U : U
>value : T
>T : T
}

interface Bar {
>Bar : Bar

    bar(value: "Menu"): Promise<string>;
>bar : { (value: "Menu"): Promise<string>; <T>(value: string, element: string): Promise<T>; <T>(value: string): Promise<T>; }
>value : "Menu"
>Promise : Promise<T>

    bar<T>(value: string, element: string): Promise<T>;
>bar : { (value: "Menu"): Promise<string>; <T>(value: string, element: string): Promise<T>; <T>(value: string): Promise<T>; }
>T : T
>value : string
>element : string
>Promise : Promise<T>
>T : T

    bar<T>(value: string): Promise<T>;
>bar : { (value: "Menu"): Promise<string>; <T>(value: string, element: string): Promise<T>; <T>(value: string): Promise<T>; }
>T : T
>value : string
>Promise : Promise<T>
>T : T
}

