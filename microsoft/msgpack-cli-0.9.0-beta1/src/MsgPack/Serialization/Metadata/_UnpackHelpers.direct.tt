<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
Type[] _valueTypes =
	new []
	{
		typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
		typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
		typeof( float ), typeof( double ),
		typeof( bool )
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2015 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
#if CORE_CLR
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // CORE_CLR
using System.Reflection;

namespace MsgPack.Serialization.Metadata
{
	// This file was generated from _UnpackHelpers.direct.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit _UnpackHelpers.direct.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class _UnpackHelpers
	{
		private static readonly Dictionary<Type, MethodInfo> _directUnpackMethods = GetDirectUnpackMethods( false );
		private static readonly Dictionary<Type, MethodInfo> _asyncDirectUnpackMethods =
#if FEATURE_TAP
		 GetDirectUnpackMethods( true );
#else
		_directUnpackMethods;
#endif // FEATURE_TAP

		private static Dictionary<Type, MethodInfo> GetDirectUnpackMethods( bool forAsync )
		{
			var suffix = forAsync ? "ValueAsync" : "Value";
			return
				new Dictionary<Type, MethodInfo>( <#= _valueTypes.Length + 3 #> )
				{
<#
foreach( var type in _valueTypes )
{
	// NOTE: Allways use nullable version for nil implication.
#>
			
					{ typeof( <#= type.Name #> ), typeof( UnpackHelpers ).GetMethod( "Unpack<#= type.Name #>" + suffix ) },
					{ typeof( <#= type.Name #>? ), typeof( UnpackHelpers ).GetMethod( "UnpackNullable<#= type.Name #>" + suffix ) },
<#
}
#>
					{ typeof( string ), typeof( UnpackHelpers ).GetMethod( "UnpackString" + suffix ) },
					{ typeof( byte[] ), typeof( UnpackHelpers ).GetMethod( "UnpackBinary" + suffix ) },
				};
		}

		public static MethodInfo GetDirectUnpackMethod( Type type, bool forAsync )
		{
			MethodInfo result;
			if ( ( forAsync ? _asyncDirectUnpackMethods : _directUnpackMethods ).TryGetValue( type, out result ) )
			{
#if DEBUG
				Contract.Assert( result != null, "Failed to initialize value for " + type );
#endif
			}
			return result;
		}
	}
}