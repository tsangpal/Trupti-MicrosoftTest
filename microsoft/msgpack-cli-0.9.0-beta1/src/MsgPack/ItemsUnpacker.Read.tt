<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ include file="..\Core.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.Collections.Generic;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file was generated from ItemsUnpacker.Read.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit ItemsUnpacker.Read.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class ItemsUnpacker
	{
<#
this.PushIndent( 2 );

foreach( var type in
	new []
	{ 
		typeof( bool ), 
		typeof( byte ), typeof( sbyte ),
		typeof( short ), typeof( ushort ),
		typeof( int ), typeof( uint ),
		typeof( long ), typeof( ulong ),
		typeof( float ), typeof( double ),
	}
)
{
	this.WriteReadBody( type.Name, type.Name, false, false,	isAsync => this.WriteReadScalar( type, isAsync ) );
	this.WriteReadBody( type.Name, type.Name, false, true,	isAsync => this.WriteReadScalar( type, isAsync ) );
	this.WriteReadBody( type.Name, type.Name, true, false,	isAsync => this.WriteReadScalar( type, isAsync ) );
	this.WriteReadBody( type.Name, type.Name, true, true,	isAsync => this.WriteReadScalar( type, isAsync ) );

	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", false, false,	isAsync => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ), isAsync ) );
	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", false, true,	isAsync => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ), isAsync ) );
	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", true, false,	isAsync => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ), isAsync ) );
	this.WriteReadBody( "Nullable" + type.Name, type.Name + "?", true, true,	isAsync => this.WriteReadScalar( typeof( Nullable<> ).MakeGenericType( type ), isAsync ) );
}

this.WriteReadBody( "Binary", "Byte[]", false, false,	isAsync => this.WriteReadRaw( "Byte[]", "Binary", isAsync ) );
this.WriteReadBody( "Binary", "Byte[]", false, true,	isAsync => this.WriteReadRaw( "Byte[]", "Binary", isAsync ) );
this.WriteReadBody( "Binary", "Byte[]", true, false,	isAsync => this.WriteReadRaw( "Byte[]", "Binary", isAsync ) );
this.WriteReadBody( "Binary", "Byte[]", true, true,		isAsync => this.WriteReadRaw( "Byte[]", "Binary", isAsync ) );
this.WriteReadBody( "String", "String", false, false,	isAsync => this.WriteReadRaw( "String", "String", isAsync ) );
this.WriteReadBody( "String", "String", false, true,	isAsync => this.WriteReadRaw( "String", "String", isAsync ) );
this.WriteReadBody( "String", "String", true, false,	isAsync => this.WriteReadRaw( "String", "String", isAsync ) );
this.WriteReadBody( "String", "String", true, true,		isAsync => this.WriteReadRaw( "String", "String", isAsync ) );

this.WriteReadBody( "Object", "MessagePackObject", false, false, isAsync => this.WriteReadObject( isAsync ) );
this.WriteReadBody( "Object", "MessagePackObject", false, true,	 isAsync => this.WriteReadObject( isAsync ) );
this.WriteReadBody( "Object", "MessagePackObject", true, false,	 isAsync => this.WriteReadObject( isAsync ) );
this.WriteReadBody( "Object", "MessagePackObject", true, true,	 isAsync => this.WriteReadObject( isAsync ) );
this.WriteReadBody( "ArrayLength", "Int64", false, false,	 isAsync => this.WriteReadLength( "ArrayLength", isAsync ) );
this.WriteReadBody( "ArrayLength", "Int64", false, true,	 isAsync => this.WriteReadLength( "ArrayLength", isAsync ) );
this.WriteReadBody( "ArrayLength", "Int64", true, false,	 isAsync => this.WriteReadLength( "ArrayLength", isAsync ) );
this.WriteReadBody( "ArrayLength", "Int64", true, true,		 isAsync => this.WriteReadLength( "ArrayLength", isAsync ) );
this.WriteReadBody( "MapLength", "Int64", false, false,	 isAsync => this.WriteReadLength( "MapLength", isAsync ) );
this.WriteReadBody( "MapLength", "Int64", false, true,	 isAsync => this.WriteReadLength( "MapLength", isAsync ) );
this.WriteReadBody( "MapLength", "Int64", true, false,	 isAsync => this.WriteReadLength( "MapLength", isAsync ) );
this.WriteReadBody( "MapLength", "Int64", true, true,	 isAsync => this.WriteReadLength( "MapLength", isAsync ) );

this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", false, false,	 isAsync => this.WriteReadExt( isAsync ) );
this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", false, true,	 isAsync => this.WriteReadExt( isAsync ) );
this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", true, false,	 isAsync => this.WriteReadExt( isAsync ) );
this.WriteReadBody( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject", true, true,	 isAsync => this.WriteReadExt( isAsync ) );
this.PopIndent();
#>
	}
}

<#+

private static readonly Type[] ScalarTypes =
			new []
			{
				typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
				typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
				typeof( float ), typeof( double )
			};

private static readonly string[] ExtCodes = new [] { "FixExt1", "FixExt2", "FixExt4", "FixExt8", "FixExt16", "Ext8", "Ext16", "Ext32" };

private class TypeCodeMapping
{
	public string Code { get; set; }
	public Type CodeType { get; set; }
	public int Size { get; set; }
}

private static readonly TypeCodeMapping[] TypeCodeMappings =
		new [] 
		{
			"SByte", "Int16", "Int32", "Int64",
			"Byte", "UInt16", "UInt32", "UInt64",
			"Single", "Double"
		}.Zip( ScalarTypes,
			( code, codeType ) => new TypeCodeMapping{ Code = code, CodeType = codeType, Size = Marshal.SizeOf( codeType ) }
		).ToArray();

private void WriteReadBody( string typeName, string fullTypeName, bool isForSubtree, bool isAsync, Action<bool> bodyWriter )
{
	if( isAsync )
	{
		this.PopIndent();
#>
#if FEATURE_TAP

<#+
		this.PushIndent( 2 );
	}

	var firstParameter = ( isForSubtree && typeName == "Object" ) ? "bool isDeep, " : String.Empty;
	var firstArgument = ( !isForSubtree && typeName == "Object" ) ? "/* isDeep */true, " : String.Empty;
#>
<#= isForSubtree ? "internal" : "public override" #> <#= isAsync ? ( isForSubtree ? "async " : String.Empty ) + "Task<AsyncReadResult<" + fullTypeName + ">>" : "bool" #> Read<#= isForSubtree ? "Subtree" : String.Empty #><#= typeName #><#= !isAsync ? "( " + firstParameter + "out " + fullTypeName + " result )" : "Async( " + firstParameter + "CancellationToken cancellationToken )" #>
{
<#+
	if( !isForSubtree )
	{
		this.PopIndent();
#>
			this.EnsureNotInSubtreeMode();
<#+
		this.PushIndent( 2 );

		if( !isAsync )
		{
#>
	return this.ReadSubtree<#= typeName #>( <#= firstArgument #>out result );
<#+
		}
		else
		{
#>
	return this.ReadSubtree<#= typeName #>Async( <#= firstArgument #>cancellationToken );
<#+
		}
	}
	else
	{
		this.PushIndent( 1 );
		bodyWriter( isAsync );
		this.PopIndent();
	}
#>
} 

<#+
	if( isAsync )
	{
		this.PopIndent();
#>
#endif // FEATURE_TAP

<#+
		this.PushIndent( 2 );
	}
} // WriteReadBody

private void WriteReadBodyCore( string typeName, Nullability nullability, Action<string, DecodedVariable, string, bool> bodyWriter, bool isAsync )
{
	var actualTypeName = typeName;
	if( nullability == Nullability.Nullable  )
	{
		actualTypeName += "?";
	}

	if( !isAsync )
	{
#>
byte header;
long integral;
float real32;
double real64;
var type = this.ReadValue( out header, out integral, out real32, out real64 );
<#+
	}
	else
	{
#>
var asyncResult = await this.ReadValueAsync( cancellationToken ).ConfigureAwait( false );
var type = asyncResult.type;
<#+
	}
#>
switch( type )
{
	case ReadValueResult.Eof:
	{
<#+
	this.PushIndent( 2 );
	this.Fail( "result", actualTypeName, isAsync );
	this.PopIndent();
#>
	}
<#+
	if( nullability != Nullability.Value )
	{
#>
	case ReadValueResult.Nil:
	{
<#+
		this.PushIndent( 2 );
		this.OnReturnScalar();
		this.Success( null, "result", "default( " + actualTypeName + " )", isAsync );
		this.PopIndent();
#>
	}
<#+
	} // if( isNullable )

	this.PushIndent( 1 );
	bodyWriter( "type", new DecodedVariable( "integral", "real32", "real64", "asyncResult" ), "result", isAsync );
	this.PopIndent();
#>
	default:
	{
		this.ThrowTypeException( typeof( <#= actualTypeName #> ), <#= !isAsync ? "header" : "asyncResult.header" #> );
		// Never reach
<#+
		this.PushIndent( 2 );
		this.Fail( "result", actualTypeName, isAsync );
		this.PopIndent();
#>
	}
}
<#+
} // WriteReadBodyCore( Type type, bool isNullable, Action<string, DecodedVariable, string> bodyWriter )

private void WriteReadScalar( Type type, bool isAsync )
{
	var nullableUnderlying  = Nullable.GetUnderlyingType( type );
	WriteReadBodyCore( ( nullableUnderlying ?? type ).Name, nullableUnderlying != null ? Nullability.Nullable : Nullability.Value, ( t, valueVar, resultVar, isAsync0 ) => WriteReadScalarCore( nullableUnderlying ?? type, nullableUnderlying != null, valueVar, resultVar, isAsync0 ), isAsync );
}

private void WriteReadScalarCore( Type type, bool isNullable, DecodedVariable valueVariable, string resultVariable, bool isAsync )
{
	var nullableType =
		( isNullable && type.IsValueType ) ? type.Name + "?" : null;

	if( type == typeof( bool ) )
	{
#>
case ReadValueResult.Boolean:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, valueVariable.Integral( isAsync ) + " != 0", isAsync );
		this.PopIndent();
#>
}
<#+
		return; // bool is done.
	} // if( type == typeof( bool ) )

	var thisEntry = TypeCodeMappings.SingleOrDefault( e => e.CodeType == type );
	if( thisEntry != null )
	{
		// For same type
#>
case ReadValueResult.<#= thisEntry.Code #>:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( GetSourceType( type ), type, false, valueVariable.Get( type, isAsync ), false, isAsync ), isAsync );
		this.PopIndent();
#>
}
<#+
	} // if

	foreach( var entry in TypeCodeMappings.Where( e => CanConvertTo( type, e.Size ) && e.CodeType != type ) )
	{
		if ( entry.CodeType == typeof( ulong ) || entry.CodeType == typeof( float ) || entry.CodeType == typeof( double ) )
		{
			// UInt64 and Reals should be treated as spetially.
			continue;
		}
#>
case ReadValueResult.<#= entry.Code #>:
<#+
	} // foreach
#>
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( typeof( long ), type, true, valueVariable.Integral( isAsync ), false, isAsync ), isAsync );
		this.PopIndent();
#>
}
<#+

	if( type != typeof( ulong ) )
	{
#>
case ReadValueResult.UInt64:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( typeof( ulong ), type, true, valueVariable.Integral( isAsync ), true, isAsync ), isAsync );
		this.PopIndent();
#>
}
<#+
	}

	if( type != typeof( float ) )
	{
#>
case ReadValueResult.Single:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( typeof( float ), type, true, valueVariable.Real32( isAsync ), false, isAsync ), isAsync );
		this.PopIndent();
#>
}
<#+
	}

	if( type != typeof( double ) )
	{
#>
case ReadValueResult.Double:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.Success( nullableType, resultVariable, CastIfNecessary( typeof( double ), type, true, valueVariable.Real64( isAsync ), false, isAsync ), isAsync );
		this.PopIndent();
#>
}
<#+
	}
} // WriteReadScalarCore( Type type, bool isNullable, DecodedVariable valueVariable, string resultVariable, bool isAsync )

private void WriteReadLength( string code, bool isAsync )
{
	WriteReadBodyCore( "Int64", Nullability.Value, ( t, valueVar, resultVar, isAsync0 ) => this.WriteReadLengthCore( code, valueVar, resultVar, isAsync0 ), isAsync );
} // WriteReadLength( string code, bool isAsync )

private void WriteReadLengthCore( string code, DecodedVariable valueVariable, string resultVariable, bool isAsync )
{
#>
case ReadValueResult.<#= code #>:
{
<#+
	if( isAsync )
	{
#>
	// Read<#= code #>Core does not perform I/O, so no Read<#= code #>AsyncCore exists.
<#+
	}

	this.PushIndent( 1 );
	this.SuccessWithLengthCheck( code, resultVariable, "this.Read" + code + "Core( " + valueVariable.Integral( isAsync ) + ")", isAsync );
	this.PopIndent();
#>
}
<#+
} // WriteReadLengthCore( string code, string headerVariable, DecodedVariable valueVariable, string resultVariable, bool isAsync )


private void WriteReadRaw( string typeName, string code, bool isAsync )
{
	WriteReadBodyCore( typeName, Nullability.Reference, ( t, valueVar, resultVar, isAsync0 ) => this.WriteReadRawCore( code, valueVar, resultVar, isAsync0 ), isAsync );
} // WriteReadRaw( string typeName, string code )

private void WriteReadRawCore( string code, DecodedVariable valueVariable, string resultVariable, bool isAsync )
{
#>
case ReadValueResult.String:
case ReadValueResult.Binary:
{
<#+
	this.PushIndent( 1 );
	this.Success( null, resultVariable, Await( isAsync, "this.Read" + code + AsyncSuffix( isAsync ) + "Core( " + valueVariable.Integral( isAsync ) + LastArgument( isAsync ) + " )" ), isAsync );
	this.PopIndent();
#>
}
<#+
} // WriteReadRawCore( string code, string headerVariable, DecodedVariable valueVariable, string resultVariable, bool isAsync )

private void WriteReadObject( bool isAsync )
{
	WriteReadBodyCore( "MessagePackObject", Nullability.Value, ( typeVar, valueVar, resultVar, isAsync0 ) => this.WriteReadObjectCore( typeVar, valueVar, resultVar, isAsync0 ), isAsync );
} // WriteReadObject( bool )

private void WriteReadObjectCore( string typeVariable, DecodedVariable valueVariable, string resultVariable, bool isAsync )
{
#>
case ReadValueResult.Nil:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.SuccessObject( resultVariable, "MessagePackObject.Nil", isAsync, false );
		this.PopIndent();
#>
}
case ReadValueResult.Boolean:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.SuccessObject( resultVariable, valueVariable.Integral( isAsync ) + " != 0", isAsync, true );
		this.PopIndent();
#>
}
<#+
	foreach( var entry in TypeCodeMappings )
	{
#>
case ReadValueResult.<#= entry.Code #>:
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar();
		this.SuccessObject( resultVariable, CastIfNecessary( GetSourceType( entry.CodeType ), entry.CodeType, false, valueVariable.Get( entry.CodeType, isAsync ), false, isAsync ), isAsync, true );
		this.PopIndent();
#>
}
<#+
	} // foreach -- scalar

// Array/Map
#>
case ReadValueResult.ArrayLength:
{
<#+
		if( isAsync )
		{
#>
	// ReadArrayLengthCore does not perform I/O, so no ReadArrayLengthAsyncCore exists.
<#+
		}
#>
	var length = <#= CastIfNecessary( typeof( long ), typeof( uint ), false, "this.ReadArrayLengthCore( " + valueVariable.Integral( isAsync ) + " )", false, isAsync ) #>;
	if ( !isDeep )
	{
<#+
		this.PushIndent( 2 );
		this.SuccessObject( resultVariable, "length", isAsync, true );
		this.PopIndent();
#>
	}

	this.CheckLength( length, ReadValueResult.ArrayLength );
	var collection = new List<MessagePackObject>( unchecked( ( int ) length ) );
	for( var i = 0; i < length; i++ )
	{
		MessagePackObject item;
		if( !this.ReadSubtreeObject( /* isDeep */true, out item ) )
		{
<#+
		this.PushIndent( 3 );
		this.Fail( resultVariable, "MessagePackObject", isAsync );
		this.PopIndent();
#>
		}

		collection.Add( item );
	}

	{
<#+
		this.PushIndent( 2 );
		this.SuccessObject( resultVariable, "new MessagePackObject( collection, /* isImmutable */true )", isAsync, true );
		this.PopIndent();
#>
	}
}
case ReadValueResult.MapLength:
{
<#+
		if( isAsync )
		{
#>
	// ReadMapLengthCore does not perform I/O, so no ReadMapLengthAsyncCore exists.
<#+
		}
#>
	var length = <#= CastIfNecessary( typeof( long ), typeof( uint ), false, "this.ReadMapLengthCore( " + valueVariable.Integral( isAsync ) + " )", false, isAsync ) #>;
	if ( !isDeep )
	{
<#+
		this.PushIndent( 2 );
		this.SuccessObject( resultVariable, "length", isAsync, true );
		this.PopIndent();
#>
	}

	this.CheckLength( length, ReadValueResult.MapLength );
	var collection = new MessagePackObjectDictionary( unchecked( ( int ) length ) );
	for( var i = 0; i < length; i++ )
	{
		MessagePackObject key;
		if( !this.ReadSubtreeObject( /* isDeep */true, out key ) )
		{
<#+
		this.PushIndent( 3 );
		this.Fail( resultVariable, "MessagePackObject", isAsync );
		this.PopIndent();
#>
		}

		MessagePackObject value;
		if( !this.ReadSubtreeObject( /* isDeep */true, out value ) )
		{
<#+
		this.PushIndent( 3 );
		this.Fail( resultVariable, "MessagePackObject", isAsync );
		this.PopIndent();
#>
		}

		collection.Add( key, value );
	}

	{
<#+
		this.PushIndent( 2 );
		this.SuccessObject( resultVariable, "new MessagePackObject( collection, /* isImmutable */true )", isAsync, true );
		this.PopIndent();
#>
	}
}

<#+
// Array/Map

#>
case ReadValueResult.String:
{
<#+
		this.PushIndent( 1 );
		this.SuccessObject(
			resultVariable, 
			"new MessagePackObject( new MessagePackString( " + Await( isAsync, "this.ReadBinary" + AsyncSuffix( isAsync ) + "Core( " + valueVariable.Integral( isAsync )  + LastArgument( isAsync ) + " )" ) + ", false ) )",
			isAsync,
			false
		);
		this.PopIndent();
#>
}
case ReadValueResult.Binary:
{
<#+
		this.PushIndent( 1 );
		this.SuccessObject(
			resultVariable, 
			"new MessagePackObject( new MessagePackString( " + Await( isAsync, "this.ReadBinary" + AsyncSuffix( isAsync ) + "Core( " + valueVariable.Integral( isAsync )  + LastArgument( isAsync ) + " )" ) + ", true ) )",
			isAsync,
			false
		);
		this.PopIndent();
#>
}
<#+
	this.WriteReadExtCore( typeVariable, resultVariable, true, isAsync );
} // WriteReadObjectCore( string typeVariable, DecodedVariable valueVariable, string resultVariable, bool isAsync )


private void WriteReadExt( bool isAsync )
{
	WriteReadBodyCore( "MessagePackExtendedTypeObject", Nullability.Value, ( typeVar, v, resultVar, isAsync0 ) => this.WriteReadExtCore( typeVar, resultVar, false, isAsync0 ), isAsync );
} // WriteReadExt( bool isAsync )

private void WriteReadExtCore( string typeVariable, string resultVariable, bool isMpo, bool isAsync )
{

	foreach( var code in ExtCodes )
	{
#>
case ReadValueResult.<#= code #>:
<#+
	} // foreach
#>
{
<#+
	var expression =
		Await( isAsync, "this.ReadMessagePackExtendedTypeObject" + AsyncSuffix( isAsync ) + "Core( " + typeVariable + LastArgument( isAsync ) + " )" );

	this.PushIndent( 1 );

	if( !isMpo )
	{
		this.Success( null, resultVariable, expression, isAsync );
	}
	else
	{
		this.SuccessObject( resultVariable, expression, isAsync, true );
	}

	this.PopIndent();
#>
}
<#+
} // WriteReadExtCore( string headerVariable, string resultVariable, bool isAsync )


private void OnReturnScalar()
{
#>
this.InternalCollectionType = CollectionType.None;
<#+
} // OnReturnScalar()


private bool CanConvertTo( Type destination, int size )
{
	switch( Type.GetTypeCode( destination ) )
	{
		case TypeCode.Single:
		case TypeCode.Double:
		{
			return true;
		}
		default:
		{
			return System.Runtime.InteropServices.Marshal.SizeOf( destination ) >= size / 8;
		}
	}
} // CanConvertTo( Type destination, String source )

private static string CastIfNecessary( Type sourceType, Type targetType, bool shouldCheckOverflow, string sourceExpression, bool shouldInsertUInt64Cast, bool isAsync )
{
	if( sourceType == targetType )
	{
		return 
			shouldInsertUInt64Cast
			? String.Format( CultureInfo.InvariantCulture, "unchecked( ( UInt64 ){0} )", sourceExpression )
			: sourceExpression;
	}

	if( !isAsync )
	{
		if( sourceType == typeof( float ) )
		{
			if( targetType == typeof( double ) )
			{
				return sourceExpression;
			}
		}
		else if( sourceType != typeof( double ) )
		{
			if( targetType == typeof( long ) )
			{
				return 
					shouldInsertUInt64Cast
					? String.Format( CultureInfo.InvariantCulture, "checked( ( Int64 )( UInt64 ){0} )", sourceExpression )
					: sourceExpression;
			}

			if ( targetType == typeof( float ) || targetType == typeof( double ) )
			{
				return 
					shouldInsertUInt64Cast
					? String.Format( CultureInfo.InvariantCulture, "unchecked( ( UInt64 ){0} )", sourceExpression )
					: sourceExpression;
			}
		}
	}

	return String.Format( CultureInfo.InvariantCulture, "{0}( ( {1} ){2}{3} )", ( shouldCheckOverflow ? "checked" : "unchecked" ), targetType.Name, ( shouldInsertUInt64Cast ? "( UInt64 )" : String.Empty ), sourceExpression );
} // CastIfNecessary( Type sourceType, Type targetType, bool shouldCheckOverflow, string sourceExpression )

private static Type GetSourceType( Type targetType )
{
	return 
		targetType == typeof( float )
		? typeof( float )
		: targetType == typeof( double )
		? typeof( double )
		: typeof( long );
}

private void Success( string type, string resultVariable, string expression, bool isAsync )
{
	if( !isAsync )
	{
#>
<#= resultVariable #> = <#= expression #>;
return true;
<#+
	}
	else
	{
		var typeArgument =
			type == null ? String.Empty : "<" + type + ">";
#>
return AsyncReadResult.Success<#= typeArgument #>( <#= expression #> );
<#+
	}
} // Sucess( string resultVariable, string expression, bool isAsync )

private void SuccessWithLengthCheck( string code, string resultVariable, string expression, bool isAsync )
{
	if( !isAsync )
	{
#>
<#= resultVariable #> = <#= expression #>;
this.CheckLength( <#= resultVariable #>, ReadValueResult.<#= code #> );
return true;
<#+
	}
	else
	{
#>
var result = <#= expression #>;
this.CheckLength( result, ReadValueResult.<#= code #> );
return AsyncReadResult.Success( result );
<#+
	}

#>
<#+
} // SuccessWithLengthCheck( string type, string resultVariable, string expression, bool isAsync )

private void SuccessObject( string resultVariable, string expression, bool isAsync, bool withTypeVariable )
{
	if( !isAsync )
	{
#>
<#= resultVariable #> = <#= expression #>;
this.InternalData = <#= resultVariable #>;
return true;
<#+
	}
	else
	{
		var typeArgument =
			withTypeVariable ? "<MessagePackObject>" : String.Empty;
#>
var result = <#= expression #>;
this.InternalData = result;
return AsyncReadResult.Success<#= typeArgument #>( result );
<#+
	}

#>
<#+
} // SuccessObject( string resultVariable, string expression, bool isAsync )

private void Fail( string resultVariable, string typeName, bool isAsync )
{
	if( !isAsync )
	{
#>
<#= resultVariable #> = default( <#= typeName #> );
return false;
<#+
	}
	else
	{
#>
return AsyncReadResult.Fail<#= "<" + typeName + ">" #>();
<#+
	}
} // Fail( string resultVariable, string typeName, bool isAsync )

private static string Await( bool isAsync, string expression )
{
	return ( isAsync ? "await ": String.Empty ) + expression + ( isAsync ? ".ConfigureAwait( false )" : String.Empty );
} // Await( bool isAsync, string expression )

private static string AsyncSuffix( bool isAsync )
{
	return isAsync ? "Async": String.Empty;
} // AsyncSuffix( bool isAsync )

private static string LastArgument( bool isAsync )
{
	return isAsync ? ", cancellationToken" : String.Empty;
} // LastArgument( bool isAsync )

private enum Nullability
{
	Reference,
	Value,
	Nullable
}

private class DecodedVariable
{
	private readonly string _integral;
	private readonly string _real32;
	private readonly string _real64;
	private readonly string _asyncResult;

	public DecodedVariable( string integral, string real32, string real64, string asyncResult )
	{
		this._integral = integral;
		this._real32 = real32;
		this._real64 = real64;
		this._asyncResult = asyncResult;
	}

	public string Get( Type type, bool isAsync )
	{
		if( type == typeof( float ) )
		{
			return this.Real32( isAsync );
		}

		if( type == typeof( double ) )
		{
			return this.Real64( isAsync );
		}

		return this.Integral( isAsync );
	}

	public string Integral( bool isAsync )
	{
		return this.GetVariable( this._integral, isAsync );
	}

	public string Real32( bool isAsync )
	{
		return this.GetVariable( this._real32, isAsync );
	}

	public string Real64( bool isAsync )
	{
		return this.GetVariable( this._real64, isAsync );
	}

	private string GetVariable( string name, bool isAsync )
	{
		return isAsync ? this._asyncResult + "." + name : name;
	}
}
#>