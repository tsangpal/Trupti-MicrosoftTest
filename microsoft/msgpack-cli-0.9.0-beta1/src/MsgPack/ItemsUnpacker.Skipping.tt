<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="..\Core.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

#if !UNITY || MSGPACK_UNITY_FULL
using Int64Stack = System.Collections.Generic.Stack<System.Int64>;
#endif // !UNITY || MSGPACK_UNITY_FULL

namespace MsgPack
{
	// This file was generated from ItemsUnpacker.Skipping.tt and StreamingUnapkcerBase.ttinclude T4Template.
	// Do not modify this file. Edit ItemsUnpacker.Skipping.tt and StreamingUnapkcerBase.ttinclude instead.

	partial class ItemsUnpacker
	{
<#
foreach ( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP
<#
	}
#>
		protected override <#= isAsync ? "async Task<long?>" : "long?" #> Skip<#= AsyncSuffix( isAsync ) #>Core(<#= Parameter( isAsync ) #>)
		{
			long remainingItems = -1;
			long startOffset = this._offset;
			Int64Stack remainingCollections = null;
			do
			{
				var header = <#= !isAsync ? "this.ReadByteFromSource()" : "await this.ReadByteFromSourceAsync( cancellationToken ).ConfigureAwait( false )" #>;
				if ( header < 0 )
				{
					return null;
				}

				switch ( header )
				{
					case MessagePackCode.NilValue:
					case MessagePackCode.TrueValue:
					case MessagePackCode.FalseValue:
					{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
				}

				if ( header < 0x80 )
				{
<#
this.PushIndent( 5 );
this.WriteTryPopCollection();
this.PopIndent();
#>
					continue;
				}
				else if ( header >= 0xE0 )
				{
<#
this.PushIndent( 5 );
this.WriteTryPopCollection();
this.PopIndent();
#>
					continue;
				}

				switch ( header & 0xF0 )
				{
					case 0x80:
					{
						var size = header & 0xF;
						if( size == 0 )
						{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						}
						else
						{
<#
this.PushIndent( 6 );
this.WritePushCollection( "size * 2" );
this.PopIndent();
#>
						}

						continue;
					}
					case 0x90:
					{
						var size = header & 0xF;
						if( size == 0 )
						{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						}
						else
						{
<#
this.PushIndent( 6 );
this.WritePushCollection( "size" );
this.PopIndent();
#>
						}

						continue;
					}
					case 0xA0:
					case 0xB0:
					{
						var size = header & 0x1F;
<#
this.PushIndent( 6 );
this.WriteDrainValue( "size", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
				}

				switch ( header )
				{
					case MessagePackCode.SignedInt8:
					case MessagePackCode.UnsignedInt8:
					{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.WriteDrainValue( "1", isAsync );
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.SignedInt16:
					case MessagePackCode.UnsignedInt16:
					{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.WriteDrainValue( "2", isAsync );
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.SignedInt32:
					case MessagePackCode.UnsignedInt32:
					case MessagePackCode.Real32:
					{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.WriteDrainValue( "4", isAsync );
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.SignedInt64:
					case MessagePackCode.UnsignedInt64:
					case MessagePackCode.Real64:
					{
<#
this.PushIndent( 6 );
this.WriteTryPopCollection();
this.WriteDrainValue( "8", isAsync );
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Str8:
					case MessagePackCode.Bin8:
					{
						byte length;
<#
this.PushIndent( 6 );
this.WriteUnpackByte( "length", isAsync );
this.WriteDrainValue( "length", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Bin16:
					case MessagePackCode.Raw16:
					{
						ushort length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 2, "length", isAsync );
this.WriteDrainValue( "length", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Bin32:
					case MessagePackCode.Raw32:
					{
						uint length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 4, "length", isAsync );
this.WriteDrainValue( "length", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Array16:
					{
						ushort length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 2, "length", isAsync );
this.PopIndent();
#>
						if( length == 0 )
						{
<#
this.PushIndent( 7 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						}
						else
						{
<#
this.PushIndent( 7 );
this.WritePushCollection( "length" );
this.PopIndent();
#>
						}

						continue;
					}
					case MessagePackCode.Array32:
					{
						uint length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 4, "length", isAsync );
this.PopIndent();
#>
						if( length == 0 )
						{
<#
this.PushIndent( 7 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						}
						else
						{
<#
this.PushIndent( 7 );
this.WritePushCollection( "length" );
this.PopIndent();
#>
						}

						continue;
					}
					case MessagePackCode.Map16:
					{
						ushort length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 2, "length", isAsync );
this.PopIndent();
#>
						if( length == 0 )
						{
<#
this.PushIndent( 7 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						}
						else
						{
<#
this.PushIndent( 7 );
this.WritePushCollection( "length * 2" );
this.PopIndent();
#>
						}

						continue;
					}
					case MessagePackCode.Map32:
					{
						uint length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 4, "length", isAsync );
this.PopIndent();
#>
						if( length == 0 )
						{
<#
this.PushIndent( 7 );
this.WriteTryPopCollection();
this.PopIndent();
#>
						}
						else
						{
<#
this.PushIndent( 7 );
this.WritePushCollection( "length * 2" );
this.PopIndent();
#>
						}

						continue;
					}
					case MessagePackCode.FixExt1:
					{
<#
this.PushIndent( 6 );
this.WriteUnpackByte( null, isAsync );
this.WriteDrainValue( "1", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.FixExt2:
					{
<#
this.PushIndent( 6 );
this.WriteUnpackByte( null, isAsync );
this.WriteDrainValue( "2", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.FixExt4:
					{
<#
this.PushIndent( 6 );
this.WriteUnpackByte( null, isAsync );
this.WriteDrainValue( "4", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.FixExt8:
					{
<#
this.PushIndent( 6 );
this.WriteUnpackByte( null, isAsync );
this.WriteDrainValue( "8", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.FixExt16:
					{
<#
this.PushIndent( 6 );
this.WriteUnpackByte( null, isAsync );
this.WriteDrainValue( "16", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Ext8:
					{
						byte length;
<#
this.PushIndent( 6 );
this.WriteUnpackByte( "length", isAsync );
this.WriteUnpackByteSubsequent( null, isAsync );
this.WriteDrainValue( "length", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Ext16:
					{
						ushort length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 2, "length", isAsync );
this.WriteUnpackByteSubsequent( null, isAsync );
this.WriteDrainValue( "length", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					case MessagePackCode.Ext32:
					{
						uint length;
<#
this.PushIndent( 6 );
this.WriteUnpackLength( 4, "length", isAsync );
this.WriteUnpackByteSubsequent( null, isAsync );
this.WriteDrainValue( "length", isAsync );
this.WriteTryPopCollection();
this.PopIndent();
#>
						continue;
					}
					default:
					{
						this.ThrowUnassignedMessageTypeException( header );
						return null; // Never reach
					}
				}
			} while ( remainingItems > 0 );

			return this._offset - startOffset;
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP
<#
	}
}
#>
	}
}
<#+
private void WritePushCollection( string sizeVariable )
{
#>
#region PushContextCollection

if( remainingItems >= 0 )
{
	if( remainingCollections == null )
	{
		remainingCollections = new Int64Stack( 4 );
	}
	
	remainingCollections.Push( remainingItems );
}

remainingItems = <#= sizeVariable #>;

#endregion PushContextCollection
<#+
}

private void WriteTryPopCollection()
{
#>
#region TryPopContextCollection

remainingItems--;

if( remainingCollections != null )
{
	while ( remainingItems == 0 && remainingCollections.Count > 0 )
	{
		if( remainingCollections.Count == 0 )
		{
			break;
		}

		remainingItems = remainingCollections.Pop();
		remainingItems--;
	}
}

#endregion TryPopContextCollection
<#+
}

private void WriteDrainValue( string sizeVariable, bool isAsync )
{
#>
#region DrainValue

long bytesRead = 0;
var dummyBufferForSkipping = BufferManager.NewByteBuffer( unchecked( ( int )Math.Min( <#= sizeVariable #>, Int32.MaxValue ) ) );
while( <#= sizeVariable #> > bytesRead )
{
	var remaining = ( <#= sizeVariable #> - bytesRead );
	var reading = remaining > dummyBufferForSkipping.Length ? dummyBufferForSkipping.Length : unchecked( ( int )remaining );
	this._lastOffset = this._offset;
	var lastRead = <#= Await( isAsync, "this._source.Read" + AsyncSuffix( isAsync ) + "( dummyBufferForSkipping, 0, reading" +  LastArgument( isAsync ) + " )" ) #>;
	this._offset += lastRead;
	bytesRead += lastRead;
	if ( lastRead == 0 )
	{
		return null;
	}
}

#endregion DrainValue
<#+
}

private void WriteUnpackLength( int size, string lengthVariable, bool isAsync )
{
#>
this._lastOffset = this._offset;
var read = <#= Await( isAsync, "this._source.Read" +  AsyncSuffix( isAsync ) + "( this._scalarBuffer, 0, " + size.ToString( CultureInfo.InvariantCulture ) + LastArgument( isAsync ) + " )" ) #>;
this._offset += read;
if ( read == <#= size.ToString( CultureInfo.InvariantCulture ) #> )
{
	<#= lengthVariable #> = BigEndianBinary.ToUInt<#= ( size * 8 ).ToString( CultureInfo.InvariantCulture ) #>( this._scalarBuffer, 0 );
}
else
{
	return null;
}
<#+
}

private void WriteUnpackByte( string lengthVariable, bool isAsync )
{
	this.WriteUnpackByteCore( lengthVariable, true, isAsync );
}

private void WriteUnpackByteSubsequent( string lengthVariable, bool isAsync )
{
	this.WriteUnpackByteCore( lengthVariable, false, isAsync );
}

private void WriteUnpackByteCore( string lengthVariable, bool needsDeclaration, bool isAsync )
{
#>
this._lastOffset = this._offset;
<#= needsDeclaration ? "var" : String.Empty #> read = <#= Await( isAsync, "this._source.Read" + AsyncSuffix( isAsync ) + "( this._scalarBuffer, 0, 1" + LastArgument( isAsync ) + " )" ) #>;
this._offset += read;
if ( read == 1 )
{
<#+
	if ( lengthVariable != null )
	{
#>
	<#= lengthVariable #> = this._scalarBuffer[0];
<#+
	}
#>
}
else
{
	return null;
}
<#+
}

private static string Await( bool isAsync, string expression )
{
	return ( isAsync ? "await ": String.Empty ) + expression + ( isAsync ? ".ConfigureAwait( false )" : String.Empty );
}

private static string AsyncSuffix( bool isAsync )
{
	return isAsync ? "Async": String.Empty;
}

private static string Parameter( bool isAsync )
{
	return isAsync ? " CancellationToken cancellationToken " : String.Empty;
}

private static string LastArgument( bool isAsync )
{
	return isAsync ? ", cancellationToken" : String.Empty;
}

private static string Argument( bool isAsync )
{
	return isAsync ? " cancellationToken " : String.Empty;
}
#>
