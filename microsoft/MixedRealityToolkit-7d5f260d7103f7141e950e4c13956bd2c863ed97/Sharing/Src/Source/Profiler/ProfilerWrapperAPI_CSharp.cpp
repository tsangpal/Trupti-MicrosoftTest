/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_SharingProfiler(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_SharingProfiler(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_SharingProfiler(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "../Common/Common.h"
#include "ProfilerAPI.h"
using namespace XTools;


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ProfilerWrapperAPI_CSharp.h"

SwigDirector_LogWriter::SwigDirector_LogWriter() : XTools::LogWriter(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_LogWriter::~SwigDirector_LogWriter() {
  
}


void SwigDirector_LogWriter::WriteLogEntry(XTools::LogSeverity severity, std::string const &message) {
  int jseverity  ;
  char * jmessage = 0 ;
  
  if (!swig_callbackWriteLogEntry) {
    XTools::LogWriter::WriteLogEntry(severity,message);
    return;
  } else {
    jseverity = severity;
    jmessage = SWIG_csharp_string_callback((&message)->c_str()); 
    swig_callbackWriteLogEntry(jseverity, jmessage);
  }
}

void SwigDirector_LogWriter::swig_connect_director(SWIG_Callback0_t callbackWriteLogEntry) {
  swig_callbackWriteLogEntry = callbackWriteLogEntry;
}

void SwigDirector_LogWriter::swig_init_callbacks() {
  swig_callbackWriteLogEntry = 0;
}

SwigDirector_DiscoveryClientListener::SwigDirector_DiscoveryClientListener() : XTools::DiscoveryClientListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_DiscoveryClientListener::~SwigDirector_DiscoveryClientListener() {
  
}


void SwigDirector_DiscoveryClientListener::OnRemoteSystemDiscovered(XTools::DiscoveredSystemPtr const &remoteSystem) {
  void * jremoteSystem = 0 ;
  
  if (!swig_callbackOnRemoteSystemDiscovered) {
    XTools::DiscoveryClientListener::OnRemoteSystemDiscovered(remoteSystem);
    return;
  } else {
    // ref_ptr by reference directorin
    if (remoteSystem) {
      remoteSystem->AddRef(); 
    }
    jremoteSystem = (&remoteSystem)->get();
    
    swig_callbackOnRemoteSystemDiscovered(jremoteSystem);
  }
}

void SwigDirector_DiscoveryClientListener::OnRemoteSystemLost(XTools::DiscoveredSystemPtr const &remoteSystem) {
  void * jremoteSystem = 0 ;
  
  if (!swig_callbackOnRemoteSystemLost) {
    XTools::DiscoveryClientListener::OnRemoteSystemLost(remoteSystem);
    return;
  } else {
    // ref_ptr by reference directorin
    if (remoteSystem) {
      remoteSystem->AddRef(); 
    }
    jremoteSystem = (&remoteSystem)->get();
    
    swig_callbackOnRemoteSystemLost(jremoteSystem);
  }
}

void SwigDirector_DiscoveryClientListener::swig_connect_director(SWIG_Callback0_t callbackOnRemoteSystemDiscovered, SWIG_Callback1_t callbackOnRemoteSystemLost) {
  swig_callbackOnRemoteSystemDiscovered = callbackOnRemoteSystemDiscovered;
  swig_callbackOnRemoteSystemLost = callbackOnRemoteSystemLost;
}

void SwigDirector_DiscoveryClientListener::swig_init_callbacks() {
  swig_callbackOnRemoteSystemDiscovered = 0;
  swig_callbackOnRemoteSystemLost = 0;
}

SwigDirector_ProfilerStreamListener::SwigDirector_ProfilerStreamListener() : XTools::ProfilerStreamListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ProfilerStreamListener::~SwigDirector_ProfilerStreamListener() {
  
}


void SwigDirector_ProfilerStreamListener::OnConnected() {
  if (!swig_callbackOnConnected) {
    XTools::ProfilerStreamListener::OnConnected();
    return;
  } else {
    swig_callbackOnConnected();
  }
}

void SwigDirector_ProfilerStreamListener::OnConnectFailed() {
  if (!swig_callbackOnConnectFailed) {
    XTools::ProfilerStreamListener::OnConnectFailed();
    return;
  } else {
    swig_callbackOnConnectFailed();
  }
}

void SwigDirector_ProfilerStreamListener::OnDisconnected() {
  if (!swig_callbackOnDisconnected) {
    XTools::ProfilerStreamListener::OnDisconnected();
    return;
  } else {
    swig_callbackOnDisconnected();
  }
}

void SwigDirector_ProfilerStreamListener::OnReceiveProfileFrame(XTools::ProfileFramePtr const &newFrame) {
  void * jnewFrame = 0 ;
  
  if (!swig_callbackOnReceiveProfileFrame) {
    XTools::ProfilerStreamListener::OnReceiveProfileFrame(newFrame);
    return;
  } else {
    // ref_ptr by reference directorin
    if (newFrame) {
      newFrame->AddRef(); 
    }
    jnewFrame = (&newFrame)->get();
    
    swig_callbackOnReceiveProfileFrame(jnewFrame);
  }
}

void SwigDirector_ProfilerStreamListener::swig_connect_director(SWIG_Callback0_t callbackOnConnected, SWIG_Callback1_t callbackOnConnectFailed, SWIG_Callback2_t callbackOnDisconnected, SWIG_Callback3_t callbackOnReceiveProfileFrame) {
  swig_callbackOnConnected = callbackOnConnected;
  swig_callbackOnConnectFailed = callbackOnConnectFailed;
  swig_callbackOnDisconnected = callbackOnDisconnected;
  swig_callbackOnReceiveProfileFrame = callbackOnReceiveProfileFrame;
}

void SwigDirector_ProfilerStreamListener::swig_init_callbacks() {
  swig_callbackOnConnected = 0;
  swig_callbackOnConnectFailed = 0;
  swig_callbackOnDisconnected = 0;
  swig_callbackOnReceiveProfileFrame = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kInvalidSocketID_get() {
  unsigned long long jresult ;
  XTools::SocketID result;
  
  result = (XTools::SocketID)(XTools::SocketID)XTools::kInvalidSocketID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kInvalidConnectionGUID_get() {
  unsigned long long jresult ;
  XTools::ConnectionGUID result;
  
  result = (XTools::ConnectionGUID)(XTools::ConnectionGUID)XTools::kInvalidConnectionGUID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogManager(void * jarg1) {
  XTools::LogManager *arg1 = (XTools::LogManager *) 0 ;
  
  arg1 = (XTools::LogManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogManager_Log(void * jarg1, int jarg2, char * jarg3) {
  XTools::LogManager *arg1 = (XTools::LogManager *) 0 ;
  XTools::LogSeverity arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (XTools::LogManager *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Log(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogWriter(void * jarg1) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  
  arg1 = (XTools::LogWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_WriteLogEntry(void * jarg1, int jarg2, char * jarg3) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (XTools::LogWriter *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->WriteLogEntry(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_WriteLogEntrySwigExplicitLogWriter(void * jarg1, int jarg2, char * jarg3) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (XTools::LogWriter *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->XTools::LogWriter::WriteLogEntry(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogWriter() {
  void * jresult ;
  XTools::LogWriter *result = 0 ;
  
  result = (XTools::LogWriter *)new SwigDirector_LogWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_director_connect(void *objarg, SwigDirector_LogWriter::SWIG_Callback0_t callback0) {
  XTools::LogWriter *obj = (XTools::LogWriter *)objarg;
  SwigDirector_LogWriter *director = dynamic_cast<SwigDirector_LogWriter *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Receipt(void * jarg1) {
  XTools::Receipt *arg1 = (XTools::Receipt *) 0 ;
  
  arg1 = (XTools::Receipt *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Receipt_Clear(void * jarg1) {
  XTools::Receipt *arg1 = (XTools::Receipt *) 0 ;
  
  arg1 = (XTools::Receipt *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Receipt() {
  void * jresult ;
  XTools::Receipt *result = 0 ;
  
  result = (XTools::Receipt *)new XTools::Receipt();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XString__SWIG_0() {
  void * jresult ;
  XTools::XString *result = 0 ;
  
  result = (XTools::XString *)new XTools::XString();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XString__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  XTools::XString *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (XTools::XString *)new XTools::XString((std::string const &)*arg1);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XString(void * jarg1) {
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  
  arg1 = (XTools::XString *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XString_GetLength(void * jarg1) {
  unsigned int jresult ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  XTools::uint32 result;
  
  arg1 = (XTools::XString *)jarg1; 
  result = (XTools::uint32)((XTools::XString const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XString_IsEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  XTools::ref_ptr< XTools::XString > *arg2 = 0 ;
  XTools::ref_ptr< XTools::XString > tempnull2 ;
  XTools::ref_ptr< XTools::XString > temp2 ;
  XTools::XString *smartarg2 ;
  bool result;
  
  arg1 = (XTools::XString *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)((XTools::XString const *)arg1)->IsEqual((XTools::ref_ptr< XTools::XString > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XString_GetString(void * jarg1) {
  char * jresult ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XTools::XString *)jarg1; 
  result = (std::string *) &((XTools::XString const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Listener(void * jarg1) {
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  
  arg1 = (XTools::Listener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Listener_UnregisterAll(void * jarg1) {
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  
  arg1 = (XTools::Listener *)jarg1; 
  (arg1)->UnregisterAll();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Listener_IsRegistered(void * jarg1) {
  unsigned int jresult ;
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  bool result;
  
  arg1 = (XTools::Listener *)jarg1; 
  result = (bool)((XTools::Listener const *)arg1)->IsRegistered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Listener() {
  void * jresult ;
  XTools::Listener *result = 0 ;
  
  result = (XTools::Listener *)new XTools::Listener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DiscoveredSystem(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  XTools::SystemRole arg3 ;
  XTools::DiscoveredSystem *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (XTools::SystemRole)jarg3; 
  result = (XTools::DiscoveredSystem *)new XTools::DiscoveredSystem((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DiscoveredSystem_GetName(void * jarg1) {
  char * jresult ;
  XTools::DiscoveredSystem *arg1 = (XTools::DiscoveredSystem *) 0 ;
  std::string result;
  
  arg1 = (XTools::DiscoveredSystem *)jarg1; 
  result = ((XTools::DiscoveredSystem const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DiscoveredSystem_GetAddress(void * jarg1) {
  char * jresult ;
  XTools::DiscoveredSystem *arg1 = (XTools::DiscoveredSystem *) 0 ;
  std::string result;
  
  arg1 = (XTools::DiscoveredSystem *)jarg1; 
  result = ((XTools::DiscoveredSystem const *)arg1)->GetAddress();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DiscoveredSystem_GetRole(void * jarg1) {
  int jresult ;
  XTools::DiscoveredSystem *arg1 = (XTools::DiscoveredSystem *) 0 ;
  XTools::SystemRole result;
  
  arg1 = (XTools::DiscoveredSystem *)jarg1; 
  result = (XTools::SystemRole)((XTools::DiscoveredSystem const *)arg1)->GetRole();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DiscoveredSystem(void * jarg1) {
  XTools::DiscoveredSystem *arg1 = (XTools::DiscoveredSystem *) 0 ;
  
  arg1 = (XTools::DiscoveredSystem *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DiscoveryClientListener(void * jarg1) {
  XTools::DiscoveryClientListener *arg1 = (XTools::DiscoveryClientListener *) 0 ;
  
  arg1 = (XTools::DiscoveryClientListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClientListener_OnRemoteSystemDiscovered(void * jarg1, void * jarg2) {
  XTools::DiscoveryClientListener *arg1 = (XTools::DiscoveryClientListener *) 0 ;
  XTools::DiscoveredSystemPtr *arg2 = 0 ;
  XTools::DiscoveredSystemPtr tempnull2 ;
  XTools::DiscoveredSystemPtr temp2 ;
  XTools::DiscoveredSystem *smartarg2 ;
  
  arg1 = (XTools::DiscoveryClientListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( DiscoveredSystem **)&jarg2; 
    temp2 = XTools::ref_ptr<  DiscoveredSystem >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnRemoteSystemDiscovered((XTools::DiscoveredSystemPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClientListener_OnRemoteSystemDiscoveredSwigExplicitDiscoveryClientListener(void * jarg1, void * jarg2) {
  XTools::DiscoveryClientListener *arg1 = (XTools::DiscoveryClientListener *) 0 ;
  XTools::DiscoveredSystemPtr *arg2 = 0 ;
  XTools::DiscoveredSystemPtr tempnull2 ;
  XTools::DiscoveredSystemPtr temp2 ;
  XTools::DiscoveredSystem *smartarg2 ;
  
  arg1 = (XTools::DiscoveryClientListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( DiscoveredSystem **)&jarg2; 
    temp2 = XTools::ref_ptr<  DiscoveredSystem >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::DiscoveryClientListener::OnRemoteSystemDiscovered((XTools::DiscoveredSystemPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClientListener_OnRemoteSystemLost(void * jarg1, void * jarg2) {
  XTools::DiscoveryClientListener *arg1 = (XTools::DiscoveryClientListener *) 0 ;
  XTools::DiscoveredSystemPtr *arg2 = 0 ;
  XTools::DiscoveredSystemPtr tempnull2 ;
  XTools::DiscoveredSystemPtr temp2 ;
  XTools::DiscoveredSystem *smartarg2 ;
  
  arg1 = (XTools::DiscoveryClientListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( DiscoveredSystem **)&jarg2; 
    temp2 = XTools::ref_ptr<  DiscoveredSystem >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnRemoteSystemLost((XTools::DiscoveredSystemPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClientListener_OnRemoteSystemLostSwigExplicitDiscoveryClientListener(void * jarg1, void * jarg2) {
  XTools::DiscoveryClientListener *arg1 = (XTools::DiscoveryClientListener *) 0 ;
  XTools::DiscoveredSystemPtr *arg2 = 0 ;
  XTools::DiscoveredSystemPtr tempnull2 ;
  XTools::DiscoveredSystemPtr temp2 ;
  XTools::DiscoveredSystem *smartarg2 ;
  
  arg1 = (XTools::DiscoveryClientListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( DiscoveredSystem **)&jarg2; 
    temp2 = XTools::ref_ptr<  DiscoveredSystem >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::DiscoveryClientListener::OnRemoteSystemLost((XTools::DiscoveredSystemPtr const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DiscoveryClientListener() {
  void * jresult ;
  XTools::DiscoveryClientListener *result = 0 ;
  
  result = (XTools::DiscoveryClientListener *)new SwigDirector_DiscoveryClientListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClientListener_director_connect(void *objarg, SwigDirector_DiscoveryClientListener::SWIG_Callback0_t callback0, SwigDirector_DiscoveryClientListener::SWIG_Callback1_t callback1) {
  XTools::DiscoveryClientListener *obj = (XTools::DiscoveryClientListener *)objarg;
  SwigDirector_DiscoveryClientListener *director = dynamic_cast<SwigDirector_DiscoveryClientListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoveryClient_Create() {
  void * jresult ;
  XTools::ref_ptr< XTools::DiscoveryClient > result;
  
  result = XTools::DiscoveryClient::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( DiscoveryClient **)&jresult = (&result)->get();
  } else {
    *( DiscoveryClient **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClient_Ping(void * jarg1) {
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  (arg1)->Ping();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DiscoveryClient_GetDiscoveredCount(void * jarg1) {
  unsigned int jresult ;
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  XTools::uint32 result;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  result = (XTools::uint32)((XTools::DiscoveryClient const *)arg1)->GetDiscoveredCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoveryClient_GetDiscoveredSystem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  XTools::uint32 arg2 ;
  XTools::DiscoveredSystemPtr result;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  arg2 = (XTools::uint32)jarg2; 
  result = ((XTools::DiscoveryClient const *)arg1)->GetDiscoveredSystem(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( DiscoveredSystem **)&jresult = (&result)->get();
  } else {
    *( DiscoveredSystem **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClient_Update(void * jarg1) {
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClient_AddListener(void * jarg1, void * jarg2) {
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  XTools::DiscoveryClientListener *arg2 = (XTools::DiscoveryClientListener *) 0 ;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  arg2 = (XTools::DiscoveryClientListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoveryClient_RemoveListener(void * jarg1, void * jarg2) {
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  XTools::DiscoveryClientListener *arg2 = (XTools::DiscoveryClientListener *) 0 ;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  arg2 = (XTools::DiscoveryClientListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DiscoveryClient(void * jarg1) {
  XTools::DiscoveryClient *arg1 = (XTools::DiscoveryClient *) 0 ;
  
  arg1 = (XTools::DiscoveryClient *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogMessage(void * jarg1) {
  XTools::LogMessage *arg1 = (XTools::LogMessage *) 0 ;
  
  arg1 = (XTools::LogMessage *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogMessage_GetSeverity(void * jarg1) {
  int jresult ;
  XTools::LogMessage *arg1 = (XTools::LogMessage *) 0 ;
  XTools::LogSeverity result;
  
  arg1 = (XTools::LogMessage *)jarg1; 
  result = (XTools::LogSeverity)((XTools::LogMessage const *)arg1)->GetSeverity();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LogMessage_GetLogMessage(void * jarg1) {
  char * jresult ;
  XTools::LogMessage *arg1 = (XTools::LogMessage *) 0 ;
  std::string result;
  
  arg1 = (XTools::LogMessage *)jarg1; 
  result = ((XTools::LogMessage const *)arg1)->GetLogMessage();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProfileSample(char * jarg1, unsigned long long jarg2, unsigned long long jarg3, int jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  XTools::uint64 arg2 ;
  XTools::uint64 arg3 ;
  XTools::int32 arg4 ;
  XTools::ProfileSample *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (XTools::uint64)jarg2; 
  arg3 = (XTools::uint64)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  result = (XTools::ProfileSample *)new XTools::ProfileSample((std::string const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ProfileSample_GetName(void * jarg1) {
  char * jresult ;
  XTools::ProfileSample *arg1 = (XTools::ProfileSample *) 0 ;
  std::string result;
  
  arg1 = (XTools::ProfileSample *)jarg1; 
  result = ((XTools::ProfileSample const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ProfileSample_GetStartTime(void * jarg1) {
  unsigned long long jresult ;
  XTools::ProfileSample *arg1 = (XTools::ProfileSample *) 0 ;
  XTools::uint64 result;
  
  arg1 = (XTools::ProfileSample *)jarg1; 
  result = (XTools::uint64)((XTools::ProfileSample const *)arg1)->GetStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ProfileSample_GetDuration(void * jarg1) {
  unsigned long long jresult ;
  XTools::ProfileSample *arg1 = (XTools::ProfileSample *) 0 ;
  XTools::uint64 result;
  
  arg1 = (XTools::ProfileSample *)jarg1; 
  result = (XTools::uint64)((XTools::ProfileSample const *)arg1)->GetDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProfileSample_GetParentIndex(void * jarg1) {
  int jresult ;
  XTools::ProfileSample *arg1 = (XTools::ProfileSample *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::ProfileSample *)jarg1; 
  result = (XTools::int32)((XTools::ProfileSample const *)arg1)->GetParentIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfileSample(void * jarg1) {
  XTools::ProfileSample *arg1 = (XTools::ProfileSample *) 0 ;
  
  arg1 = (XTools::ProfileSample *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProfileThread(unsigned long long jarg1, unsigned int jarg2) {
  void * jresult ;
  XTools::uint64 arg1 ;
  XTools::uint32 arg2 ;
  XTools::ProfileThread *result = 0 ;
  
  arg1 = (XTools::uint64)jarg1; 
  arg2 = (XTools::uint32)jarg2; 
  result = (XTools::ProfileThread *)new XTools::ProfileThread(arg1,arg2);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ProfileThread_GetThreadID(void * jarg1) {
  unsigned long long jresult ;
  XTools::ProfileThread *arg1 = (XTools::ProfileThread *) 0 ;
  XTools::uint64 result;
  
  arg1 = (XTools::ProfileThread *)jarg1; 
  result = (XTools::uint64)((XTools::ProfileThread const *)arg1)->GetThreadID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProfileThread_GetSampleCount(void * jarg1) {
  int jresult ;
  XTools::ProfileThread *arg1 = (XTools::ProfileThread *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::ProfileThread *)jarg1; 
  result = (XTools::int32)((XTools::ProfileThread const *)arg1)->GetSampleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProfileThread_GetSample(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::ProfileThread *arg1 = (XTools::ProfileThread *) 0 ;
  XTools::int32 arg2 ;
  XTools::ProfileSamplePtr result;
  
  arg1 = (XTools::ProfileThread *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ProfileThread const *)arg1)->GetSample(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ProfileSample **)&jresult = (&result)->get();
  } else {
    *( ProfileSample **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfileThread_AddSample(void * jarg1, void * jarg2) {
  XTools::ProfileThread *arg1 = (XTools::ProfileThread *) 0 ;
  XTools::ProfileSamplePtr *arg2 = 0 ;
  XTools::ProfileSamplePtr tempnull2 ;
  XTools::ProfileSamplePtr temp2 ;
  XTools::ProfileSample *smartarg2 ;
  
  arg1 = (XTools::ProfileThread *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ProfileSample **)&jarg2; 
    temp2 = XTools::ref_ptr<  ProfileSample >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->AddSample((XTools::ProfileSamplePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfileThread(void * jarg1) {
  XTools::ProfileThread *arg1 = (XTools::ProfileThread *) 0 ;
  
  arg1 = (XTools::ProfileThread *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProfileFrame() {
  void * jresult ;
  XTools::ProfileFrame *result = 0 ;
  
  result = (XTools::ProfileFrame *)new XTools::ProfileFrame();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProfileFrame_GetThreadCount(void * jarg1) {
  int jresult ;
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  result = (XTools::int32)((XTools::ProfileFrame const *)arg1)->GetThreadCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProfileFrame_GetThread(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  XTools::int32 arg2 ;
  XTools::ProfileThreadPtr result;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ProfileFrame const *)arg1)->GetThread(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ProfileThread **)&jresult = (&result)->get();
  } else {
    *( ProfileThread **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProfileFrame_GetLogMessageCount(void * jarg1) {
  int jresult ;
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  result = (XTools::int32)((XTools::ProfileFrame const *)arg1)->GetLogMessageCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProfileFrame_GetLogMessage(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  XTools::int32 arg2 ;
  XTools::LogMessagePtr result;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ProfileFrame const *)arg1)->GetLogMessage(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( LogMessage **)&jresult = (&result)->get();
  } else {
    *( LogMessage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfileFrame_AddThread(void * jarg1, void * jarg2) {
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  XTools::ProfileThreadPtr *arg2 = 0 ;
  XTools::ProfileThreadPtr tempnull2 ;
  XTools::ProfileThreadPtr temp2 ;
  XTools::ProfileThread *smartarg2 ;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ProfileThread **)&jarg2; 
    temp2 = XTools::ref_ptr<  ProfileThread >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->AddThread((XTools::ProfileThreadPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfileFrame_AddMessage(void * jarg1, void * jarg2) {
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  XTools::LogMessagePtr *arg2 = 0 ;
  XTools::LogMessagePtr tempnull2 ;
  XTools::LogMessagePtr temp2 ;
  XTools::LogMessage *smartarg2 ;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( LogMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  LogMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->AddMessage((XTools::LogMessagePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfileFrame(void * jarg1) {
  XTools::ProfileFrame *arg1 = (XTools::ProfileFrame *) 0 ;
  
  arg1 = (XTools::ProfileFrame *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfilerStreamListener(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnConnected(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  (arg1)->OnConnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnConnectedSwigExplicitProfilerStreamListener(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  (arg1)->XTools::ProfilerStreamListener::OnConnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnConnectFailed(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  (arg1)->OnConnectFailed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnConnectFailedSwigExplicitProfilerStreamListener(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  (arg1)->XTools::ProfilerStreamListener::OnConnectFailed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnDisconnected(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  (arg1)->OnDisconnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnDisconnectedSwigExplicitProfilerStreamListener(void * jarg1) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  (arg1)->XTools::ProfilerStreamListener::OnDisconnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnReceiveProfileFrame(void * jarg1, void * jarg2) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  XTools::ProfileFramePtr *arg2 = 0 ;
  XTools::ProfileFramePtr tempnull2 ;
  XTools::ProfileFramePtr temp2 ;
  XTools::ProfileFrame *smartarg2 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ProfileFrame **)&jarg2; 
    temp2 = XTools::ref_ptr<  ProfileFrame >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnReceiveProfileFrame((XTools::ProfileFramePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_OnReceiveProfileFrameSwigExplicitProfilerStreamListener(void * jarg1, void * jarg2) {
  XTools::ProfilerStreamListener *arg1 = (XTools::ProfilerStreamListener *) 0 ;
  XTools::ProfileFramePtr *arg2 = 0 ;
  XTools::ProfileFramePtr tempnull2 ;
  XTools::ProfileFramePtr temp2 ;
  XTools::ProfileFrame *smartarg2 ;
  
  arg1 = (XTools::ProfilerStreamListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ProfileFrame **)&jarg2; 
    temp2 = XTools::ref_ptr<  ProfileFrame >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ProfilerStreamListener::OnReceiveProfileFrame((XTools::ProfileFramePtr const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProfilerStreamListener() {
  void * jresult ;
  XTools::ProfilerStreamListener *result = 0 ;
  
  result = (XTools::ProfilerStreamListener *)new SwigDirector_ProfilerStreamListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamListener_director_connect(void *objarg, SwigDirector_ProfilerStreamListener::SWIG_Callback0_t callback0, SwigDirector_ProfilerStreamListener::SWIG_Callback1_t callback1, SwigDirector_ProfilerStreamListener::SWIG_Callback2_t callback2, SwigDirector_ProfilerStreamListener::SWIG_Callback3_t callback3) {
  XTools::ProfilerStreamListener *obj = (XTools::ProfilerStreamListener *)objarg;
  SwigDirector_ProfilerStreamListener *director = dynamic_cast<SwigDirector_ProfilerStreamListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStream_AddListener(void * jarg1, void * jarg2) {
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  XTools::ProfilerStreamListener *arg2 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  arg2 = (XTools::ProfilerStreamListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStream_RemoveListener(void * jarg1, void * jarg2) {
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  XTools::ProfilerStreamListener *arg2 = (XTools::ProfilerStreamListener *) 0 ;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  arg2 = (XTools::ProfilerStreamListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProfilerStream_IsConnected(void * jarg1) {
  unsigned int jresult ;
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  bool result;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  result = (bool)((XTools::ProfilerStream const *)arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStream_Connect(void * jarg1) {
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  (arg1)->Connect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStream_Disconnect(void * jarg1) {
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ProfilerStream_GetRemoteSystemName(void * jarg1) {
  char * jresult ;
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  std::string result;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  result = ((XTools::ProfilerStream const *)arg1)->GetRemoteSystemName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfilerStream(void * jarg1) {
  XTools::ProfilerStream *arg1 = (XTools::ProfilerStream *) 0 ;
  
  arg1 = (XTools::ProfilerStream *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProfilerStreamManager_Create() {
  void * jresult ;
  XTools::ref_ptr< XTools::ProfilerStreamManager > result;
  
  result = XTools::ProfilerStreamManager::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ProfilerStreamManager **)&jresult = (&result)->get();
  } else {
    *( ProfilerStreamManager **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProfilerStreamManager_CreateStream(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  XTools::ProfilerStreamManager *arg1 = (XTools::ProfilerStreamManager *) 0 ;
  std::string arg2 ;
  XTools::SystemRole arg3 ;
  XTools::ProfilerStreamPtr result;
  
  arg1 = (XTools::ProfilerStreamManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (XTools::SystemRole)jarg3; 
  result = (arg1)->CreateStream(arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ProfilerStream **)&jresult = (&result)->get();
  } else {
    *( ProfilerStream **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamManager_CloseStream(void * jarg1, void * jarg2) {
  XTools::ProfilerStreamManager *arg1 = (XTools::ProfilerStreamManager *) 0 ;
  XTools::ProfilerStreamPtr *arg2 = 0 ;
  XTools::ProfilerStreamPtr tempnull2 ;
  XTools::ProfilerStreamPtr temp2 ;
  XTools::ProfilerStream *smartarg2 ;
  
  arg1 = (XTools::ProfilerStreamManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ProfilerStream **)&jarg2; 
    temp2 = XTools::ref_ptr<  ProfilerStream >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->CloseStream((XTools::ProfilerStreamPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfilerStreamManager_Update(void * jarg1) {
  XTools::ProfilerStreamManager *arg1 = (XTools::ProfilerStreamManager *) 0 ;
  
  arg1 = (XTools::ProfilerStreamManager *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfilerStreamManager(void * jarg1) {
  XTools::ProfilerStreamManager *arg1 = (XTools::ProfilerStreamManager *) 0 ;
  
  arg1 = (XTools::ProfilerStreamManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_DiscoveryClientListener_SWIGUpcast(XTools::DiscoveryClientListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_ProfilerStreamListener_SWIGUpcast(XTools::ProfilerStreamListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

#ifdef __cplusplus
}
#endif

