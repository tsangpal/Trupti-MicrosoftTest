/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}

namespace Swig {
  namespace {
    jclass jclass_SharingClientJNI = NULL;
    jmethodID director_methids[51];
  }
}

#include "../Common/Common.h"
#include "ClientWrapperAPI.h"
using namespace XTools;


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <string>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ClientWrapperAPI_Java.h"

SwigDirector_LogWriter::SwigDirector_LogWriter(JNIEnv *jenv) : XTools::LogWriter(), Swig::Director(jenv) {
}

SwigDirector_LogWriter::~SwigDirector_LogWriter() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_LogWriter::WriteLogEntry(XTools::LogSeverity severity, std::string const &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jseverity  ;
  jstring jmessage = 0 ;
  
  if (!swig_override[0]) {
    XTools::LogWriter::WriteLogEntry(severity,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jseverity = (jint) severity;
    jmessage = jenv->NewStringUTF((&message)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[0], swigjobj, jseverity, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::LogWriter::WriteLogEntry ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_LogWriter::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "WriteLogEntry", "(Lcom/microsoft/holotoolkit/sharing/LogSeverity;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/LogWriter");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NetworkConnectionListener::SwigDirector_NetworkConnectionListener(JNIEnv *jenv) : XTools::NetworkConnectionListener(), Swig::Director(jenv) {
}

SwigDirector_NetworkConnectionListener::~SwigDirector_NetworkConnectionListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_NetworkConnectionListener::OnConnected(XTools::NetworkConnectionPtr const &connection) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconnection = 0 ;
  
  if (!swig_override[0]) {
    XTools::NetworkConnectionListener::OnConnected(connection);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    *( NetworkConnection **)&jconnection = (&connection)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[1], swigjobj, jconnection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::NetworkConnectionListener::OnConnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NetworkConnectionListener::OnConnectFailed(XTools::NetworkConnectionPtr const &connection) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconnection = 0 ;
  
  if (!swig_override[1]) {
    XTools::NetworkConnectionListener::OnConnectFailed(connection);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    *( NetworkConnection **)&jconnection = (&connection)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[2], swigjobj, jconnection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::NetworkConnectionListener::OnConnectFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NetworkConnectionListener::OnDisconnected(XTools::NetworkConnectionPtr const &connection) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconnection = 0 ;
  
  if (!swig_override[2]) {
    XTools::NetworkConnectionListener::OnDisconnected(connection);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    *( NetworkConnection **)&jconnection = (&connection)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[3], swigjobj, jconnection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::NetworkConnectionListener::OnDisconnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NetworkConnectionListener::OnMessageReceived(XTools::NetworkConnectionPtr const &connection, XTools::NetworkInMessage &message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jconnection = 0 ;
  jlong jmessage = 0 ;
  
  if (!swig_override[3]) {
    XTools::NetworkConnectionListener::OnMessageReceived(connection,message);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    *( NetworkConnection **)&jconnection = (&connection)->get();
    
    *(XTools::NetworkInMessage **)&jmessage = (XTools::NetworkInMessage *) &message; 
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[4], swigjobj, jconnection, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::NetworkConnectionListener::OnMessageReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NetworkConnectionListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnConnected", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnection;)V", NULL 
    },
    {
      "OnConnectFailed", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnection;)V", NULL 
    },
    {
      "OnDisconnected", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnection;)V", NULL 
    },
    {
      "OnMessageReceived", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnection;Lcom/microsoft/holotoolkit/sharing/NetworkInMessage;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/NetworkConnectionListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IntArrayListener::SwigDirector_IntArrayListener(JNIEnv *jenv) : XTools::IntArrayListener(), Swig::Director(jenv) {
}

SwigDirector_IntArrayListener::~SwigDirector_IntArrayListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IntArrayListener::OnValueChanged(XTools::int32 index, XTools::int32 newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  jint jnewValue  ;
  
  if (!swig_override[0]) {
    XTools::IntArrayListener::OnValueChanged(index,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jnewValue = (jint) newValue;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[5], swigjobj, jindex, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::IntArrayListener::OnValueChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntArrayListener::OnValueInserted(XTools::int32 index, XTools::int32 value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  jint jvalue  ;
  
  if (!swig_override[1]) {
    XTools::IntArrayListener::OnValueInserted(index,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[6], swigjobj, jindex, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::IntArrayListener::OnValueInserted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntArrayListener::OnValueRemoved(XTools::int32 index, XTools::int32 value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  jint jvalue  ;
  
  if (!swig_override[2]) {
    XTools::IntArrayListener::OnValueRemoved(index,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[7], swigjobj, jindex, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::IntArrayListener::OnValueRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IntArrayListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnValueChanged", "(II)V", NULL 
    },
    {
      "OnValueInserted", "(II)V", NULL 
    },
    {
      "OnValueRemoved", "(II)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/IntArrayListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ObjectElementListener::SwigDirector_ObjectElementListener(JNIEnv *jenv) : XTools::ObjectElementListener(), Swig::Director(jenv) {
}

SwigDirector_ObjectElementListener::~SwigDirector_ObjectElementListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ObjectElementListener::OnBoolElementChanged(XTools::XGuid elementID, bool newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelementID  ;
  jboolean jnewValue  ;
  
  if (!swig_override[0]) {
    XTools::ObjectElementListener::OnBoolElementChanged(elementID,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jelementID = (jlong) elementID;
    jnewValue = (jboolean) newValue;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[8], swigjobj, jelementID, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnBoolElementChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnIntElementChanged(XTools::XGuid elementID, XTools::int32 newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelementID  ;
  jint jnewValue  ;
  
  if (!swig_override[1]) {
    XTools::ObjectElementListener::OnIntElementChanged(elementID,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jelementID = (jlong) elementID;
    jnewValue = (jint) newValue;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[9], swigjobj, jelementID, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnIntElementChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnLongElementChanged(XTools::XGuid elementID, XTools::int64 newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelementID  ;
  jlong jnewValue  ;
  
  if (!swig_override[2]) {
    XTools::ObjectElementListener::OnLongElementChanged(elementID,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jelementID = (jlong) elementID;
    jnewValue = (jlong) newValue;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[10], swigjobj, jelementID, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnLongElementChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnFloatElementChanged(XTools::XGuid elementID, float newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelementID  ;
  jfloat jnewValue  ;
  
  if (!swig_override[3]) {
    XTools::ObjectElementListener::OnFloatElementChanged(elementID,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jelementID = (jlong) elementID;
    jnewValue = (jfloat) newValue;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[11], swigjobj, jelementID, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnFloatElementChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnDoubleElementChanged(XTools::XGuid elementID, double newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelementID  ;
  jdouble jnewValue  ;
  
  if (!swig_override[4]) {
    XTools::ObjectElementListener::OnDoubleElementChanged(elementID,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jelementID = (jlong) elementID;
    jnewValue = (jdouble) newValue;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[12], swigjobj, jelementID, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnDoubleElementChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnStringElementChanged(XTools::XGuid elementID, XTools::XStringPtr const &newValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelementID  ;
  jlong jnewValue = 0 ;
  
  if (!swig_override[5]) {
    XTools::ObjectElementListener::OnStringElementChanged(elementID,newValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jelementID = (jlong) elementID;
    
    // ref_ptr by reference directorin
    if (newValue) {
      newValue->AddRef(); 
    }
    *( XString **)&jnewValue = (&newValue)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[13], swigjobj, jelementID, jnewValue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnStringElementChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnElementAdded(XTools::ElementPtr const &element) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelement = 0 ;
  
  if (!swig_override[6]) {
    XTools::ObjectElementListener::OnElementAdded(element);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (element) {
      element->AddRef(); 
    }
    *( Element **)&jelement = (&element)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[14], swigjobj, jelement);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnElementAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::OnElementDeleted(XTools::ElementPtr const &element) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jelement = 0 ;
  
  if (!swig_override[7]) {
    XTools::ObjectElementListener::OnElementDeleted(element);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (element) {
      element->AddRef(); 
    }
    *( Element **)&jelement = (&element)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[15], swigjobj, jelement);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ObjectElementListener::OnElementDeleted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjectElementListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnBoolElementChanged", "(JZ)V", NULL 
    },
    {
      "OnIntElementChanged", "(JI)V", NULL 
    },
    {
      "OnLongElementChanged", "(JJ)V", NULL 
    },
    {
      "OnFloatElementChanged", "(JF)V", NULL 
    },
    {
      "OnDoubleElementChanged", "(JD)V", NULL 
    },
    {
      "OnStringElementChanged", "(JLcom/microsoft/holotoolkit/sharing/XString;)V", NULL 
    },
    {
      "OnElementAdded", "(Lcom/microsoft/holotoolkit/sharing/Element;)V", NULL 
    },
    {
      "OnElementDeleted", "(Lcom/microsoft/holotoolkit/sharing/Element;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/ObjectElementListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SyncListener::SwigDirector_SyncListener(JNIEnv *jenv) : XTools::SyncListener(), Swig::Director(jenv) {
}

SwigDirector_SyncListener::~SwigDirector_SyncListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_SyncListener::OnSyncChangesBegin() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    XTools::SyncListener::OnSyncChangesBegin();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[16], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SyncListener::OnSyncChangesBegin ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SyncListener::OnSyncChangesEnd() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    XTools::SyncListener::OnSyncChangesEnd();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[17], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SyncListener::OnSyncChangesEnd ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SyncListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnSyncChangesBegin", "()V", NULL 
    },
    {
      "OnSyncChangesEnd", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/SyncListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SessionListener::SwigDirector_SessionListener(JNIEnv *jenv) : XTools::SessionListener(), Swig::Director(jenv) {
}

SwigDirector_SessionListener::~SwigDirector_SessionListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_SessionListener::OnJoiningSession() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    XTools::SessionListener::OnJoiningSession();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[18], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionListener::OnJoiningSession ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionListener::OnJoinSucceeded() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    XTools::SessionListener::OnJoinSucceeded();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionListener::OnJoinSucceeded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionListener::OnJoinFailed() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    XTools::SessionListener::OnJoinFailed();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionListener::OnJoinFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionListener::OnSessionDisconnected() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    XTools::SessionListener::OnSessionDisconnected();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[21], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionListener::OnSessionDisconnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnJoiningSession", "()V", NULL 
    },
    {
      "OnJoinSucceeded", "()V", NULL 
    },
    {
      "OnJoinFailed", "()V", NULL 
    },
    {
      "OnSessionDisconnected", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/SessionListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_SessionManagerListener::SwigDirector_SessionManagerListener(JNIEnv *jenv) : XTools::SessionManagerListener(), Swig::Director(jenv) {
}

SwigDirector_SessionManagerListener::~SwigDirector_SessionManagerListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_SessionManagerListener::OnCreateSucceeded(XTools::SessionPtr const &newSession) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnewSession = 0 ;
  
  if (!swig_override[0]) {
    XTools::SessionManagerListener::OnCreateSucceeded(newSession);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (newSession) {
      newSession->AddRef(); 
    }
    *( Session **)&jnewSession = (&newSession)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[22], swigjobj, jnewSession);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnCreateSucceeded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnCreateFailed(XTools::XStringPtr const &reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jreason = 0 ;
  
  if (!swig_override[1]) {
    XTools::SessionManagerListener::OnCreateFailed(reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (reason) {
      reason->AddRef(); 
    }
    *( XString **)&jreason = (&reason)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[23], swigjobj, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnCreateFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnSessionAdded(XTools::SessionPtr const &newSession) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnewSession = 0 ;
  
  if (!swig_override[2]) {
    XTools::SessionManagerListener::OnSessionAdded(newSession);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (newSession) {
      newSession->AddRef(); 
    }
    *( Session **)&jnewSession = (&newSession)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[24], swigjobj, jnewSession);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnSessionAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnSessionClosed(XTools::SessionPtr const &session) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsession = 0 ;
  
  if (!swig_override[3]) {
    XTools::SessionManagerListener::OnSessionClosed(session);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    *( Session **)&jsession = (&session)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[25], swigjobj, jsession);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnSessionClosed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnUserJoinedSession(XTools::SessionPtr const &session, XTools::UserPtr const &newUser) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsession = 0 ;
  jlong jnewUser = 0 ;
  
  if (!swig_override[4]) {
    XTools::SessionManagerListener::OnUserJoinedSession(session,newUser);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    *( Session **)&jsession = (&session)->get();
    
    
    // ref_ptr by reference directorin
    if (newUser) {
      newUser->AddRef(); 
    }
    *( User **)&jnewUser = (&newUser)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[26], swigjobj, jsession, jnewUser);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnUserJoinedSession ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnUserLeftSession(XTools::SessionPtr const &session, XTools::UserPtr const &user) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsession = 0 ;
  jlong juser = 0 ;
  
  if (!swig_override[5]) {
    XTools::SessionManagerListener::OnUserLeftSession(session,user);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    *( Session **)&jsession = (&session)->get();
    
    
    // ref_ptr by reference directorin
    if (user) {
      user->AddRef(); 
    }
    *( User **)&juser = (&user)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[27], swigjobj, jsession, juser);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnUserLeftSession ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnUserChanged(XTools::SessionPtr const &session, XTools::UserPtr const &user) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsession = 0 ;
  jlong juser = 0 ;
  
  if (!swig_override[6]) {
    XTools::SessionManagerListener::OnUserChanged(session,user);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    *( Session **)&jsession = (&session)->get();
    
    
    // ref_ptr by reference directorin
    if (user) {
      user->AddRef(); 
    }
    *( User **)&juser = (&user)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[28], swigjobj, jsession, juser);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnUserChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnServerConnected() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    XTools::SessionManagerListener::OnServerConnected();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[29], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnServerConnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::OnServerDisconnected() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    XTools::SessionManagerListener::OnServerDisconnected();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[30], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::SessionManagerListener::OnServerDisconnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_SessionManagerListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnCreateSucceeded", "(Lcom/microsoft/holotoolkit/sharing/Session;)V", NULL 
    },
    {
      "OnCreateFailed", "(Lcom/microsoft/holotoolkit/sharing/XString;)V", NULL 
    },
    {
      "OnSessionAdded", "(Lcom/microsoft/holotoolkit/sharing/Session;)V", NULL 
    },
    {
      "OnSessionClosed", "(Lcom/microsoft/holotoolkit/sharing/Session;)V", NULL 
    },
    {
      "OnUserJoinedSession", "(Lcom/microsoft/holotoolkit/sharing/Session;Lcom/microsoft/holotoolkit/sharing/User;)V", NULL 
    },
    {
      "OnUserLeftSession", "(Lcom/microsoft/holotoolkit/sharing/Session;Lcom/microsoft/holotoolkit/sharing/User;)V", NULL 
    },
    {
      "OnUserChanged", "(Lcom/microsoft/holotoolkit/sharing/Session;Lcom/microsoft/holotoolkit/sharing/User;)V", NULL 
    },
    {
      "OnServerConnected", "()V", NULL 
    },
    {
      "OnServerDisconnected", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/SessionManagerListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 9; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_UserPresenceManagerListener::SwigDirector_UserPresenceManagerListener(JNIEnv *jenv) : XTools::UserPresenceManagerListener(), Swig::Director(jenv) {
}

SwigDirector_UserPresenceManagerListener::~SwigDirector_UserPresenceManagerListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_UserPresenceManagerListener::OnUserPresenceChanged(XTools::UserPtr const &user) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong juser = 0 ;
  
  if (!swig_override[0]) {
    XTools::UserPresenceManagerListener::OnUserPresenceChanged(user);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (user) {
      user->AddRef(); 
    }
    *( User **)&juser = (&user)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[31], swigjobj, juser);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::UserPresenceManagerListener::OnUserPresenceChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_UserPresenceManagerListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnUserPresenceChanged", "(Lcom/microsoft/holotoolkit/sharing/User;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/UserPresenceManagerListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_RoomManagerListener::SwigDirector_RoomManagerListener(JNIEnv *jenv) : XTools::RoomManagerListener(), Swig::Director(jenv) {
}

SwigDirector_RoomManagerListener::~SwigDirector_RoomManagerListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RoomManagerListener::OnRoomAdded(XTools::RoomPtr const &newRoom) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jnewRoom = 0 ;
  
  if (!swig_override[0]) {
    XTools::RoomManagerListener::OnRoomAdded(newRoom);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (newRoom) {
      newRoom->AddRef(); 
    }
    *( Room **)&jnewRoom = (&newRoom)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[32], swigjobj, jnewRoom);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnRoomAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::OnRoomClosed(XTools::RoomPtr const &room) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jroom = 0 ;
  
  if (!swig_override[1]) {
    XTools::RoomManagerListener::OnRoomClosed(room);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    *( Room **)&jroom = (&room)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[33], swigjobj, jroom);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnRoomClosed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::OnUserJoinedRoom(XTools::RoomPtr const &room, XTools::UserID user) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jroom = 0 ;
  jint juser  ;
  
  if (!swig_override[2]) {
    XTools::RoomManagerListener::OnUserJoinedRoom(room,user);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    *( Room **)&jroom = (&room)->get();
    
    juser = (jint) user;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[34], swigjobj, jroom, juser);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnUserJoinedRoom ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::OnUserLeftRoom(XTools::RoomPtr const &room, XTools::UserID user) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jroom = 0 ;
  jint juser  ;
  
  if (!swig_override[3]) {
    XTools::RoomManagerListener::OnUserLeftRoom(room,user);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    *( Room **)&jroom = (&room)->get();
    
    juser = (jint) user;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[35], swigjobj, jroom, juser);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnUserLeftRoom ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::OnAnchorsChanged(XTools::RoomPtr const &room) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jroom = 0 ;
  
  if (!swig_override[4]) {
    XTools::RoomManagerListener::OnAnchorsChanged(room);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    *( Room **)&jroom = (&room)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[36], swigjobj, jroom);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnAnchorsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::OnAnchorsDownloaded(bool successful, XTools::AnchorDownloadRequestPtr const &request, XTools::XStringPtr const &failureReason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jsuccessful  ;
  jlong jrequest = 0 ;
  jlong jfailureReason = 0 ;
  
  if (!swig_override[5]) {
    XTools::RoomManagerListener::OnAnchorsDownloaded(successful,request,failureReason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsuccessful = (jboolean) successful;
    
    // ref_ptr by reference directorin
    if (request) {
      request->AddRef(); 
    }
    *( AnchorDownloadRequest **)&jrequest = (&request)->get();
    
    
    // ref_ptr by reference directorin
    if (failureReason) {
      failureReason->AddRef(); 
    }
    *( XString **)&jfailureReason = (&failureReason)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[37], swigjobj, jsuccessful, jrequest, jfailureReason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnAnchorsDownloaded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::OnAnchorUploadComplete(bool successful, XTools::XStringPtr const &failureReason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jsuccessful  ;
  jlong jfailureReason = 0 ;
  
  if (!swig_override[6]) {
    XTools::RoomManagerListener::OnAnchorUploadComplete(successful,failureReason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsuccessful = (jboolean) successful;
    
    // ref_ptr by reference directorin
    if (failureReason) {
      failureReason->AddRef(); 
    }
    *( XString **)&jfailureReason = (&failureReason)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[38], swigjobj, jsuccessful, jfailureReason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::RoomManagerListener::OnAnchorUploadComplete ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_RoomManagerListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnRoomAdded", "(Lcom/microsoft/holotoolkit/sharing/Room;)V", NULL 
    },
    {
      "OnRoomClosed", "(Lcom/microsoft/holotoolkit/sharing/Room;)V", NULL 
    },
    {
      "OnUserJoinedRoom", "(Lcom/microsoft/holotoolkit/sharing/Room;I)V", NULL 
    },
    {
      "OnUserLeftRoom", "(Lcom/microsoft/holotoolkit/sharing/Room;I)V", NULL 
    },
    {
      "OnAnchorsChanged", "(Lcom/microsoft/holotoolkit/sharing/Room;)V", NULL 
    },
    {
      "OnAnchorsDownloaded", "(ZLcom/microsoft/holotoolkit/sharing/AnchorDownloadRequest;Lcom/microsoft/holotoolkit/sharing/XString;)V", NULL 
    },
    {
      "OnAnchorUploadComplete", "(ZLcom/microsoft/holotoolkit/sharing/XString;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/RoomManagerListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PairMaker::SwigDirector_PairMaker(JNIEnv *jenv) : XTools::PairMaker(), Swig::Director(jenv) {
}

SwigDirector_PairMaker::~SwigDirector_PairMaker() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_PairMaker::IsReceiver() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return XTools::PairMaker::IsReceiver();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[39], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::IsReceiver ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

XTools::int32 SwigDirector_PairMaker::GetAddressCount() {
  XTools::int32 c_result = SwigValueInit< XTools::int32 >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method XTools::PairMaker::GetAddressCount.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[40], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (XTools::int32)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::GetAddressCount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

XTools::XStringPtr SwigDirector_PairMaker::GetAddress(XTools::int32 index) {
  XTools::XStringPtr c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jindex  ;
  XTools::XStringPtr *argp ;
  
  if (!swig_override[2]) {
    return XTools::PairMaker::GetAddress(index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindex = (jint) index;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[41], swigjobj, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(XTools::XStringPtr **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type XTools::XStringPtr");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::GetAddress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

XTools::uint16 SwigDirector_PairMaker::GetPort() {
  XTools::uint16 c_result = SwigValueInit< XTools::uint16 >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return XTools::PairMaker::GetPort();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[42], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (XTools::uint16)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::GetPort ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PairMaker::Update() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    XTools::PairMaker::Update();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[43], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::Update ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_PairMaker::IsReadyToConnect() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return XTools::PairMaker::IsReadyToConnect();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[44], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::IsReadyToConnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

XTools::int32 SwigDirector_PairMaker::GetLocalKey() {
  XTools::int32 c_result = SwigValueInit< XTools::int32 >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return XTools::PairMaker::GetLocalKey();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[45], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (XTools::int32)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::GetLocalKey ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

XTools::int32 SwigDirector_PairMaker::GetRemoteKey() {
  XTools::int32 c_result = SwigValueInit< XTools::int32 >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return XTools::PairMaker::GetRemoteKey();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[46], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (XTools::int32)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairMaker::GetRemoteKey ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PairMaker::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "IsReceiver", "()Z", NULL 
    },
    {
      "GetAddressCount", "()I", NULL 
    },
    {
      "GetAddress", "(I)Lcom/microsoft/holotoolkit/sharing/XString;", NULL 
    },
    {
      "GetPort", "()I", NULL 
    },
    {
      "Update", "()V", NULL 
    },
    {
      "IsReadyToConnect", "()Z", NULL 
    },
    {
      "GetLocalKey", "()I", NULL 
    },
    {
      "GetRemoteKey", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/PairMaker");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_PairingListener::SwigDirector_PairingListener(JNIEnv *jenv) : XTools::PairingListener(), Swig::Director(jenv) {
}

SwigDirector_PairingListener::~SwigDirector_PairingListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_PairingListener::PairingConnectionSucceeded() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    XTools::PairingListener::PairingConnectionSucceeded();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[47], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairingListener::PairingConnectionSucceeded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PairingListener::PairingConnectionFailed(XTools::PairingResult reason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jreason  ;
  
  if (!swig_override[1]) {
    XTools::PairingListener::PairingConnectionFailed(reason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jreason = (jint) reason;
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[48], swigjobj, jreason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::PairingListener::PairingConnectionFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_PairingListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "PairingConnectionSucceeded", "()V", NULL 
    },
    {
      "PairingConnectionFailed", "(Lcom/microsoft/holotoolkit/sharing/PairingResult;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/PairingListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ImageTagLocationListener::SwigDirector_ImageTagLocationListener(JNIEnv *jenv) : XTools::ImageTagLocationListener(), Swig::Director(jenv) {
}

SwigDirector_ImageTagLocationListener::~SwigDirector_ImageTagLocationListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ImageTagLocationListener::OnTagLocated(XTools::ImageTagLocationPtr const &location) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlocation = 0 ;
  
  if (!swig_override[0]) {
    XTools::ImageTagLocationListener::OnTagLocated(location);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // ref_ptr by reference directorin
    if (location) {
      location->AddRef(); 
    }
    *( ImageTagLocation **)&jlocation = (&location)->get();
    
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[49], swigjobj, jlocation);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ImageTagLocationListener::OnTagLocated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ImageTagLocationListener::OnTagLocatingCompleted() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    XTools::ImageTagLocationListener::OnTagLocatingCompleted();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SharingClientJNI, Swig::director_methids[50], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in XTools::ImageTagLocationListener::OnTagLocatingCompleted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ImageTagLocationListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnTagLocated", "(Lcom/microsoft/holotoolkit/sharing/ImageTagLocation;)V", NULL 
    },
    {
      "OnTagLocatingCompleted", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/microsoft/holotoolkit/sharing/ImageTagLocationListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jobject JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_kInvalidSocketID_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  XTools::SocketID result;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::SocketID)(XTools::SocketID)XTools::kInvalidSocketID;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_kInvalidConnectionGUID_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  XTools::ConnectionGUID result;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::ConnectionGUID)(XTools::ConnectionGUID)XTools::kInvalidConnectionGUID;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Receipt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Receipt *arg1 = (XTools::Receipt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Receipt **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Receipt_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::Receipt *arg1 = (XTools::Receipt *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Receipt **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1Receipt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::Receipt *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::Receipt *)new XTools::Receipt();
  *(XTools::Receipt **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1LogManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::LogManager *arg1 = (XTools::LogManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::LogManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LogManager_1Log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  XTools::LogManager *arg1 = (XTools::LogManager *) 0 ;
  XTools::LogSeverity arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::LogManager **)&jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->Log(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1LogWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::LogWriter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LogWriter_1WriteLogEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::LogWriter **)&jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->WriteLogEntry(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LogWriter_1WriteLogEntrySwigExplicitLogWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::LogWriter **)&jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->XTools::LogWriter::WriteLogEntry(arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1LogWriter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::LogWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::LogWriter *)new SwigDirector_LogWriter(jenv);
  *(XTools::LogWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LogWriter_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::LogWriter *obj = *((XTools::LogWriter **)&objarg);
  (void)jcls;
  SwigDirector_LogWriter *director = dynamic_cast<SwigDirector_LogWriter *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LogWriter_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::LogWriter *obj = *((XTools::LogWriter **)&objarg);
  SwigDirector_LogWriter *director = dynamic_cast<SwigDirector_LogWriter *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Log_1Info(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  XTools::Log::Info((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Log_1Warning(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  XTools::Log::Warning((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Log_1Error(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  XTools::Log::Error((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1Log(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::Log *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::Log *)new XTools::Log();
  *(XTools::Log **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Log(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Log *arg1 = (XTools::Log *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Log **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Listener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Listener_1UnregisterAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Listener **)&jarg1; 
  (arg1)->UnregisterAll();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Listener_1IsRegistered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Listener **)&jarg1; 
  result = (bool)((XTools::Listener const *)arg1)->IsRegistered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1Listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::Listener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::Listener *)new XTools::Listener();
  *(XTools::Listener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_kInvalidXGuid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::XGuid result;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::XGuid)(XTools::XGuid)XTools::kInvalidXGuid;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1XString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::XString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::XString *)new XTools::XString();
  *(XTools::XString **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1XString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XTools::XString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (XTools::XString *)new XTools::XString((std::string const &)*arg1);
  *(XTools::XString **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1XString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::XString **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_XString_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  XTools::uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::XString **)&jarg1; 
  result = (XTools::uint32)((XTools::XString const *)arg1)->GetLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_XString_1IsEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  XTools::ref_ptr< XTools::XString > *arg2 = 0 ;
  XTools::ref_ptr< XTools::XString > tempnull2 ;
  XTools::ref_ptr< XTools::XString > temp2 ;
  XTools::XString *smartarg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::XString **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)((XTools::XString const *)arg1)->IsEqual((XTools::ref_ptr< XTools::XString > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_XString_1GetString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::XString **)&jarg1; 
  result = (std::string *) &((XTools::XString const *)arg1)->GetString();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::byte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  arg2 = (XTools::byte)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::int16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  arg2 = (XTools::int16)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  arg2 = (XTools::int64)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Write_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->Write((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1WriteArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::uint32 arg3 ;
  jbyte *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return ; 
  arg3 = (XTools::uint32)jarg3; 
  (arg1)->WriteArray((XTools::byte const *)arg2,arg3);
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkOutMessage_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1NetworkOutMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::NetworkOutMessage **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1NetworkInMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::byte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (XTools::byte)(arg1)->ReadByte();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (XTools::int16)(arg1)->ReadInt16();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (XTools::int32)(arg1)->ReadInt32();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadInt64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (XTools::int64)(arg1)->ReadInt64();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (float)(arg1)->ReadFloat();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (double)(arg1)->ReadDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (arg1)->ReadString();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1ReadArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3) {
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::uint32 arg3 ;
  jbyte *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return ; 
  arg3 = (XTools::uint32)jarg3; 
  (arg1)->ReadArray(arg2,arg3);
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1GetUnreadBitsCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (XTools::int32)((XTools::NetworkInMessage const *)arg1)->GetUnreadBitsCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkInMessage_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkInMessage **)&jarg1; 
  result = (XTools::int32)((XTools::NetworkInMessage const *)arg1)->GetSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1NetworkConnectionListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnConnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnConnectedSwigExplicitNetworkConnectionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::NetworkConnectionListener::OnConnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnConnectFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnConnectFailed((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnConnectFailedSwigExplicitNetworkConnectionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::NetworkConnectionListener::OnConnectFailed((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnDisconnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnDisconnectedSwigExplicitNetworkConnectionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::NetworkConnectionListener::OnDisconnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnMessageReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkInMessage *arg3 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(XTools::NetworkInMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XTools::NetworkInMessage & reference is null");
    return ;
  } 
  (arg1)->OnMessageReceived((XTools::NetworkConnectionPtr const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1OnMessageReceivedSwigExplicitNetworkConnectionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkInMessage *arg3 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::NetworkConnectionListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(XTools::NetworkInMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XTools::NetworkInMessage & reference is null");
    return ;
  } 
  (arg1)->XTools::NetworkConnectionListener::OnMessageReceived((XTools::NetworkConnectionPtr const &)*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1NetworkConnectionListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::NetworkConnectionListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::NetworkConnectionListener *)new SwigDirector_NetworkConnectionListener(jenv);
  *(XTools::NetworkConnectionListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::NetworkConnectionListener *obj = *((XTools::NetworkConnectionListener **)&objarg);
  (void)jcls;
  SwigDirector_NetworkConnectionListener *director = dynamic_cast<SwigDirector_NetworkConnectionListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::NetworkConnectionListener *obj = *((XTools::NetworkConnectionListener **)&objarg);
  SwigDirector_NetworkConnectionListener *director = dynamic_cast<SwigDirector_NetworkConnectionListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_User_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::User **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::User const *)arg1)->GetName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_User_1GetID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  XTools::UserID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::User **)&jarg1; 
  result = (XTools::UserID)((XTools::User const *)arg1)->GetID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_User_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::User **)&jarg1; 
  result = (bool)((XTools::User const *)arg1)->IsValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_User_1GetMuteState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::User **)&jarg1; 
  result = (bool)((XTools::User const *)arg1)->GetMuteState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1User(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::User *arg1 = (XTools::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::User **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  result = (bool)((XTools::NetworkConnection const *)arg1)->IsConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1GetConnectionGUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::ConnectionGUID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  result = (XTools::ConnectionGUID)((XTools::NetworkConnection const *)arg1)->GetConnectionGUID();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Send_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  bool arg6 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Send_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Send_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Send_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Send_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1SendTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6, jint jarg7, jboolean jarg8) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::MessageReliability arg6 ;
  XTools::MessageChannel arg7 ;
  bool arg8 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  arg6 = (XTools::MessageReliability)jarg6; 
  arg7 = (XTools::MessageChannel)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1SendTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6, jint jarg7) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::MessageReliability arg6 ;
  XTools::MessageChannel arg7 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  arg6 = (XTools::MessageReliability)jarg6; 
  arg7 = (XTools::MessageChannel)jarg7; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1SendTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jint jarg6) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::MessageReliability arg6 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  arg6 = (XTools::MessageReliability)jarg6; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1SendTo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1SendTo_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Broadcast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  bool arg6 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Broadcast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Broadcast_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Broadcast_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Broadcast_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2, jlong jarg3, jobject jarg3_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = *(XTools::NetworkConnectionListener **)&jarg3; 
  (arg1)->AddListener(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2, jlong jarg3, jobject jarg3_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = *(XTools::NetworkConnectionListener **)&jarg3; 
  (arg1)->RemoveListener(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1AddListenerAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2, jlong jarg3, jobject jarg3_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = *(XTools::NetworkConnectionListener **)&jarg3; 
  (arg1)->AddListenerAsync(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1RemoveListenerAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2, jlong jarg3, jobject jarg3_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = *(XTools::NetworkConnectionListener **)&jarg3; 
  (arg1)->RemoveListenerAsync(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1CreateMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  jlong jresult = 0 ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkOutMessagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  arg2 = (XTools::byte)jarg2; 
  result = (arg1)->CreateMessage(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkOutMessage **)&jresult = result.get();
  } else {
    *( NetworkOutMessage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1ReturnMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->ReturnMessage((XTools::NetworkOutMessagePtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1Disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnection_1GetRemoteAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  result = ((XTools::NetworkConnection const *)arg1)->GetRemoteAddress();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1NetworkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::NetworkConnection **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Element_1GetElementType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::ElementType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Element **)&jarg1; 
  result = (XTools::ElementType)((XTools::Element const *)arg1)->GetElementType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Element_1GetGUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::XGuid result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Element **)&jarg1; 
  result = (XTools::XGuid)((XTools::Element const *)arg1)->GetGUID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Element_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Element **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Element const *)arg1)->GetName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Element_1GetParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::ref_ptr< XTools::Element > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Element **)&jarg1; 
  result = ((XTools::Element const *)arg1)->GetParent();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = result.get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Element_1IsValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Element **)&jarg1; 
  result = (bool)((XTools::Element const *)arg1)->IsValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Element **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_BoolElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::BoolElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::BoolElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( BoolElement **)&jresult = result.get();
  } else {
    *( BoolElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_BoolElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::BoolElement *arg1 = (XTools::BoolElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::BoolElement **)&jarg1; 
  result = (bool)((XTools::BoolElement const *)arg1)->GetValue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_BoolElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XTools::BoolElement *arg1 = (XTools::BoolElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::BoolElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1BoolElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::BoolElement *arg1 = (XTools::BoolElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::BoolElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::IntElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::IntElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntElement **)&jresult = result.get();
  } else {
    *( IntElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::IntElement *arg1 = (XTools::IntElement *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntElement **)&jarg1; 
  result = (XTools::int32)((XTools::IntElement const *)arg1)->GetValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::IntElement *arg1 = (XTools::IntElement *) 0 ;
  XTools::int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1IntElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::IntElement *arg1 = (XTools::IntElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::IntElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LongElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::LongElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::LongElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( LongElement **)&jresult = result.get();
  } else {
    *( LongElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LongElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::LongElement *arg1 = (XTools::LongElement *) 0 ;
  XTools::int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::LongElement **)&jarg1; 
  result = (XTools::int64)((XTools::LongElement const *)arg1)->GetValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LongElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XTools::LongElement *arg1 = (XTools::LongElement *) 0 ;
  XTools::int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::LongElement **)&jarg1; 
  arg2 = (XTools::int64)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1LongElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::LongElement *arg1 = (XTools::LongElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::LongElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_FloatElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::FloatElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::FloatElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( FloatElement **)&jresult = result.get();
  } else {
    *( FloatElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_FloatElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  XTools::FloatElement *arg1 = (XTools::FloatElement *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::FloatElement **)&jarg1; 
  result = (float)((XTools::FloatElement const *)arg1)->GetValue();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_FloatElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  XTools::FloatElement *arg1 = (XTools::FloatElement *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::FloatElement **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1FloatElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::FloatElement *arg1 = (XTools::FloatElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::FloatElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DoubleElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::DoubleElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::DoubleElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( DoubleElement **)&jresult = result.get();
  } else {
    *( DoubleElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DoubleElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XTools::DoubleElement *arg1 = (XTools::DoubleElement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DoubleElement **)&jarg1; 
  result = (double)((XTools::DoubleElement const *)arg1)->GetValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DoubleElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XTools::DoubleElement *arg1 = (XTools::DoubleElement *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DoubleElement **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1DoubleElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::DoubleElement *arg1 = (XTools::DoubleElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::DoubleElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_StringElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::StringElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::StringElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( StringElement **)&jresult = result.get();
  } else {
    *( StringElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_StringElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::StringElement *arg1 = (XTools::StringElement *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::StringElement **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::StringElement const *)arg1)->GetValue();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_StringElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::StringElement *arg1 = (XTools::StringElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::StringElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetValue((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1StringElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::StringElement *arg1 = (XTools::StringElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::StringElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1IntArrayListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1OnValueChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnValueChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1OnValueChangedSwigExplicitIntArrayListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::IntArrayListener::OnValueChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1OnValueInserted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnValueInserted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1OnValueInsertedSwigExplicitIntArrayListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::IntArrayListener::OnValueInserted(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1OnValueRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnValueRemoved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1OnValueRemovedSwigExplicitIntArrayListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayListener **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::IntArrayListener::OnValueRemoved(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1IntArrayListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::IntArrayListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::IntArrayListener *)new SwigDirector_IntArrayListener(jenv);
  *(XTools::IntArrayListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::IntArrayListener *obj = *((XTools::IntArrayListener **)&objarg);
  (void)jcls;
  SwigDirector_IntArrayListener *director = dynamic_cast<SwigDirector_IntArrayListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::IntArrayListener *obj = *((XTools::IntArrayListener **)&objarg);
  SwigDirector_IntArrayListener *director = dynamic_cast<SwigDirector_IntArrayListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::IntArrayElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::IntArrayElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntArrayElement **)&jresult = result.get();
  } else {
    *( IntArrayElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1GetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  result = (XTools::int32)((XTools::IntArrayElement const *)arg1)->GetCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (XTools::int32)((XTools::IntArrayElement const *)arg1)->GetValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->SetValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1InsertValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->InsertValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1RemoveValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->RemoveValue(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::IntArrayListener *arg2 = (XTools::IntArrayListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  arg2 = *(XTools::IntArrayListener **)&jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::IntArrayListener *arg2 = (XTools::IntArrayListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  arg2 = *(XTools::IntArrayListener **)&jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1IntArrayElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::IntArrayElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnBoolElementChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->OnBoolElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnBoolElementChangedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->XTools::ObjectElementListener::OnBoolElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnIntElementChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnIntElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnIntElementChangedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnIntElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnLongElementChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int64)jarg3; 
  (arg1)->OnLongElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnLongElementChangedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int64)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnLongElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnFloatElementChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnFloatElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnFloatElementChangedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnFloatElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnDoubleElementChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->OnDoubleElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnDoubleElementChangedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnDoubleElementChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnStringElementChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnStringElementChanged(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnStringElementChangedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::ObjectElementListener::OnStringElementChanged(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnElementAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnElementAdded((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnElementAddedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ObjectElementListener::OnElementAdded((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnElementDeleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnElementDeleted((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1OnElementDeletedSwigExplicitObjectElementListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElementListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ObjectElementListener::OnElementDeleted((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1ObjectElementListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::ObjectElementListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::ObjectElementListener *)new SwigDirector_ObjectElementListener(jenv);
  *(XTools::ObjectElementListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::ObjectElementListener *obj = *((XTools::ObjectElementListener **)&objarg);
  (void)jcls;
  SwigDirector_ObjectElementListener *director = dynamic_cast<SwigDirector_ObjectElementListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::ObjectElementListener *obj = *((XTools::ObjectElementListener **)&objarg);
  SwigDirector_ObjectElementListener *director = dynamic_cast<SwigDirector_ObjectElementListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1Cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::ObjectElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::ObjectElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = result.get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateBoolElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  bool arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::BoolElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = jarg3 ? true : false; 
  result = (arg1)->CreateBoolElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( BoolElement **)&jresult = result.get();
  } else {
    *( BoolElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateIntElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::int32 arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::IntElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::int32)jarg3; 
  result = (arg1)->CreateIntElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntElement **)&jresult = result.get();
  } else {
    *( IntElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateLongElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::int64 arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::LongElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::int64)jarg3; 
  result = (arg1)->CreateLongElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( LongElement **)&jresult = result.get();
  } else {
    *( LongElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateFloatElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  float arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::FloatElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (float)jarg3; 
  result = (arg1)->CreateFloatElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( FloatElement **)&jresult = result.get();
  } else {
    *( FloatElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateDoubleElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  double arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::DoubleElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (double)jarg3; 
  result = (arg1)->CreateDoubleElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( DoubleElement **)&jresult = result.get();
  } else {
    *( DoubleElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateStringElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  XTools::StringElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  result = (arg1)->CreateStringElement((XTools::XStringPtr const &)*arg2,(XTools::XStringPtr const &)*arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( StringElement **)&jresult = result.get();
  } else {
    *( StringElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateObjectElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::User *arg3 = (XTools::User *) 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::ref_ptr< XTools::ObjectElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(XTools::User **)&jarg3; 
  result = (arg1)->CreateObjectElement((XTools::XStringPtr const &)*arg2,(XTools::User const *)arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = result.get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateObjectElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::ref_ptr< XTools::ObjectElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (arg1)->CreateObjectElement((XTools::XStringPtr const &)*arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = result.get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1CreateIntArrayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::IntArrayElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (arg1)->CreateIntArrayElement((XTools::XStringPtr const &)*arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntArrayElement **)&jresult = result.get();
  } else {
    *( IntArrayElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1GetElementCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  result = (XTools::int32)((XTools::ObjectElement const *)arg1)->GetElementCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1GetElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XGuid arg2 ;
  XTools::ElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  result = ((XTools::ObjectElement const *)arg1)->GetElement(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = result.get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1GetElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::ElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = ((XTools::ObjectElement const *)arg1)->GetElement((XTools::XStringPtr const &)*arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = result.get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1GetElementAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::int32 arg2 ;
  XTools::ElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ObjectElement const *)arg1)->GetElementAt(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = result.get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1RemoveElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->RemoveElement((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1RemoveElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XGuid arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  (arg1)->RemoveElement(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1RemoveElementAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->RemoveElementAt(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::ObjectElementListener *arg2 = (XTools::ObjectElementListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  arg2 = *(XTools::ObjectElementListener **)&jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::ObjectElementListener *arg2 = (XTools::ObjectElementListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  arg2 = *(XTools::ObjectElementListener **)&jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1GetOwnerID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::UserID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  result = (XTools::UserID)((XTools::ObjectElement const *)arg1)->GetOwnerID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ObjectElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ObjectElement **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1OnSyncChangesBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SyncListener **)&jarg1; 
  (arg1)->OnSyncChangesBegin();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1OnSyncChangesBeginSwigExplicitSyncListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SyncListener **)&jarg1; 
  (arg1)->XTools::SyncListener::OnSyncChangesBegin();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1OnSyncChangesEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SyncListener **)&jarg1; 
  (arg1)->OnSyncChangesEnd();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1OnSyncChangesEndSwigExplicitSyncListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SyncListener **)&jarg1; 
  (arg1)->XTools::SyncListener::OnSyncChangesEnd();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1SyncListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::SyncListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::SyncListener *)new SwigDirector_SyncListener(jenv);
  *(XTools::SyncListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1SyncListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::SyncListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::SyncListener *obj = *((XTools::SyncListener **)&objarg);
  (void)jcls;
  SwigDirector_SyncListener *director = dynamic_cast<SwigDirector_SyncListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::SyncListener *obj = *((XTools::SyncListener **)&objarg);
  SwigDirector_SyncListener *director = dynamic_cast<SwigDirector_SyncListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1SessionListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnJoiningSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->OnJoiningSession();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnJoiningSessionSwigExplicitSessionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->XTools::SessionListener::OnJoiningSession();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnJoinSucceeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->OnJoinSucceeded();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnJoinSucceededSwigExplicitSessionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->XTools::SessionListener::OnJoinSucceeded();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnJoinFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->OnJoinFailed();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnJoinFailedSwigExplicitSessionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->XTools::SessionListener::OnJoinFailed();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnSessionDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->OnSessionDisconnected();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1OnSessionDisconnectedSwigExplicitSessionListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionListener **)&jarg1; 
  (arg1)->XTools::SessionListener::OnSessionDisconnected();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1SessionListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::SessionListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::SessionListener *)new SwigDirector_SessionListener(jenv);
  *(XTools::SessionListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::SessionListener *obj = *((XTools::SessionListener **)&objarg);
  (void)jcls;
  SwigDirector_SessionListener *director = dynamic_cast<SwigDirector_SessionListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::SessionListener *obj = *((XTools::SessionListener **)&objarg);
  SwigDirector_SessionListener *director = dynamic_cast<SwigDirector_SessionListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1GetMachineSessionState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::MachineSessionState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = (XTools::MachineSessionState)((XTools::Session const *)arg1)->GetMachineSessionState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::SessionListener *arg2 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::Session **)&jarg1; 
  arg2 = *(XTools::SessionListener **)&jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::SessionListener *arg2 = (XTools::SessionListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::Session **)&jarg1; 
  arg2 = *(XTools::SessionListener **)&jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1IsJoined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = (bool)((XTools::Session const *)arg1)->IsJoined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1Join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = (bool)(arg1)->Join();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1Leave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  (arg1)->Leave();
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1GetUserCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = (XTools::int32)((XTools::Session const *)arg1)->GetUserCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1GetUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::int32 arg2 ;
  XTools::UserPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetUser(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( User **)&jresult = result.get();
  } else {
    *( User **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1GetSessionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::SessionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = (XTools::SessionType)((XTools::Session const *)arg1)->GetSessionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Session const *)arg1)->GetName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Session_1GetSessionNetworkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::NetworkConnectionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Session **)&jarg1; 
  result = ((XTools::Session const *)arg1)->GetSessionNetworkConnection();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkConnection **)&jresult = result.get();
  } else {
    *( NetworkConnection **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Session **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1SessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnCreateSucceeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnCreateSucceeded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnCreateSucceededSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnCreateSucceeded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnCreateFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnCreateFailed((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnCreateFailedSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnCreateFailed((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnSessionAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnSessionAdded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnSessionAddedSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnSessionAdded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnSessionClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnSessionClosed((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnSessionClosedSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnSessionClosed((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnUserJoinedSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnUserJoinedSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnUserJoinedSessionSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::SessionManagerListener::OnUserJoinedSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnUserLeftSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnUserLeftSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnUserLeftSessionSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::SessionManagerListener::OnUserLeftSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnUserChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnUserChanged((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnUserChangedSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::SessionManagerListener::OnUserChanged((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnServerConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  (arg1)->OnServerConnected();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnServerConnectedSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  (arg1)->XTools::SessionManagerListener::OnServerConnected();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnServerDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  (arg1)->OnServerDisconnected();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1OnServerDisconnectedSwigExplicitSessionManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManagerListener **)&jarg1; 
  (arg1)->XTools::SessionManagerListener::OnServerDisconnected();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1SessionManagerListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::SessionManagerListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::SessionManagerListener *)new SwigDirector_SessionManagerListener(jenv);
  *(XTools::SessionManagerListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::SessionManagerListener *obj = *((XTools::SessionManagerListener **)&objarg);
  (void)jcls;
  SwigDirector_SessionManagerListener *director = dynamic_cast<SwigDirector_SessionManagerListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::SessionManagerListener *obj = *((XTools::SessionManagerListener **)&objarg);
  SwigDirector_SessionManagerListener *director = dynamic_cast<SwigDirector_SessionManagerListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::SessionManagerListener *arg2 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  arg2 = *(XTools::SessionManagerListener **)&jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::SessionManagerListener *arg2 = (XTools::SessionManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  arg2 = *(XTools::SessionManagerListener **)&jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1CreateSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)(arg1)->CreateSession((XTools::XStringPtr const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1GetSessionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  result = (XTools::int32)((XTools::SessionManager const *)arg1)->GetSessionCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1GetSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::int32 arg2 ;
  XTools::SessionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetSession(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Session **)&jresult = result.get();
  } else {
    *( Session **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1GetCurrentSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::SessionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  result = (arg1)->GetCurrentSession();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Session **)&jresult = result.get();
  } else {
    *( Session **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1GetCurrentUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::UserPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  result = (XTools::UserPtr *) &((XTools::SessionManager const *)arg1)->GetCurrentUser();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( User **)&jresult = result->get();
  } else {
    *( User **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManager_1IsServerConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  result = (bool)((XTools::SessionManager const *)arg1)->IsServerConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1SessionManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::SessionManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1UserPresenceManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::UserPresenceManagerListener *arg1 = (XTools::UserPresenceManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::UserPresenceManagerListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManagerListener_1OnUserPresenceChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::UserPresenceManagerListener *arg1 = (XTools::UserPresenceManagerListener *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::UserPresenceManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnUserPresenceChanged((XTools::UserPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManagerListener_1OnUserPresenceChangedSwigExplicitUserPresenceManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::UserPresenceManagerListener *arg1 = (XTools::UserPresenceManagerListener *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::UserPresenceManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::UserPresenceManagerListener::OnUserPresenceChanged((XTools::UserPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1UserPresenceManagerListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::UserPresenceManagerListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::UserPresenceManagerListener *)new SwigDirector_UserPresenceManagerListener(jenv);
  *(XTools::UserPresenceManagerListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManagerListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::UserPresenceManagerListener *obj = *((XTools::UserPresenceManagerListener **)&objarg);
  (void)jcls;
  SwigDirector_UserPresenceManagerListener *director = dynamic_cast<SwigDirector_UserPresenceManagerListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManagerListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::UserPresenceManagerListener *obj = *((XTools::UserPresenceManagerListener **)&objarg);
  SwigDirector_UserPresenceManagerListener *director = dynamic_cast<SwigDirector_UserPresenceManagerListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::UserPresenceManagerListener *arg2 = (XTools::UserPresenceManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  arg2 = *(XTools::UserPresenceManagerListener **)&jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::UserPresenceManagerListener *arg2 = (XTools::UserPresenceManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  arg2 = *(XTools::UserPresenceManagerListener **)&jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1GetMuteState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  result = (bool)((XTools::UserPresenceManager const *)arg1)->GetMuteState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1SetMuteState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMuteState(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetName((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  result = ((XTools::UserPresenceManager const *)arg1)->GetName();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManager_1SetUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetUser((XTools::UserPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1UserPresenceManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::UserPresenceManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1ClientConfig(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  XTools::ClientRole arg1 ;
  XTools::ClientConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XTools::ClientRole)jarg1; 
  result = (XTools::ClientConfig *)new XTools::ClientConfig(arg1);
  *(XTools::ClientConfig **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1GetRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::ClientRole result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  result = (XTools::ClientRole)((XTools::ClientConfig const *)arg1)->GetRole();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1GetServerAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  result = ((XTools::ClientConfig const *)arg1)->GetServerAddress();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1SetServerAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->SetServerAddress((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1GetServerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  result = (XTools::int32)((XTools::ClientConfig const *)arg1)->GetServerPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1SetServerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::int32 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (bool)(arg1)->SetServerPort(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1GetLogWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::LogWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  result = (XTools::LogWriter *)((XTools::ClientConfig const *)arg1)->GetLogWriter();
  *(XTools::LogWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1SetLogWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::LogWriter *arg2 = (XTools::LogWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  arg2 = *(XTools::LogWriter **)&jarg2; 
  (arg1)->SetLogWriter(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1GetIsAudioEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  result = (bool)((XTools::ClientConfig const *)arg1)->GetIsAudioEndpoint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1SetIsAudioEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsAudioEndpoint(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1GetProfilerEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  result = (bool)((XTools::ClientConfig const *)arg1)->GetProfilerEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ClientConfig_1SetProfilerEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetProfilerEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ClientConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ClientConfig **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_AudioManager_1SetMicrophoneEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XTools::AudioManager *arg1 = (XTools::AudioManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::AudioManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMicrophoneEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1AudioManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::AudioManager *arg1 = (XTools::AudioManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::AudioManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ProfileManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ProfileManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ProfileManager_1BeginRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ProfileManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->BeginRange((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ProfileManager_1EndRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ProfileManager **)&jarg1; 
  (arg1)->EndRange();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ProfileManager_1Log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ProfileManager **)&jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Log(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Profile_1BeginRange(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  XTools::Profile::BeginRange((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Profile_1EndRange(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  XTools::Profile::EndRange();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1Profile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::Profile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::Profile *)new XTools::Profile();
  *(XTools::Profile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Profile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Profile *arg1 = (XTools::Profile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Profile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  result = ((XTools::Room const *)arg1)->GetName();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::RoomID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  result = (XTools::RoomID)((XTools::Room const *)arg1)->GetID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetUserCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  result = (XTools::int32)(arg1)->GetUserCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetUserID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 arg2 ;
  XTools::UserID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (XTools::UserID)(arg1)->GetUserID(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetKeepOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  result = (bool)((XTools::Room const *)arg1)->GetKeepOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1SetKeepOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetKeepOpen(arg2);
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetAnchorCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  result = (XTools::int32)((XTools::Room const *)arg1)->GetAnchorCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Room_1GetAnchorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Room **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (XTools::XStringPtr *) &((XTools::Room const *)arg1)->GetAnchorName(arg2);
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Room(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Room **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_AnchorDownloadRequest_1GetAnchorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::AnchorDownloadRequest **)&jarg1; 
  result = ((XTools::AnchorDownloadRequest const *)arg1)->GetAnchorName();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_AnchorDownloadRequest_1GetRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::RoomPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::AnchorDownloadRequest **)&jarg1; 
  result = ((XTools::AnchorDownloadRequest const *)arg1)->GetRoom();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = result.get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_AnchorDownloadRequest_1GetDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::AnchorDownloadRequest **)&jarg1; 
  result = (XTools::int32)((XTools::AnchorDownloadRequest const *)arg1)->GetDataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_AnchorDownloadRequest_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  jbyte *jarr2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::AnchorDownloadRequest **)&jarg1; 
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return 0; 
  arg3 = (XTools::int32)jarg3; 
  result = (bool)((XTools::AnchorDownloadRequest const *)arg1)->GetData(arg2,arg3);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1AnchorDownloadRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::AnchorDownloadRequest **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1RoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnRoomAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnRoomAdded((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnRoomAddedSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::RoomManagerListener::OnRoomAdded((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnRoomClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnRoomClosed((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnRoomClosedSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::RoomManagerListener::OnRoomClosed((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnUserJoinedRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->OnUserJoinedRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnUserJoinedRoomSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->XTools::RoomManagerListener::OnUserJoinedRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnUserLeftRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->OnUserLeftRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnUserLeftRoomSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->XTools::RoomManagerListener::OnUserLeftRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnAnchorsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnAnchorsChanged((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnAnchorsChangedSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::RoomManagerListener::OnAnchorsChanged((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnAnchorsDownloaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::AnchorDownloadRequestPtr *arg3 = 0 ;
  XTools::XStringPtr *arg4 = 0 ;
  XTools::AnchorDownloadRequestPtr tempnull3 ;
  XTools::AnchorDownloadRequestPtr temp3 ;
  XTools::AnchorDownloadRequest *smartarg3 ;
  XTools::XStringPtr tempnull4 ;
  XTools::XStringPtr temp4 ;
  XTools::XString *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( AnchorDownloadRequest **)&jarg3; 
    temp3 = XTools::ref_ptr<  AnchorDownloadRequest >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( XString **)&jarg4; 
    temp4 = XTools::ref_ptr<  XString >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  (arg1)->OnAnchorsDownloaded(arg2,(XTools::AnchorDownloadRequestPtr const &)*arg3,(XTools::XStringPtr const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnAnchorsDownloadedSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::AnchorDownloadRequestPtr *arg3 = 0 ;
  XTools::XStringPtr *arg4 = 0 ;
  XTools::AnchorDownloadRequestPtr tempnull3 ;
  XTools::AnchorDownloadRequestPtr temp3 ;
  XTools::AnchorDownloadRequest *smartarg3 ;
  XTools::XStringPtr tempnull4 ;
  XTools::XStringPtr temp4 ;
  XTools::XString *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( AnchorDownloadRequest **)&jarg3; 
    temp3 = XTools::ref_ptr<  AnchorDownloadRequest >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( XString **)&jarg4; 
    temp4 = XTools::ref_ptr<  XString >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  (arg1)->XTools::RoomManagerListener::OnAnchorsDownloaded(arg2,(XTools::AnchorDownloadRequestPtr const &)*arg3,(XTools::XStringPtr const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnAnchorUploadComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnAnchorUploadComplete(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1OnAnchorUploadCompleteSwigExplicitRoomManagerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XTools::RoomManagerListener **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::RoomManagerListener::OnAnchorUploadComplete(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1RoomManagerListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::RoomManagerListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::RoomManagerListener *)new SwigDirector_RoomManagerListener(jenv);
  *(XTools::RoomManagerListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::RoomManagerListener *obj = *((XTools::RoomManagerListener **)&objarg);
  (void)jcls;
  SwigDirector_RoomManagerListener *director = dynamic_cast<SwigDirector_RoomManagerListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::RoomManagerListener *obj = *((XTools::RoomManagerListener **)&objarg);
  SwigDirector_RoomManagerListener *director = dynamic_cast<SwigDirector_RoomManagerListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1AddListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomManagerListener *arg2 = (XTools::RoomManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  arg2 = *(XTools::RoomManagerListener **)&jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1RemoveListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomManagerListener *arg2 = (XTools::RoomManagerListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  arg2 = *(XTools::RoomManagerListener **)&jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1GetRoomCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  result = (XTools::int32)((XTools::RoomManager const *)arg1)->GetRoomCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1GetRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::int32 arg2 ;
  XTools::RoomPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetRoom(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = result.get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1GetCurrentRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  result = (arg1)->GetCurrentRoom();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = result.get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1CreateRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::RoomID arg3 ;
  bool arg4 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::RoomPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::RoomID)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->CreateRoom((XTools::XStringPtr const &)*arg2,arg3,arg4);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = result.get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1JoinRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)(arg1)->JoinRoom((XTools::RoomPtr const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1LeaveRoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  result = (bool)(arg1)->LeaveRoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1DownloadAnchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  result = (bool)(arg1)->DownloadAnchor((XTools::RoomPtr const &)*arg2,(XTools::XStringPtr const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManager_1UploadAnchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jbyteArray jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::byte *arg4 = (XTools::byte *) 0 ;
  XTools::int32 arg5 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  jbyte *jarr4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  if (!SWIG_JavaArrayInSchar(jenv, &jarr4, (signed char **)&arg4, jarg4)) return 0; 
  arg5 = (XTools::int32)jarg5; 
  result = (bool)(arg1)->UploadAnchor((XTools::RoomPtr const &)*arg2,(XTools::XStringPtr const &)*arg3,(XTools::byte const *)arg4,arg5);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutSchar(jenv, jarr4, (signed char *)arg4, jarg4); 
  delete [] arg4; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1RoomManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::RoomManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1Settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::Settings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::Settings *)new XTools::Settings();
  *(XTools::Settings **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Settings_1GetServerAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Settings **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Settings const *)arg1)->GetServerAddress();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Settings_1GetServerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Settings **)&jarg1; 
  result = (XTools::int32)((XTools::Settings const *)arg1)->GetServerPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Settings_1GetViewerAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Settings **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Settings const *)arg1)->GetViewerAddress();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Settings_1GetViewerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Settings **)&jarg1; 
  result = (XTools::int32)((XTools::Settings const *)arg1)->GetViewerPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_Settings_1GetLocalUserName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::Settings **)&jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Settings const *)arg1)->GetLocalUserName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1Settings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::Settings **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1IsReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (bool)(arg1)->IsReceiver();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1IsReceiverSwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (bool)(arg1)->XTools::PairMaker::IsReceiver();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetAddressCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::int32)(arg1)->GetAddressCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetAddressSwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->XTools::PairMaker::GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::uint16)(arg1)->GetPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetPortSwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::uint16)(arg1)->XTools::PairMaker::GetPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1UpdateSwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  (arg1)->XTools::PairMaker::Update();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1IsReadyToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (bool)(arg1)->IsReadyToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1IsReadyToConnectSwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (bool)(arg1)->XTools::PairMaker::IsReadyToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetLocalKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::int32)(arg1)->GetLocalKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetLocalKeySwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::int32)(arg1)->XTools::PairMaker::GetLocalKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetRemoteKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::int32)(arg1)->GetRemoteKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1GetRemoteKeySwigExplicitPairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  result = (XTools::int32)(arg1)->XTools::PairMaker::GetRemoteKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1PairMaker(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::PairMaker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::PairMaker *)new SwigDirector_PairMaker(jenv);
  *(XTools::PairMaker **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1PairMaker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::PairMaker **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::PairMaker *obj = *((XTools::PairMaker **)&objarg);
  (void)jcls;
  SwigDirector_PairMaker *director = dynamic_cast<SwigDirector_PairMaker *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairMaker_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::PairMaker *obj = *((XTools::PairMaker **)&objarg);
  SwigDirector_PairMaker *director = dynamic_cast<SwigDirector_PairMaker *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1PairingConnectionSucceeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingListener **)&jarg1; 
  (arg1)->PairingConnectionSucceeded();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1PairingConnectionSucceededSwigExplicitPairingListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingListener **)&jarg1; 
  (arg1)->XTools::PairingListener::PairingConnectionSucceeded();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1PairingConnectionFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  XTools::PairingResult arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingListener **)&jarg1; 
  arg2 = (XTools::PairingResult)jarg2; 
  (arg1)->PairingConnectionFailed(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1PairingConnectionFailedSwigExplicitPairingListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  XTools::PairingResult arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingListener **)&jarg1; 
  arg2 = (XTools::PairingResult)jarg2; 
  (arg1)->XTools::PairingListener::PairingConnectionFailed(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1PairingListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::PairingListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::PairingListener *)new SwigDirector_PairingListener(jenv);
  *(XTools::PairingListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1PairingListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::PairingListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::PairingListener *obj = *((XTools::PairingListener **)&objarg);
  (void)jcls;
  SwigDirector_PairingListener *director = dynamic_cast<SwigDirector_PairingListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::PairingListener *obj = *((XTools::PairingListener **)&objarg);
  SwigDirector_PairingListener *director = dynamic_cast<SwigDirector_PairingListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1HasPairingInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  result = (bool)((XTools::PairingManager const *)arg1)->HasPairingInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1ClearPairingInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  (arg1)->ClearPairingInfo();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1BeginConnecting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  XTools::PairingListener *arg2 = (XTools::PairingListener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  arg2 = *(XTools::PairingListener **)&jarg2; 
  result = (bool)(arg1)->BeginConnecting(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1CancelConnecting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  (arg1)->CancelConnecting();
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1BeginPairing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  XTools::PairMakerPtr *arg2 = 0 ;
  XTools::PairingListener *arg3 = (XTools::PairingListener *) 0 ;
  XTools::PairMakerPtr tempnull2 ;
  XTools::PairMakerPtr temp2 ;
  XTools::PairMaker *smartarg2 ;
  XTools::PairingResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( PairMaker **)&jarg2; 
    temp2 = XTools::ref_ptr<  PairMaker >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(XTools::PairingListener **)&jarg3; 
  result = (XTools::PairingResult)(arg1)->BeginPairing((XTools::PairMakerPtr const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1CancelPairing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  (arg1)->CancelPairing();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1IsPairing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  result = (bool)((XTools::PairingManager const *)arg1)->IsPairing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingManager_1IsConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  result = (bool)((XTools::PairingManager const *)arg1)->IsConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1PairingManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::PairingManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::ClientConfigPtr *arg1 = 0 ;
  XTools::ClientConfigPtr tempnull1 ;
  XTools::ClientConfigPtr temp1 ;
  XTools::ClientConfig *smartarg1 ;
  XTools::ref_ptr< XTools::SharingManager > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( ClientConfig **)&jarg1; 
    temp1 = XTools::ref_ptr<  ClientConfig >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::SharingManager::Create((XTools::ref_ptr< XTools::ClientConfig > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( SharingManager **)&jresult = result.get();
  } else {
    *( SharingManager **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetSessionManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::SessionManagerPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (XTools::SessionManagerPtr *) &((XTools::SharingManager const *)arg1)->GetSessionManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( SessionManager **)&jresult = result->get();
  } else {
    *( SessionManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetUserPresenceManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::UserPresenceManagerPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (XTools::UserPresenceManagerPtr *) &((XTools::SharingManager const *)arg1)->GetUserPresenceManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( UserPresenceManager **)&jresult = result->get();
  } else {
    *( UserPresenceManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetAudioManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::AudioManagerPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (XTools::AudioManagerPtr *) &((XTools::SharingManager const *)arg1)->GetAudioManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( AudioManager **)&jresult = result->get();
  } else {
    *( AudioManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetPairingManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::PairingManagerPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (XTools::PairingManagerPtr *) &((XTools::SharingManager const *)arg1)->GetPairingManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( PairingManager **)&jresult = result->get();
  } else {
    *( PairingManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetRoomManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::RoomManagerPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (XTools::RoomManagerPtr *) &((XTools::SharingManager const *)arg1)->GetRoomManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( RoomManager **)&jresult = result->get();
  } else {
    *( RoomManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetRootSyncObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::ObjectElementPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (arg1)->GetRootSyncObject();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = result.get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1RegisterSyncListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::SyncListener *arg2 = (XTools::SyncListener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  arg2 = *(XTools::SyncListener **)&jarg2; 
  result = (bool)(arg1)->RegisterSyncListener(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  (arg1)->Update();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetPairedConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::NetworkConnectionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (arg1)->GetPairedConnection();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkConnection **)&jresult = result.get();
  } else {
    *( NetworkConnection **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetServerConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::NetworkConnectionPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (arg1)->GetServerConnection();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkConnection **)&jresult = result.get();
  } else {
    *( NetworkConnection **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::SettingsPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (XTools::SettingsPtr *) &(arg1)->GetSettings();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( Settings **)&jresult = result->get();
  } else {
    *( Settings **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1SetServerConnectionInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::uint32 arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::uint32)jarg3; 
  (arg1)->SetServerConnectionInfo((XTools::XStringPtr const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1GetLocalUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::UserPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  result = (arg1)->GetLocalUser();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( User **)&jresult = result.get();
  } else {
    *( User **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SharingManager_1SetUserName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetUserName((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1SharingManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::SharingManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ImageTagLocation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ImageTagLocation **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocation_1GetTagId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagLocation **)&jarg1; 
  result = (int)(arg1)->GetTagId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocation_1GetPixelX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  XTools::ImageTagLocationType arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagLocation **)&jarg1; 
  arg2 = (XTools::ImageTagLocationType)jarg2; 
  result = (float)(arg1)->GetPixelX(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocation_1GetPixelY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  XTools::ImageTagLocationType arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagLocation **)&jarg1; 
  arg2 = (XTools::ImageTagLocationType)jarg2; 
  result = (float)(arg1)->GetPixelY(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocation_1GetModelViewMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9) {
  jfloat jresult = 0 ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagLocation **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (float)(arg1)->GetModelViewMatrix(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ImageTagLocationListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ImageTagLocationListener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1OnTagLocated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  XTools::ImageTagLocationPtr *arg2 = 0 ;
  XTools::ImageTagLocationPtr tempnull2 ;
  XTools::ImageTagLocationPtr temp2 ;
  XTools::ImageTagLocation *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ImageTagLocationListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ImageTagLocation **)&jarg2; 
    temp2 = XTools::ref_ptr<  ImageTagLocation >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnTagLocated((XTools::ImageTagLocationPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1OnTagLocatedSwigExplicitImageTagLocationListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  XTools::ImageTagLocationPtr *arg2 = 0 ;
  XTools::ImageTagLocationPtr tempnull2 ;
  XTools::ImageTagLocationPtr temp2 ;
  XTools::ImageTagLocation *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::ImageTagLocationListener **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ImageTagLocation **)&jarg2; 
    temp2 = XTools::ref_ptr<  ImageTagLocation >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ImageTagLocationListener::OnTagLocated((XTools::ImageTagLocationPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1OnTagLocatingCompleted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagLocationListener **)&jarg1; 
  (arg1)->OnTagLocatingCompleted();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1OnTagLocatingCompletedSwigExplicitImageTagLocationListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagLocationListener **)&jarg1; 
  (arg1)->XTools::ImageTagLocationListener::OnTagLocatingCompleted();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1ImageTagLocationListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::ImageTagLocationListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::ImageTagLocationListener *)new SwigDirector_ImageTagLocationListener(jenv);
  *(XTools::ImageTagLocationListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  XTools::ImageTagLocationListener *obj = *((XTools::ImageTagLocationListener **)&objarg);
  (void)jcls;
  SwigDirector_ImageTagLocationListener *director = dynamic_cast<SwigDirector_ImageTagLocationListener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  XTools::ImageTagLocationListener *obj = *((XTools::ImageTagLocationListener **)&objarg);
  SwigDirector_ImageTagLocationListener *director = dynamic_cast<SwigDirector_ImageTagLocationListener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_TagImage_1GetWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::TagImage **)&jarg1; 
  result = (XTools::int32)((XTools::TagImage const *)arg1)->GetWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_TagImage_1GetHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::TagImage **)&jarg1; 
  result = (XTools::int32)((XTools::TagImage const *)arg1)->GetHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_TagImage_1CopyImageData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4) {
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  XTools::int32 arg4 ;
  jbyte *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::TagImage **)&jarg1; 
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return ; 
  arg3 = (XTools::int32)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  ((XTools::TagImage const *)arg1)->CopyImageData(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1TagImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::TagImage **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1ImageTagManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::ImageTagManager **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagManager_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagManager **)&jarg1; 
  (arg1)->Update();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagManager_1FindTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  XTools::int32 arg4 ;
  XTools::int32 arg5 ;
  XTools::ImageTagLocationListener *arg6 = (XTools::ImageTagLocationListener *) 0 ;
  jbyte *jarr2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(XTools::ImageTagManager **)&jarg1; 
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return 0; 
  arg3 = (XTools::int32)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  arg5 = (XTools::int32)jarg5; 
  arg6 = *(XTools::ImageTagLocationListener **)&jarg6; 
  result = (bool)(arg1)->FindTags((XTools::byte const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagManager_1CreateTagImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  XTools::int32 arg2 ;
  XTools::TagImagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::ImageTagManager **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ImageTagManager const *)arg1)->CreateTagImage(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( TagImage **)&jresult = result.get();
  } else {
    *( TagImage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagManager_1Create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::ref_ptr< XTools::ImageTagManager > result;
  
  (void)jenv;
  (void)jcls;
  result = XTools::ImageTagManager::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ImageTagManager **)&jresult = result.get();
  } else {
    *( ImageTagManager **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1DirectPairConnector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::DirectPairConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::DirectPairConnector *)new XTools::DirectPairConnector();
  *(XTools::DirectPairConnector **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1DirectPairConnector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::XStringPtr *arg1 = 0 ;
  XTools::XStringPtr tempnull1 ;
  XTools::XStringPtr temp1 ;
  XTools::XString *smartarg1 ;
  XTools::DirectPairConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( XString **)&jarg1; 
    temp1 = XTools::ref_ptr<  XString >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = (XTools::DirectPairConnector *)new XTools::DirectPairConnector((XTools::XStringPtr const &)*arg1);
  *(XTools::DirectPairConnector **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1DirectPairConnector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::XStringPtr *arg1 = 0 ;
  XTools::uint16 arg2 ;
  XTools::XStringPtr tempnull1 ;
  XTools::XStringPtr temp1 ;
  XTools::XString *smartarg1 ;
  XTools::DirectPairConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( XString **)&jarg1; 
    temp1 = XTools::ref_ptr<  XString >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  arg2 = (XTools::uint16)jarg2; 
  result = (XTools::DirectPairConnector *)new XTools::DirectPairConnector((XTools::XStringPtr const &)*arg1,arg2);
  *(XTools::DirectPairConnector **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1IsReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  result = (bool)(arg1)->IsReceiver();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1GetAddressCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  result = (XTools::int32)(arg1)->GetAddressCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1GetAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1GetPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  result = (XTools::uint16)(arg1)->GetPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  (arg1)->Update();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1IsReadyToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  result = (bool)(arg1)->IsReadyToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1SetRemoteAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetRemoteAddress((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1SetRemotePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  arg2 = (XTools::uint16)jarg2; 
  (arg1)->SetRemotePort(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1DirectPairConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::DirectPairConnector **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1DirectPairReceiver_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::DirectPairReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XTools::DirectPairReceiver *)new XTools::DirectPairReceiver();
  *(XTools::DirectPairReceiver **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_new_1DirectPairReceiver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  XTools::uint16 arg1 ;
  XTools::DirectPairReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XTools::uint16)jarg1; 
  result = (XTools::DirectPairReceiver *)new XTools::DirectPairReceiver(arg1);
  *(XTools::DirectPairReceiver **)&jresult = result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1IsReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  result = (bool)(arg1)->IsReceiver();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1GetAddressCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  result = (XTools::int32)(arg1)->GetAddressCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1GetAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = result.get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1GetPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  result = (XTools::uint16)(arg1)->GetPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  (arg1)->Update();
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1IsReadyToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  result = (bool)(arg1)->IsReadyToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1SetIncomingPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  arg2 = (XTools::uint16)jarg2; 
  (arg1)->SetIncomingPort(arg2);
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1DirectPairReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::DirectPairReceiver **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairReceiver_1Create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::ref_ptr< XTools::VisualPairReceiver > result;
  
  (void)jenv;
  (void)jcls;
  result = XTools::VisualPairReceiver::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( VisualPairReceiver **)&jresult = result.get();
  } else {
    *( VisualPairReceiver **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairReceiver_1CreateTagImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XTools::VisualPairReceiver *arg1 = (XTools::VisualPairReceiver *) 0 ;
  XTools::TagImagePtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::VisualPairReceiver **)&jarg1; 
  result = ((XTools::VisualPairReceiver const *)arg1)->CreateTagImage();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( TagImage **)&jresult = result.get();
  } else {
    *( TagImage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1VisualPairReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::VisualPairReceiver *arg1 = (XTools::VisualPairReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::VisualPairReceiver **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairConnector_1Create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XTools::ref_ptr< XTools::VisualPairConnector > result;
  
  (void)jenv;
  (void)jcls;
  result = XTools::VisualPairConnector::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( VisualPairConnector **)&jresult = result.get();
  } else {
    *( VisualPairConnector **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairConnector_1ProcessImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  XTools::VisualPairConnector *arg1 = (XTools::VisualPairConnector *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  XTools::int32 arg4 ;
  XTools::int32 arg5 ;
  jbyte *jarr2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::VisualPairConnector **)&jarg1; 
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return 0; 
  arg3 = (XTools::int32)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  arg5 = (XTools::int32)jarg5; 
  result = (bool)(arg1)->ProcessImage(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairConnector_1IsProcessingImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XTools::VisualPairConnector *arg1 = (XTools::VisualPairConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XTools::VisualPairConnector **)&jarg1; 
  result = (bool)((XTools::VisualPairConnector const *)arg1)->IsProcessingImage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_delete_1VisualPairConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XTools::VisualPairConnector *arg1 = (XTools::VisualPairConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XTools::VisualPairConnector **)&jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_NetworkConnectionListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::NetworkConnectionListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_BoolElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::BoolElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::IntElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_LongElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::LongElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_FloatElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::FloatElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DoubleElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::DoubleElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_StringElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::StringElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::IntArrayListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_IntArrayElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::IntArrayElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElementListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::ObjectElementListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ObjectElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Element **)&baseptr = *(XTools::ObjectElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SyncListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::SyncListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::SessionListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_SessionManagerListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::SessionManagerListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_UserPresenceManagerListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::UserPresenceManagerListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_RoomManagerListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::RoomManagerListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_PairingListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::PairingListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_ImageTagLocationListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::Listener **)&baseptr = *(XTools::ImageTagLocationListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairConnector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::PairMaker **)&baseptr = *(XTools::DirectPairConnector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_DirectPairReceiver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::PairMaker **)&baseptr = *(XTools::DirectPairReceiver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairReceiver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::PairMaker **)&baseptr = *(XTools::VisualPairReceiver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_VisualPairConnector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XTools::PairMaker **)&baseptr = *(XTools::VisualPairConnector **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_microsoft_holotoolkit_sharing_SharingClientJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[51] = {
    {
      "SwigDirector_LogWriter_WriteLogEntry", "(Lcom/microsoft/holotoolkit/sharing/LogWriter;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_NetworkConnectionListener_OnConnected", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnectionListener;J)V" 
    },
    {
      "SwigDirector_NetworkConnectionListener_OnConnectFailed", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnectionListener;J)V" 
    },
    {
      "SwigDirector_NetworkConnectionListener_OnDisconnected", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnectionListener;J)V" 
    },
    {
      "SwigDirector_NetworkConnectionListener_OnMessageReceived", "(Lcom/microsoft/holotoolkit/sharing/NetworkConnectionListener;JJ)V" 
    },
    {
      "SwigDirector_IntArrayListener_OnValueChanged", "(Lcom/microsoft/holotoolkit/sharing/IntArrayListener;II)V" 
    },
    {
      "SwigDirector_IntArrayListener_OnValueInserted", "(Lcom/microsoft/holotoolkit/sharing/IntArrayListener;II)V" 
    },
    {
      "SwigDirector_IntArrayListener_OnValueRemoved", "(Lcom/microsoft/holotoolkit/sharing/IntArrayListener;II)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnBoolElementChanged", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;JZ)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnIntElementChanged", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;JI)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnLongElementChanged", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;JJ)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnFloatElementChanged", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;JF)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnDoubleElementChanged", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;JD)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnStringElementChanged", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;JJ)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnElementAdded", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;J)V" 
    },
    {
      "SwigDirector_ObjectElementListener_OnElementDeleted", "(Lcom/microsoft/holotoolkit/sharing/ObjectElementListener;J)V" 
    },
    {
      "SwigDirector_SyncListener_OnSyncChangesBegin", "(Lcom/microsoft/holotoolkit/sharing/SyncListener;)V" 
    },
    {
      "SwigDirector_SyncListener_OnSyncChangesEnd", "(Lcom/microsoft/holotoolkit/sharing/SyncListener;)V" 
    },
    {
      "SwigDirector_SessionListener_OnJoiningSession", "(Lcom/microsoft/holotoolkit/sharing/SessionListener;)V" 
    },
    {
      "SwigDirector_SessionListener_OnJoinSucceeded", "(Lcom/microsoft/holotoolkit/sharing/SessionListener;)V" 
    },
    {
      "SwigDirector_SessionListener_OnJoinFailed", "(Lcom/microsoft/holotoolkit/sharing/SessionListener;)V" 
    },
    {
      "SwigDirector_SessionListener_OnSessionDisconnected", "(Lcom/microsoft/holotoolkit/sharing/SessionListener;)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnCreateSucceeded", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;J)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnCreateFailed", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;J)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnSessionAdded", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;J)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnSessionClosed", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;J)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnUserJoinedSession", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;JJ)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnUserLeftSession", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;JJ)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnUserChanged", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;JJ)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnServerConnected", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;)V" 
    },
    {
      "SwigDirector_SessionManagerListener_OnServerDisconnected", "(Lcom/microsoft/holotoolkit/sharing/SessionManagerListener;)V" 
    },
    {
      "SwigDirector_UserPresenceManagerListener_OnUserPresenceChanged", "(Lcom/microsoft/holotoolkit/sharing/UserPresenceManagerListener;J)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnRoomAdded", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;J)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnRoomClosed", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;J)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnUserJoinedRoom", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;JI)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnUserLeftRoom", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;JI)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnAnchorsChanged", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;J)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnAnchorsDownloaded", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;ZJJ)V" 
    },
    {
      "SwigDirector_RoomManagerListener_OnAnchorUploadComplete", "(Lcom/microsoft/holotoolkit/sharing/RoomManagerListener;ZJ)V" 
    },
    {
      "SwigDirector_PairMaker_IsReceiver", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)Z" 
    },
    {
      "SwigDirector_PairMaker_GetAddressCount", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)I" 
    },
    {
      "SwigDirector_PairMaker_GetAddress", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;I)J" 
    },
    {
      "SwigDirector_PairMaker_GetPort", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)I" 
    },
    {
      "SwigDirector_PairMaker_Update", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)V" 
    },
    {
      "SwigDirector_PairMaker_IsReadyToConnect", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)Z" 
    },
    {
      "SwigDirector_PairMaker_GetLocalKey", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)I" 
    },
    {
      "SwigDirector_PairMaker_GetRemoteKey", "(Lcom/microsoft/holotoolkit/sharing/PairMaker;)I" 
    },
    {
      "SwigDirector_PairingListener_PairingConnectionSucceeded", "(Lcom/microsoft/holotoolkit/sharing/PairingListener;)V" 
    },
    {
      "SwigDirector_PairingListener_PairingConnectionFailed", "(Lcom/microsoft/holotoolkit/sharing/PairingListener;I)V" 
    },
    {
      "SwigDirector_ImageTagLocationListener_OnTagLocated", "(Lcom/microsoft/holotoolkit/sharing/ImageTagLocationListener;J)V" 
    },
    {
      "SwigDirector_ImageTagLocationListener_OnTagLocatingCompleted", "(Lcom/microsoft/holotoolkit/sharing/ImageTagLocationListener;)V" 
    }
  };
  Swig::jclass_SharingClientJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_SharingClientJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

