/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_SharingClient(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_SharingClient(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_SharingClient(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "../Common/Common.h"
#include "ClientWrapperAPI.h"
using namespace XTools;


#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ClientWrapperAPI_CSharp.h"

SwigDirector_LogWriter::SwigDirector_LogWriter() : XTools::LogWriter(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_LogWriter::~SwigDirector_LogWriter() {
  
}


void SwigDirector_LogWriter::WriteLogEntry(XTools::LogSeverity severity, std::string const &message) {
  int jseverity  ;
  char * jmessage = 0 ;
  
  if (!swig_callbackWriteLogEntry) {
    XTools::LogWriter::WriteLogEntry(severity,message);
    return;
  } else {
    jseverity = severity;
    jmessage = SWIG_csharp_string_callback((&message)->c_str()); 
    swig_callbackWriteLogEntry(jseverity, jmessage);
  }
}

void SwigDirector_LogWriter::swig_connect_director(SWIG_Callback0_t callbackWriteLogEntry) {
  swig_callbackWriteLogEntry = callbackWriteLogEntry;
}

void SwigDirector_LogWriter::swig_init_callbacks() {
  swig_callbackWriteLogEntry = 0;
}

SwigDirector_NetworkConnectionListener::SwigDirector_NetworkConnectionListener() : XTools::NetworkConnectionListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_NetworkConnectionListener::~SwigDirector_NetworkConnectionListener() {
  
}


void SwigDirector_NetworkConnectionListener::OnConnected(XTools::NetworkConnectionPtr const &connection) {
  void * jconnection = 0 ;
  
  if (!swig_callbackOnConnected) {
    XTools::NetworkConnectionListener::OnConnected(connection);
    return;
  } else {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    jconnection = (&connection)->get();
    
    swig_callbackOnConnected(jconnection);
  }
}

void SwigDirector_NetworkConnectionListener::OnConnectFailed(XTools::NetworkConnectionPtr const &connection) {
  void * jconnection = 0 ;
  
  if (!swig_callbackOnConnectFailed) {
    XTools::NetworkConnectionListener::OnConnectFailed(connection);
    return;
  } else {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    jconnection = (&connection)->get();
    
    swig_callbackOnConnectFailed(jconnection);
  }
}

void SwigDirector_NetworkConnectionListener::OnDisconnected(XTools::NetworkConnectionPtr const &connection) {
  void * jconnection = 0 ;
  
  if (!swig_callbackOnDisconnected) {
    XTools::NetworkConnectionListener::OnDisconnected(connection);
    return;
  } else {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    jconnection = (&connection)->get();
    
    swig_callbackOnDisconnected(jconnection);
  }
}

void SwigDirector_NetworkConnectionListener::OnMessageReceived(XTools::NetworkConnectionPtr const &connection, XTools::NetworkInMessage &message) {
  void * jconnection = 0 ;
  void * jmessage = 0 ;
  
  if (!swig_callbackOnMessageReceived) {
    XTools::NetworkConnectionListener::OnMessageReceived(connection,message);
    return;
  } else {
    // ref_ptr by reference directorin
    if (connection) {
      connection->AddRef(); 
    }
    jconnection = (&connection)->get();
    
    jmessage = (XTools::NetworkInMessage *) &message; 
    swig_callbackOnMessageReceived(jconnection, jmessage);
  }
}

void SwigDirector_NetworkConnectionListener::swig_connect_director(SWIG_Callback0_t callbackOnConnected, SWIG_Callback1_t callbackOnConnectFailed, SWIG_Callback2_t callbackOnDisconnected, SWIG_Callback3_t callbackOnMessageReceived) {
  swig_callbackOnConnected = callbackOnConnected;
  swig_callbackOnConnectFailed = callbackOnConnectFailed;
  swig_callbackOnDisconnected = callbackOnDisconnected;
  swig_callbackOnMessageReceived = callbackOnMessageReceived;
}

void SwigDirector_NetworkConnectionListener::swig_init_callbacks() {
  swig_callbackOnConnected = 0;
  swig_callbackOnConnectFailed = 0;
  swig_callbackOnDisconnected = 0;
  swig_callbackOnMessageReceived = 0;
}

SwigDirector_IntArrayListener::SwigDirector_IntArrayListener() : XTools::IntArrayListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IntArrayListener::~SwigDirector_IntArrayListener() {
  
}


void SwigDirector_IntArrayListener::OnValueChanged(XTools::int32 index, XTools::int32 newValue) {
  int jindex  ;
  int jnewValue  ;
  
  if (!swig_callbackOnValueChanged) {
    XTools::IntArrayListener::OnValueChanged(index,newValue);
    return;
  } else {
    jindex = index;
    jnewValue = newValue;
    swig_callbackOnValueChanged(jindex, jnewValue);
  }
}

void SwigDirector_IntArrayListener::OnValueInserted(XTools::int32 index, XTools::int32 value) {
  int jindex  ;
  int jvalue  ;
  
  if (!swig_callbackOnValueInserted) {
    XTools::IntArrayListener::OnValueInserted(index,value);
    return;
  } else {
    jindex = index;
    jvalue = value;
    swig_callbackOnValueInserted(jindex, jvalue);
  }
}

void SwigDirector_IntArrayListener::OnValueRemoved(XTools::int32 index, XTools::int32 value) {
  int jindex  ;
  int jvalue  ;
  
  if (!swig_callbackOnValueRemoved) {
    XTools::IntArrayListener::OnValueRemoved(index,value);
    return;
  } else {
    jindex = index;
    jvalue = value;
    swig_callbackOnValueRemoved(jindex, jvalue);
  }
}

void SwigDirector_IntArrayListener::swig_connect_director(SWIG_Callback0_t callbackOnValueChanged, SWIG_Callback1_t callbackOnValueInserted, SWIG_Callback2_t callbackOnValueRemoved) {
  swig_callbackOnValueChanged = callbackOnValueChanged;
  swig_callbackOnValueInserted = callbackOnValueInserted;
  swig_callbackOnValueRemoved = callbackOnValueRemoved;
}

void SwigDirector_IntArrayListener::swig_init_callbacks() {
  swig_callbackOnValueChanged = 0;
  swig_callbackOnValueInserted = 0;
  swig_callbackOnValueRemoved = 0;
}

SwigDirector_ObjectElementListener::SwigDirector_ObjectElementListener() : XTools::ObjectElementListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ObjectElementListener::~SwigDirector_ObjectElementListener() {
  
}


void SwigDirector_ObjectElementListener::OnBoolElementChanged(XTools::XGuid elementID, bool newValue) {
  long long jelementID  ;
  unsigned int jnewValue  ;
  
  if (!swig_callbackOnBoolElementChanged) {
    XTools::ObjectElementListener::OnBoolElementChanged(elementID,newValue);
    return;
  } else {
    jelementID = elementID;
    jnewValue = newValue;
    swig_callbackOnBoolElementChanged(jelementID, jnewValue);
  }
}

void SwigDirector_ObjectElementListener::OnIntElementChanged(XTools::XGuid elementID, XTools::int32 newValue) {
  long long jelementID  ;
  int jnewValue  ;
  
  if (!swig_callbackOnIntElementChanged) {
    XTools::ObjectElementListener::OnIntElementChanged(elementID,newValue);
    return;
  } else {
    jelementID = elementID;
    jnewValue = newValue;
    swig_callbackOnIntElementChanged(jelementID, jnewValue);
  }
}

void SwigDirector_ObjectElementListener::OnLongElementChanged(XTools::XGuid elementID, XTools::int64 newValue) {
  long long jelementID  ;
  long long jnewValue  ;
  
  if (!swig_callbackOnLongElementChanged) {
    XTools::ObjectElementListener::OnLongElementChanged(elementID,newValue);
    return;
  } else {
    jelementID = elementID;
    jnewValue = newValue;
    swig_callbackOnLongElementChanged(jelementID, jnewValue);
  }
}

void SwigDirector_ObjectElementListener::OnFloatElementChanged(XTools::XGuid elementID, float newValue) {
  long long jelementID  ;
  float jnewValue  ;
  
  if (!swig_callbackOnFloatElementChanged) {
    XTools::ObjectElementListener::OnFloatElementChanged(elementID,newValue);
    return;
  } else {
    jelementID = elementID;
    jnewValue = newValue;
    swig_callbackOnFloatElementChanged(jelementID, jnewValue);
  }
}

void SwigDirector_ObjectElementListener::OnDoubleElementChanged(XTools::XGuid elementID, double newValue) {
  long long jelementID  ;
  double jnewValue  ;
  
  if (!swig_callbackOnDoubleElementChanged) {
    XTools::ObjectElementListener::OnDoubleElementChanged(elementID,newValue);
    return;
  } else {
    jelementID = elementID;
    jnewValue = newValue;
    swig_callbackOnDoubleElementChanged(jelementID, jnewValue);
  }
}

void SwigDirector_ObjectElementListener::OnStringElementChanged(XTools::XGuid elementID, XTools::XStringPtr const &newValue) {
  long long jelementID  ;
  void * jnewValue = 0 ;
  
  if (!swig_callbackOnStringElementChanged) {
    XTools::ObjectElementListener::OnStringElementChanged(elementID,newValue);
    return;
  } else {
    jelementID = elementID;
    
    // ref_ptr by reference directorin
    if (newValue) {
      newValue->AddRef(); 
    }
    jnewValue = (&newValue)->get();
    
    swig_callbackOnStringElementChanged(jelementID, jnewValue);
  }
}

void SwigDirector_ObjectElementListener::OnElementAdded(XTools::ElementPtr const &element) {
  void * jelement = 0 ;
  
  if (!swig_callbackOnElementAdded) {
    XTools::ObjectElementListener::OnElementAdded(element);
    return;
  } else {
    // ref_ptr by reference directorin
    if (element) {
      element->AddRef(); 
    }
    jelement = (&element)->get();
    
    swig_callbackOnElementAdded(jelement);
  }
}

void SwigDirector_ObjectElementListener::OnElementDeleted(XTools::ElementPtr const &element) {
  void * jelement = 0 ;
  
  if (!swig_callbackOnElementDeleted) {
    XTools::ObjectElementListener::OnElementDeleted(element);
    return;
  } else {
    // ref_ptr by reference directorin
    if (element) {
      element->AddRef(); 
    }
    jelement = (&element)->get();
    
    swig_callbackOnElementDeleted(jelement);
  }
}

void SwigDirector_ObjectElementListener::swig_connect_director(SWIG_Callback0_t callbackOnBoolElementChanged, SWIG_Callback1_t callbackOnIntElementChanged, SWIG_Callback2_t callbackOnLongElementChanged, SWIG_Callback3_t callbackOnFloatElementChanged, SWIG_Callback4_t callbackOnDoubleElementChanged, SWIG_Callback5_t callbackOnStringElementChanged, SWIG_Callback6_t callbackOnElementAdded, SWIG_Callback7_t callbackOnElementDeleted) {
  swig_callbackOnBoolElementChanged = callbackOnBoolElementChanged;
  swig_callbackOnIntElementChanged = callbackOnIntElementChanged;
  swig_callbackOnLongElementChanged = callbackOnLongElementChanged;
  swig_callbackOnFloatElementChanged = callbackOnFloatElementChanged;
  swig_callbackOnDoubleElementChanged = callbackOnDoubleElementChanged;
  swig_callbackOnStringElementChanged = callbackOnStringElementChanged;
  swig_callbackOnElementAdded = callbackOnElementAdded;
  swig_callbackOnElementDeleted = callbackOnElementDeleted;
}

void SwigDirector_ObjectElementListener::swig_init_callbacks() {
  swig_callbackOnBoolElementChanged = 0;
  swig_callbackOnIntElementChanged = 0;
  swig_callbackOnLongElementChanged = 0;
  swig_callbackOnFloatElementChanged = 0;
  swig_callbackOnDoubleElementChanged = 0;
  swig_callbackOnStringElementChanged = 0;
  swig_callbackOnElementAdded = 0;
  swig_callbackOnElementDeleted = 0;
}

SwigDirector_SyncListener::SwigDirector_SyncListener() : XTools::SyncListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SyncListener::~SwigDirector_SyncListener() {
  
}


void SwigDirector_SyncListener::OnSyncChangesBegin() {
  if (!swig_callbackOnSyncChangesBegin) {
    XTools::SyncListener::OnSyncChangesBegin();
    return;
  } else {
    swig_callbackOnSyncChangesBegin();
  }
}

void SwigDirector_SyncListener::OnSyncChangesEnd() {
  if (!swig_callbackOnSyncChangesEnd) {
    XTools::SyncListener::OnSyncChangesEnd();
    return;
  } else {
    swig_callbackOnSyncChangesEnd();
  }
}

void SwigDirector_SyncListener::swig_connect_director(SWIG_Callback0_t callbackOnSyncChangesBegin, SWIG_Callback1_t callbackOnSyncChangesEnd) {
  swig_callbackOnSyncChangesBegin = callbackOnSyncChangesBegin;
  swig_callbackOnSyncChangesEnd = callbackOnSyncChangesEnd;
}

void SwigDirector_SyncListener::swig_init_callbacks() {
  swig_callbackOnSyncChangesBegin = 0;
  swig_callbackOnSyncChangesEnd = 0;
}

SwigDirector_SessionListener::SwigDirector_SessionListener() : XTools::SessionListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SessionListener::~SwigDirector_SessionListener() {
  
}


void SwigDirector_SessionListener::OnJoiningSession() {
  if (!swig_callbackOnJoiningSession) {
    XTools::SessionListener::OnJoiningSession();
    return;
  } else {
    swig_callbackOnJoiningSession();
  }
}

void SwigDirector_SessionListener::OnJoinSucceeded() {
  if (!swig_callbackOnJoinSucceeded) {
    XTools::SessionListener::OnJoinSucceeded();
    return;
  } else {
    swig_callbackOnJoinSucceeded();
  }
}

void SwigDirector_SessionListener::OnJoinFailed() {
  if (!swig_callbackOnJoinFailed) {
    XTools::SessionListener::OnJoinFailed();
    return;
  } else {
    swig_callbackOnJoinFailed();
  }
}

void SwigDirector_SessionListener::OnSessionDisconnected() {
  if (!swig_callbackOnSessionDisconnected) {
    XTools::SessionListener::OnSessionDisconnected();
    return;
  } else {
    swig_callbackOnSessionDisconnected();
  }
}

void SwigDirector_SessionListener::swig_connect_director(SWIG_Callback0_t callbackOnJoiningSession, SWIG_Callback1_t callbackOnJoinSucceeded, SWIG_Callback2_t callbackOnJoinFailed, SWIG_Callback3_t callbackOnSessionDisconnected) {
  swig_callbackOnJoiningSession = callbackOnJoiningSession;
  swig_callbackOnJoinSucceeded = callbackOnJoinSucceeded;
  swig_callbackOnJoinFailed = callbackOnJoinFailed;
  swig_callbackOnSessionDisconnected = callbackOnSessionDisconnected;
}

void SwigDirector_SessionListener::swig_init_callbacks() {
  swig_callbackOnJoiningSession = 0;
  swig_callbackOnJoinSucceeded = 0;
  swig_callbackOnJoinFailed = 0;
  swig_callbackOnSessionDisconnected = 0;
}

SwigDirector_SessionManagerListener::SwigDirector_SessionManagerListener() : XTools::SessionManagerListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SessionManagerListener::~SwigDirector_SessionManagerListener() {
  
}


void SwigDirector_SessionManagerListener::OnCreateSucceeded(XTools::SessionPtr const &newSession) {
  void * jnewSession = 0 ;
  
  if (!swig_callbackOnCreateSucceeded) {
    XTools::SessionManagerListener::OnCreateSucceeded(newSession);
    return;
  } else {
    // ref_ptr by reference directorin
    if (newSession) {
      newSession->AddRef(); 
    }
    jnewSession = (&newSession)->get();
    
    swig_callbackOnCreateSucceeded(jnewSession);
  }
}

void SwigDirector_SessionManagerListener::OnCreateFailed(XTools::XStringPtr const &reason) {
  void * jreason = 0 ;
  
  if (!swig_callbackOnCreateFailed) {
    XTools::SessionManagerListener::OnCreateFailed(reason);
    return;
  } else {
    // ref_ptr by reference directorin
    if (reason) {
      reason->AddRef(); 
    }
    jreason = (&reason)->get();
    
    swig_callbackOnCreateFailed(jreason);
  }
}

void SwigDirector_SessionManagerListener::OnSessionAdded(XTools::SessionPtr const &newSession) {
  void * jnewSession = 0 ;
  
  if (!swig_callbackOnSessionAdded) {
    XTools::SessionManagerListener::OnSessionAdded(newSession);
    return;
  } else {
    // ref_ptr by reference directorin
    if (newSession) {
      newSession->AddRef(); 
    }
    jnewSession = (&newSession)->get();
    
    swig_callbackOnSessionAdded(jnewSession);
  }
}

void SwigDirector_SessionManagerListener::OnSessionClosed(XTools::SessionPtr const &session) {
  void * jsession = 0 ;
  
  if (!swig_callbackOnSessionClosed) {
    XTools::SessionManagerListener::OnSessionClosed(session);
    return;
  } else {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    jsession = (&session)->get();
    
    swig_callbackOnSessionClosed(jsession);
  }
}

void SwigDirector_SessionManagerListener::OnUserJoinedSession(XTools::SessionPtr const &session, XTools::UserPtr const &newUser) {
  void * jsession = 0 ;
  void * jnewUser = 0 ;
  
  if (!swig_callbackOnUserJoinedSession) {
    XTools::SessionManagerListener::OnUserJoinedSession(session,newUser);
    return;
  } else {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    jsession = (&session)->get();
    
    
    // ref_ptr by reference directorin
    if (newUser) {
      newUser->AddRef(); 
    }
    jnewUser = (&newUser)->get();
    
    swig_callbackOnUserJoinedSession(jsession, jnewUser);
  }
}

void SwigDirector_SessionManagerListener::OnUserLeftSession(XTools::SessionPtr const &session, XTools::UserPtr const &user) {
  void * jsession = 0 ;
  void * juser = 0 ;
  
  if (!swig_callbackOnUserLeftSession) {
    XTools::SessionManagerListener::OnUserLeftSession(session,user);
    return;
  } else {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    jsession = (&session)->get();
    
    
    // ref_ptr by reference directorin
    if (user) {
      user->AddRef(); 
    }
    juser = (&user)->get();
    
    swig_callbackOnUserLeftSession(jsession, juser);
  }
}

void SwigDirector_SessionManagerListener::OnUserChanged(XTools::SessionPtr const &session, XTools::UserPtr const &user) {
  void * jsession = 0 ;
  void * juser = 0 ;
  
  if (!swig_callbackOnUserChanged) {
    XTools::SessionManagerListener::OnUserChanged(session,user);
    return;
  } else {
    // ref_ptr by reference directorin
    if (session) {
      session->AddRef(); 
    }
    jsession = (&session)->get();
    
    
    // ref_ptr by reference directorin
    if (user) {
      user->AddRef(); 
    }
    juser = (&user)->get();
    
    swig_callbackOnUserChanged(jsession, juser);
  }
}

void SwigDirector_SessionManagerListener::OnServerConnected() {
  if (!swig_callbackOnServerConnected) {
    XTools::SessionManagerListener::OnServerConnected();
    return;
  } else {
    swig_callbackOnServerConnected();
  }
}

void SwigDirector_SessionManagerListener::OnServerDisconnected() {
  if (!swig_callbackOnServerDisconnected) {
    XTools::SessionManagerListener::OnServerDisconnected();
    return;
  } else {
    swig_callbackOnServerDisconnected();
  }
}

void SwigDirector_SessionManagerListener::swig_connect_director(SWIG_Callback0_t callbackOnCreateSucceeded, SWIG_Callback1_t callbackOnCreateFailed, SWIG_Callback2_t callbackOnSessionAdded, SWIG_Callback3_t callbackOnSessionClosed, SWIG_Callback4_t callbackOnUserJoinedSession, SWIG_Callback5_t callbackOnUserLeftSession, SWIG_Callback6_t callbackOnUserChanged, SWIG_Callback7_t callbackOnServerConnected, SWIG_Callback8_t callbackOnServerDisconnected) {
  swig_callbackOnCreateSucceeded = callbackOnCreateSucceeded;
  swig_callbackOnCreateFailed = callbackOnCreateFailed;
  swig_callbackOnSessionAdded = callbackOnSessionAdded;
  swig_callbackOnSessionClosed = callbackOnSessionClosed;
  swig_callbackOnUserJoinedSession = callbackOnUserJoinedSession;
  swig_callbackOnUserLeftSession = callbackOnUserLeftSession;
  swig_callbackOnUserChanged = callbackOnUserChanged;
  swig_callbackOnServerConnected = callbackOnServerConnected;
  swig_callbackOnServerDisconnected = callbackOnServerDisconnected;
}

void SwigDirector_SessionManagerListener::swig_init_callbacks() {
  swig_callbackOnCreateSucceeded = 0;
  swig_callbackOnCreateFailed = 0;
  swig_callbackOnSessionAdded = 0;
  swig_callbackOnSessionClosed = 0;
  swig_callbackOnUserJoinedSession = 0;
  swig_callbackOnUserLeftSession = 0;
  swig_callbackOnUserChanged = 0;
  swig_callbackOnServerConnected = 0;
  swig_callbackOnServerDisconnected = 0;
}

SwigDirector_UserPresenceManagerListener::SwigDirector_UserPresenceManagerListener() : XTools::UserPresenceManagerListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_UserPresenceManagerListener::~SwigDirector_UserPresenceManagerListener() {
  
}


void SwigDirector_UserPresenceManagerListener::OnUserPresenceChanged(XTools::UserPtr const &user) {
  void * juser = 0 ;
  
  if (!swig_callbackOnUserPresenceChanged) {
    XTools::UserPresenceManagerListener::OnUserPresenceChanged(user);
    return;
  } else {
    // ref_ptr by reference directorin
    if (user) {
      user->AddRef(); 
    }
    juser = (&user)->get();
    
    swig_callbackOnUserPresenceChanged(juser);
  }
}

void SwigDirector_UserPresenceManagerListener::swig_connect_director(SWIG_Callback0_t callbackOnUserPresenceChanged) {
  swig_callbackOnUserPresenceChanged = callbackOnUserPresenceChanged;
}

void SwigDirector_UserPresenceManagerListener::swig_init_callbacks() {
  swig_callbackOnUserPresenceChanged = 0;
}

SwigDirector_RoomManagerListener::SwigDirector_RoomManagerListener() : XTools::RoomManagerListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_RoomManagerListener::~SwigDirector_RoomManagerListener() {
  
}


void SwigDirector_RoomManagerListener::OnRoomAdded(XTools::RoomPtr const &newRoom) {
  void * jnewRoom = 0 ;
  
  if (!swig_callbackOnRoomAdded) {
    XTools::RoomManagerListener::OnRoomAdded(newRoom);
    return;
  } else {
    // ref_ptr by reference directorin
    if (newRoom) {
      newRoom->AddRef(); 
    }
    jnewRoom = (&newRoom)->get();
    
    swig_callbackOnRoomAdded(jnewRoom);
  }
}

void SwigDirector_RoomManagerListener::OnRoomClosed(XTools::RoomPtr const &room) {
  void * jroom = 0 ;
  
  if (!swig_callbackOnRoomClosed) {
    XTools::RoomManagerListener::OnRoomClosed(room);
    return;
  } else {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    jroom = (&room)->get();
    
    swig_callbackOnRoomClosed(jroom);
  }
}

void SwigDirector_RoomManagerListener::OnUserJoinedRoom(XTools::RoomPtr const &room, XTools::UserID user) {
  void * jroom = 0 ;
  int juser  ;
  
  if (!swig_callbackOnUserJoinedRoom) {
    XTools::RoomManagerListener::OnUserJoinedRoom(room,user);
    return;
  } else {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    jroom = (&room)->get();
    
    juser = user;
    swig_callbackOnUserJoinedRoom(jroom, juser);
  }
}

void SwigDirector_RoomManagerListener::OnUserLeftRoom(XTools::RoomPtr const &room, XTools::UserID user) {
  void * jroom = 0 ;
  int juser  ;
  
  if (!swig_callbackOnUserLeftRoom) {
    XTools::RoomManagerListener::OnUserLeftRoom(room,user);
    return;
  } else {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    jroom = (&room)->get();
    
    juser = user;
    swig_callbackOnUserLeftRoom(jroom, juser);
  }
}

void SwigDirector_RoomManagerListener::OnAnchorsChanged(XTools::RoomPtr const &room) {
  void * jroom = 0 ;
  
  if (!swig_callbackOnAnchorsChanged) {
    XTools::RoomManagerListener::OnAnchorsChanged(room);
    return;
  } else {
    // ref_ptr by reference directorin
    if (room) {
      room->AddRef(); 
    }
    jroom = (&room)->get();
    
    swig_callbackOnAnchorsChanged(jroom);
  }
}

void SwigDirector_RoomManagerListener::OnAnchorsDownloaded(bool successful, XTools::AnchorDownloadRequestPtr const &request, XTools::XStringPtr const &failureReason) {
  unsigned int jsuccessful  ;
  void * jrequest = 0 ;
  void * jfailureReason = 0 ;
  
  if (!swig_callbackOnAnchorsDownloaded) {
    XTools::RoomManagerListener::OnAnchorsDownloaded(successful,request,failureReason);
    return;
  } else {
    jsuccessful = successful;
    
    // ref_ptr by reference directorin
    if (request) {
      request->AddRef(); 
    }
    jrequest = (&request)->get();
    
    
    // ref_ptr by reference directorin
    if (failureReason) {
      failureReason->AddRef(); 
    }
    jfailureReason = (&failureReason)->get();
    
    swig_callbackOnAnchorsDownloaded(jsuccessful, jrequest, jfailureReason);
  }
}

void SwigDirector_RoomManagerListener::OnAnchorUploadComplete(bool successful, XTools::XStringPtr const &failureReason) {
  unsigned int jsuccessful  ;
  void * jfailureReason = 0 ;
  
  if (!swig_callbackOnAnchorUploadComplete) {
    XTools::RoomManagerListener::OnAnchorUploadComplete(successful,failureReason);
    return;
  } else {
    jsuccessful = successful;
    
    // ref_ptr by reference directorin
    if (failureReason) {
      failureReason->AddRef(); 
    }
    jfailureReason = (&failureReason)->get();
    
    swig_callbackOnAnchorUploadComplete(jsuccessful, jfailureReason);
  }
}

void SwigDirector_RoomManagerListener::swig_connect_director(SWIG_Callback0_t callbackOnRoomAdded, SWIG_Callback1_t callbackOnRoomClosed, SWIG_Callback2_t callbackOnUserJoinedRoom, SWIG_Callback3_t callbackOnUserLeftRoom, SWIG_Callback4_t callbackOnAnchorsChanged, SWIG_Callback5_t callbackOnAnchorsDownloaded, SWIG_Callback6_t callbackOnAnchorUploadComplete) {
  swig_callbackOnRoomAdded = callbackOnRoomAdded;
  swig_callbackOnRoomClosed = callbackOnRoomClosed;
  swig_callbackOnUserJoinedRoom = callbackOnUserJoinedRoom;
  swig_callbackOnUserLeftRoom = callbackOnUserLeftRoom;
  swig_callbackOnAnchorsChanged = callbackOnAnchorsChanged;
  swig_callbackOnAnchorsDownloaded = callbackOnAnchorsDownloaded;
  swig_callbackOnAnchorUploadComplete = callbackOnAnchorUploadComplete;
}

void SwigDirector_RoomManagerListener::swig_init_callbacks() {
  swig_callbackOnRoomAdded = 0;
  swig_callbackOnRoomClosed = 0;
  swig_callbackOnUserJoinedRoom = 0;
  swig_callbackOnUserLeftRoom = 0;
  swig_callbackOnAnchorsChanged = 0;
  swig_callbackOnAnchorsDownloaded = 0;
  swig_callbackOnAnchorUploadComplete = 0;
}

SwigDirector_PairMaker::SwigDirector_PairMaker() : XTools::PairMaker(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_PairMaker::~SwigDirector_PairMaker() {
  
}


bool SwigDirector_PairMaker::IsReceiver() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackIsReceiver) {
    return XTools::PairMaker::IsReceiver();
  } else {
    jresult = (unsigned int) swig_callbackIsReceiver();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

XTools::int32 SwigDirector_PairMaker::GetAddressCount() {
  XTools::int32 c_result = SwigValueInit< XTools::int32 >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetAddressCount) {
    throw Swig::DirectorPureVirtualException("XTools::PairMaker::GetAddressCount");
  } else {
    jresult = (int) swig_callbackGetAddressCount();
    c_result = (XTools::int32)jresult; 
  }
  return c_result;
}

XTools::XStringPtr SwigDirector_PairMaker::GetAddress(XTools::int32 index) {
  XTools::XStringPtr c_result ;
  void * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackGetAddress) {
    return XTools::PairMaker::GetAddress(index);
  } else {
    jindex = index;
    jresult = (void *) swig_callbackGetAddress(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type XTools::XStringPtr", 0);
      return c_result;
    }
    c_result = *(XTools::XStringPtr *)jresult; 
  }
  return c_result;
}

XTools::uint16 SwigDirector_PairMaker::GetPort() {
  XTools::uint16 c_result = SwigValueInit< XTools::uint16 >() ;
  unsigned short jresult = 0 ;
  
  if (!swig_callbackGetPort) {
    return XTools::PairMaker::GetPort();
  } else {
    jresult = (unsigned short) swig_callbackGetPort();
    c_result = (XTools::uint16)jresult; 
  }
  return c_result;
}

void SwigDirector_PairMaker::Update() {
  if (!swig_callbackUpdate) {
    XTools::PairMaker::Update();
    return;
  } else {
    swig_callbackUpdate();
  }
}

bool SwigDirector_PairMaker::IsReadyToConnect() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackIsReadyToConnect) {
    return XTools::PairMaker::IsReadyToConnect();
  } else {
    jresult = (unsigned int) swig_callbackIsReadyToConnect();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

XTools::int32 SwigDirector_PairMaker::GetLocalKey() {
  XTools::int32 c_result = SwigValueInit< XTools::int32 >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetLocalKey) {
    return XTools::PairMaker::GetLocalKey();
  } else {
    jresult = (int) swig_callbackGetLocalKey();
    c_result = (XTools::int32)jresult; 
  }
  return c_result;
}

XTools::int32 SwigDirector_PairMaker::GetRemoteKey() {
  XTools::int32 c_result = SwigValueInit< XTools::int32 >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetRemoteKey) {
    return XTools::PairMaker::GetRemoteKey();
  } else {
    jresult = (int) swig_callbackGetRemoteKey();
    c_result = (XTools::int32)jresult; 
  }
  return c_result;
}

void SwigDirector_PairMaker::swig_connect_director(SWIG_Callback0_t callbackIsReceiver, SWIG_Callback1_t callbackGetAddressCount, SWIG_Callback2_t callbackGetAddress, SWIG_Callback3_t callbackGetPort, SWIG_Callback4_t callbackUpdate, SWIG_Callback5_t callbackIsReadyToConnect, SWIG_Callback6_t callbackGetLocalKey, SWIG_Callback7_t callbackGetRemoteKey) {
  swig_callbackIsReceiver = callbackIsReceiver;
  swig_callbackGetAddressCount = callbackGetAddressCount;
  swig_callbackGetAddress = callbackGetAddress;
  swig_callbackGetPort = callbackGetPort;
  swig_callbackUpdate = callbackUpdate;
  swig_callbackIsReadyToConnect = callbackIsReadyToConnect;
  swig_callbackGetLocalKey = callbackGetLocalKey;
  swig_callbackGetRemoteKey = callbackGetRemoteKey;
}

void SwigDirector_PairMaker::swig_init_callbacks() {
  swig_callbackIsReceiver = 0;
  swig_callbackGetAddressCount = 0;
  swig_callbackGetAddress = 0;
  swig_callbackGetPort = 0;
  swig_callbackUpdate = 0;
  swig_callbackIsReadyToConnect = 0;
  swig_callbackGetLocalKey = 0;
  swig_callbackGetRemoteKey = 0;
}

SwigDirector_PairingListener::SwigDirector_PairingListener() : XTools::PairingListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_PairingListener::~SwigDirector_PairingListener() {
  
}


void SwigDirector_PairingListener::PairingConnectionSucceeded() {
  if (!swig_callbackPairingConnectionSucceeded) {
    XTools::PairingListener::PairingConnectionSucceeded();
    return;
  } else {
    swig_callbackPairingConnectionSucceeded();
  }
}

void SwigDirector_PairingListener::PairingConnectionFailed(XTools::PairingResult reason) {
  int jreason  ;
  
  if (!swig_callbackPairingConnectionFailed) {
    XTools::PairingListener::PairingConnectionFailed(reason);
    return;
  } else {
    jreason = reason;
    swig_callbackPairingConnectionFailed(jreason);
  }
}

void SwigDirector_PairingListener::swig_connect_director(SWIG_Callback0_t callbackPairingConnectionSucceeded, SWIG_Callback1_t callbackPairingConnectionFailed) {
  swig_callbackPairingConnectionSucceeded = callbackPairingConnectionSucceeded;
  swig_callbackPairingConnectionFailed = callbackPairingConnectionFailed;
}

void SwigDirector_PairingListener::swig_init_callbacks() {
  swig_callbackPairingConnectionSucceeded = 0;
  swig_callbackPairingConnectionFailed = 0;
}

SwigDirector_ImageTagLocationListener::SwigDirector_ImageTagLocationListener() : XTools::ImageTagLocationListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ImageTagLocationListener::~SwigDirector_ImageTagLocationListener() {
  
}


void SwigDirector_ImageTagLocationListener::OnTagLocated(XTools::ImageTagLocationPtr const &location) {
  void * jlocation = 0 ;
  
  if (!swig_callbackOnTagLocated) {
    XTools::ImageTagLocationListener::OnTagLocated(location);
    return;
  } else {
    // ref_ptr by reference directorin
    if (location) {
      location->AddRef(); 
    }
    jlocation = (&location)->get();
    
    swig_callbackOnTagLocated(jlocation);
  }
}

void SwigDirector_ImageTagLocationListener::OnTagLocatingCompleted() {
  if (!swig_callbackOnTagLocatingCompleted) {
    XTools::ImageTagLocationListener::OnTagLocatingCompleted();
    return;
  } else {
    swig_callbackOnTagLocatingCompleted();
  }
}

void SwigDirector_ImageTagLocationListener::swig_connect_director(SWIG_Callback0_t callbackOnTagLocated, SWIG_Callback1_t callbackOnTagLocatingCompleted) {
  swig_callbackOnTagLocated = callbackOnTagLocated;
  swig_callbackOnTagLocatingCompleted = callbackOnTagLocatingCompleted;
}

void SwigDirector_ImageTagLocationListener::swig_init_callbacks() {
  swig_callbackOnTagLocated = 0;
  swig_callbackOnTagLocatingCompleted = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kInvalidSocketID_get() {
  unsigned long long jresult ;
  XTools::SocketID result;
  
  result = (XTools::SocketID)(XTools::SocketID)XTools::kInvalidSocketID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kInvalidConnectionGUID_get() {
  unsigned long long jresult ;
  XTools::ConnectionGUID result;
  
  result = (XTools::ConnectionGUID)(XTools::ConnectionGUID)XTools::kInvalidConnectionGUID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Receipt(void * jarg1) {
  XTools::Receipt *arg1 = (XTools::Receipt *) 0 ;
  
  arg1 = (XTools::Receipt *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Receipt_Clear(void * jarg1) {
  XTools::Receipt *arg1 = (XTools::Receipt *) 0 ;
  
  arg1 = (XTools::Receipt *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Receipt() {
  void * jresult ;
  XTools::Receipt *result = 0 ;
  
  result = (XTools::Receipt *)new XTools::Receipt();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogManager(void * jarg1) {
  XTools::LogManager *arg1 = (XTools::LogManager *) 0 ;
  
  arg1 = (XTools::LogManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogManager_Log(void * jarg1, int jarg2, char * jarg3) {
  XTools::LogManager *arg1 = (XTools::LogManager *) 0 ;
  XTools::LogSeverity arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (XTools::LogManager *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Log(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogWriter(void * jarg1) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  
  arg1 = (XTools::LogWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_WriteLogEntry(void * jarg1, int jarg2, char * jarg3) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (XTools::LogWriter *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->WriteLogEntry(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_WriteLogEntrySwigExplicitLogWriter(void * jarg1, int jarg2, char * jarg3) {
  XTools::LogWriter *arg1 = (XTools::LogWriter *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (XTools::LogWriter *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->XTools::LogWriter::WriteLogEntry(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogWriter() {
  void * jresult ;
  XTools::LogWriter *result = 0 ;
  
  result = (XTools::LogWriter *)new SwigDirector_LogWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogWriter_director_connect(void *objarg, SwigDirector_LogWriter::SWIG_Callback0_t callback0) {
  XTools::LogWriter *obj = (XTools::LogWriter *)objarg;
  SwigDirector_LogWriter *director = dynamic_cast<SwigDirector_LogWriter *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_Info(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  XTools::Log::Info((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_Warning(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  XTools::Log::Warning((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Log_Error(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  XTools::Log::Error((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Log() {
  void * jresult ;
  XTools::Log *result = 0 ;
  
  result = (XTools::Log *)new XTools::Log();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Log(void * jarg1) {
  XTools::Log *arg1 = (XTools::Log *) 0 ;
  
  arg1 = (XTools::Log *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Listener(void * jarg1) {
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  
  arg1 = (XTools::Listener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Listener_UnregisterAll(void * jarg1) {
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  
  arg1 = (XTools::Listener *)jarg1; 
  (arg1)->UnregisterAll();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Listener_IsRegistered(void * jarg1) {
  unsigned int jresult ;
  XTools::Listener *arg1 = (XTools::Listener *) 0 ;
  bool result;
  
  arg1 = (XTools::Listener *)jarg1; 
  result = (bool)((XTools::Listener const *)arg1)->IsRegistered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Listener() {
  void * jresult ;
  XTools::Listener *result = 0 ;
  
  result = (XTools::Listener *)new XTools::Listener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kInvalidXGuid_get() {
  long long jresult ;
  XTools::XGuid result;
  
  result = (XTools::XGuid)(XTools::XGuid)XTools::kInvalidXGuid;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XString__SWIG_0() {
  void * jresult ;
  XTools::XString *result = 0 ;
  
  result = (XTools::XString *)new XTools::XString();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XString__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  XTools::XString *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (XTools::XString *)new XTools::XString((std::string const &)*arg1);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XString(void * jarg1) {
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  
  arg1 = (XTools::XString *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XString_GetLength(void * jarg1) {
  unsigned int jresult ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  XTools::uint32 result;
  
  arg1 = (XTools::XString *)jarg1; 
  result = (XTools::uint32)((XTools::XString const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XString_IsEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  XTools::ref_ptr< XTools::XString > *arg2 = 0 ;
  XTools::ref_ptr< XTools::XString > tempnull2 ;
  XTools::ref_ptr< XTools::XString > temp2 ;
  XTools::XString *smartarg2 ;
  bool result;
  
  arg1 = (XTools::XString *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)((XTools::XString const *)arg1)->IsEqual((XTools::ref_ptr< XTools::XString > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XString_GetString(void * jarg1) {
  char * jresult ;
  XTools::XString *arg1 = (XTools::XString *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XTools::XString *)jarg1; 
  result = (std::string *) &((XTools::XString const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_0(void * jarg1, unsigned char jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::byte arg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = (XTools::byte)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_1(void * jarg1, short jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::int16 arg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = (XTools::int16)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_2(void * jarg1, int jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::int32 arg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_3(void * jarg1, long long jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::int64 arg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = (XTools::int64)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_4(void * jarg1, float jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  float arg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_5(void * jarg1, double jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  double arg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->Write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Write__SWIG_6(void * jarg1, void * jarg2) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->Write((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_WriteArray(void * jarg1, unsigned char* jarg2, unsigned int jarg3) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::uint32 arg3 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  arg2 = jarg2;
  arg3 = (XTools::uint32)jarg3; 
  (arg1)->WriteArray((XTools::byte const *)arg2,arg3);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkOutMessage_Reset(void * jarg1) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetworkOutMessage(void * jarg1) {
  XTools::NetworkOutMessage *arg1 = (XTools::NetworkOutMessage *) 0 ;
  
  arg1 = (XTools::NetworkOutMessage *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetworkInMessage(void * jarg1) {
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NetworkInMessage_ReadByte(void * jarg1) {
  unsigned char jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::byte result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (XTools::byte)(arg1)->ReadByte();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_NetworkInMessage_ReadInt16(void * jarg1) {
  short jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int16 result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (XTools::int16)(arg1)->ReadInt16();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetworkInMessage_ReadInt32(void * jarg1) {
  int jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (XTools::int32)(arg1)->ReadInt32();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetworkInMessage_ReadInt64(void * jarg1) {
  long long jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int64 result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (XTools::int64)(arg1)->ReadInt64();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NetworkInMessage_ReadFloat(void * jarg1) {
  float jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  float result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (float)(arg1)->ReadFloat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NetworkInMessage_ReadDouble(void * jarg1) {
  double jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  double result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (double)(arg1)->ReadDouble();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkInMessage_ReadString(void * jarg1) {
  void * jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (arg1)->ReadString();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkInMessage_ReadArray(void * jarg1, unsigned char* jarg2, unsigned int jarg3) {
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::uint32 arg3 ;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  arg2 = jarg2;
  arg3 = (XTools::uint32)jarg3; 
  (arg1)->ReadArray(arg2,arg3);
  
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetworkInMessage_GetUnreadBitsCount(void * jarg1) {
  int jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (XTools::int32)((XTools::NetworkInMessage const *)arg1)->GetUnreadBitsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetworkInMessage_GetSize(void * jarg1) {
  int jresult ;
  XTools::NetworkInMessage *arg1 = (XTools::NetworkInMessage *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::NetworkInMessage *)jarg1; 
  result = (XTools::int32)((XTools::NetworkInMessage const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetworkConnectionListener(void * jarg1) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnConnected(void * jarg1, void * jarg2) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnConnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnConnectedSwigExplicitNetworkConnectionListener(void * jarg1, void * jarg2) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::NetworkConnectionListener::OnConnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnConnectFailed(void * jarg1, void * jarg2) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnConnectFailed((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnConnectFailedSwigExplicitNetworkConnectionListener(void * jarg1, void * jarg2) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::NetworkConnectionListener::OnConnectFailed((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnDisconnected(void * jarg1, void * jarg2) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnDisconnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnDisconnectedSwigExplicitNetworkConnectionListener(void * jarg1, void * jarg2) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::NetworkConnectionListener::OnDisconnected((XTools::NetworkConnectionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnMessageReceived(void * jarg1, void * jarg2, void * jarg3) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkInMessage *arg3 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::NetworkInMessage *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XTools::NetworkInMessage & type is null", 0);
    return ;
  } 
  (arg1)->OnMessageReceived((XTools::NetworkConnectionPtr const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_OnMessageReceivedSwigExplicitNetworkConnectionListener(void * jarg1, void * jarg2, void * jarg3) {
  XTools::NetworkConnectionListener *arg1 = (XTools::NetworkConnectionListener *) 0 ;
  XTools::NetworkConnectionPtr *arg2 = 0 ;
  XTools::NetworkInMessage *arg3 = 0 ;
  XTools::NetworkConnectionPtr tempnull2 ;
  XTools::NetworkConnectionPtr temp2 ;
  XTools::NetworkConnection *smartarg2 ;
  
  arg1 = (XTools::NetworkConnectionListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkConnection **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkConnection >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::NetworkInMessage *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XTools::NetworkInMessage & type is null", 0);
    return ;
  } 
  (arg1)->XTools::NetworkConnectionListener::OnMessageReceived((XTools::NetworkConnectionPtr const &)*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetworkConnectionListener() {
  void * jresult ;
  XTools::NetworkConnectionListener *result = 0 ;
  
  result = (XTools::NetworkConnectionListener *)new SwigDirector_NetworkConnectionListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnectionListener_director_connect(void *objarg, SwigDirector_NetworkConnectionListener::SWIG_Callback0_t callback0, SwigDirector_NetworkConnectionListener::SWIG_Callback1_t callback1, SwigDirector_NetworkConnectionListener::SWIG_Callback2_t callback2, SwigDirector_NetworkConnectionListener::SWIG_Callback3_t callback3) {
  XTools::NetworkConnectionListener *obj = (XTools::NetworkConnectionListener *)objarg;
  SwigDirector_NetworkConnectionListener *director = dynamic_cast<SwigDirector_NetworkConnectionListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_User_GetName(void * jarg1) {
  void * jresult ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::User *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::User const *)arg1)->GetName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_User_GetID(void * jarg1) {
  int jresult ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  XTools::UserID result;
  
  arg1 = (XTools::User *)jarg1; 
  result = (XTools::UserID)((XTools::User const *)arg1)->GetID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_User_IsValid(void * jarg1) {
  unsigned int jresult ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  bool result;
  
  arg1 = (XTools::User *)jarg1; 
  result = (bool)((XTools::User const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_User_GetMuteState(void * jarg1) {
  unsigned int jresult ;
  XTools::User *arg1 = (XTools::User *) 0 ;
  bool result;
  
  arg1 = (XTools::User *)jarg1; 
  result = (bool)((XTools::User const *)arg1)->GetMuteState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_User(void * jarg1) {
  XTools::User *arg1 = (XTools::User *) 0 ;
  
  arg1 = (XTools::User *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetworkConnection_IsConnected(void * jarg1) {
  unsigned int jresult ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  bool result;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  result = (bool)((XTools::NetworkConnection const *)arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetworkConnection_GetConnectionGUID(void * jarg1) {
  unsigned long long jresult ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::ConnectionGUID result;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  result = (XTools::ConnectionGUID)((XTools::NetworkConnection const *)arg1)->GetConnectionGUID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Send__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  bool arg6 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Send__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Send__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Send__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Send__SWIG_4(void * jarg1, void * jarg2) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->Send((XTools::NetworkOutMessagePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_SendTo__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::MessageReliability arg6 ;
  XTools::MessageChannel arg7 ;
  bool arg8 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  arg6 = (XTools::MessageReliability)jarg6; 
  arg7 = (XTools::MessageChannel)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_SendTo__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6, int jarg7) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::MessageReliability arg6 ;
  XTools::MessageChannel arg7 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  arg6 = (XTools::MessageReliability)jarg6; 
  arg7 = (XTools::MessageChannel)jarg7; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_SendTo__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::MessageReliability arg6 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  arg6 = (XTools::MessageReliability)jarg6; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_SendTo__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::MessagePriority arg5 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = (XTools::MessagePriority)jarg5; 
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_SendTo__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::ClientRole arg3 ;
  XTools::NetworkOutMessagePtr *arg4 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  XTools::NetworkOutMessagePtr tempnull4 ;
  XTools::NetworkOutMessagePtr temp4 ;
  XTools::NetworkOutMessage *smartarg4 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::ClientRole)jarg3; 
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( NetworkOutMessage **)&jarg4; 
    temp4 = XTools::ref_ptr<  NetworkOutMessage >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  (arg1)->SendTo((XTools::UserPtr const &)*arg2,arg3,(XTools::NetworkOutMessagePtr const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Broadcast__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  bool arg6 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Broadcast__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::MessageChannel arg5 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  arg5 = (XTools::MessageChannel)jarg5; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Broadcast__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::MessageReliability arg4 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  arg4 = (XTools::MessageReliability)jarg4; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Broadcast__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::MessagePriority arg3 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::MessagePriority)jarg3; 
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Broadcast__SWIG_4(void * jarg1, void * jarg2) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->Broadcast((XTools::NetworkOutMessagePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_AddListener(void * jarg1, unsigned char jarg2, void * jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = (XTools::NetworkConnectionListener *)jarg3; 
  (arg1)->AddListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_RemoveListener(void * jarg1, unsigned char jarg2, void * jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = (XTools::NetworkConnectionListener *)jarg3; 
  (arg1)->RemoveListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_AddListenerAsync(void * jarg1, unsigned char jarg2, void * jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = (XTools::NetworkConnectionListener *)jarg3; 
  (arg1)->AddListenerAsync(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_RemoveListenerAsync(void * jarg1, unsigned char jarg2, void * jarg3) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkConnectionListener *arg3 = (XTools::NetworkConnectionListener *) 0 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  arg2 = (XTools::byte)jarg2; 
  arg3 = (XTools::NetworkConnectionListener *)jarg3; 
  (arg1)->RemoveListenerAsync(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkConnection_CreateMessage(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::byte arg2 ;
  XTools::NetworkOutMessagePtr result;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  arg2 = (XTools::byte)jarg2; 
  result = (arg1)->CreateMessage(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkOutMessage **)&jresult = (&result)->get();
  } else {
    *( NetworkOutMessage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_ReturnMessage(void * jarg1, void * jarg2) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::NetworkOutMessagePtr *arg2 = 0 ;
  XTools::NetworkOutMessagePtr tempnull2 ;
  XTools::NetworkOutMessagePtr temp2 ;
  XTools::NetworkOutMessage *smartarg2 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( NetworkOutMessage **)&jarg2; 
    temp2 = XTools::ref_ptr<  NetworkOutMessage >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->ReturnMessage((XTools::NetworkOutMessagePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetworkConnection_Disconnect(void * jarg1) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetworkConnection_GetRemoteAddress(void * jarg1) {
  void * jresult ;
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  result = ((XTools::NetworkConnection const *)arg1)->GetRemoteAddress();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetworkConnection(void * jarg1) {
  XTools::NetworkConnection *arg1 = (XTools::NetworkConnection *) 0 ;
  
  arg1 = (XTools::NetworkConnection *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Element_GetElementType(void * jarg1) {
  int jresult ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::ElementType result;
  
  arg1 = (XTools::Element *)jarg1; 
  result = (XTools::ElementType)((XTools::Element const *)arg1)->GetElementType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Element_GetGUID(void * jarg1) {
  long long jresult ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::XGuid result;
  
  arg1 = (XTools::Element *)jarg1; 
  result = (XTools::XGuid)((XTools::Element const *)arg1)->GetGUID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Element_GetName(void * jarg1) {
  void * jresult ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::Element *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Element const *)arg1)->GetName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Element_GetParent(void * jarg1) {
  void * jresult ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  XTools::ref_ptr< XTools::Element > result;
  
  arg1 = (XTools::Element *)jarg1; 
  result = ((XTools::Element const *)arg1)->GetParent();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = (&result)->get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Element_IsValid(void * jarg1) {
  unsigned int jresult ;
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  bool result;
  
  arg1 = (XTools::Element *)jarg1; 
  result = (bool)((XTools::Element const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Element(void * jarg1) {
  XTools::Element *arg1 = (XTools::Element *) 0 ;
  
  arg1 = (XTools::Element *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoolElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::BoolElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::BoolElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( BoolElement **)&jresult = (&result)->get();
  } else {
    *( BoolElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BoolElement_GetValue(void * jarg1) {
  unsigned int jresult ;
  XTools::BoolElement *arg1 = (XTools::BoolElement *) 0 ;
  bool result;
  
  arg1 = (XTools::BoolElement *)jarg1; 
  result = (bool)((XTools::BoolElement const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolElement_SetValue(void * jarg1, unsigned int jarg2) {
  XTools::BoolElement *arg1 = (XTools::BoolElement *) 0 ;
  bool arg2 ;
  
  arg1 = (XTools::BoolElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoolElement(void * jarg1) {
  XTools::BoolElement *arg1 = (XTools::BoolElement *) 0 ;
  
  arg1 = (XTools::BoolElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::IntElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::IntElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntElement **)&jresult = (&result)->get();
  } else {
    *( IntElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntElement_GetValue(void * jarg1) {
  int jresult ;
  XTools::IntElement *arg1 = (XTools::IntElement *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::IntElement *)jarg1; 
  result = (XTools::int32)((XTools::IntElement const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntElement_SetValue(void * jarg1, int jarg2) {
  XTools::IntElement *arg1 = (XTools::IntElement *) 0 ;
  XTools::int32 arg2 ;
  
  arg1 = (XTools::IntElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntElement(void * jarg1) {
  XTools::IntElement *arg1 = (XTools::IntElement *) 0 ;
  
  arg1 = (XTools::IntElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LongElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::LongElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::LongElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( LongElement **)&jresult = (&result)->get();
  } else {
    *( LongElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_LongElement_GetValue(void * jarg1) {
  long long jresult ;
  XTools::LongElement *arg1 = (XTools::LongElement *) 0 ;
  XTools::int64 result;
  
  arg1 = (XTools::LongElement *)jarg1; 
  result = (XTools::int64)((XTools::LongElement const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LongElement_SetValue(void * jarg1, long long jarg2) {
  XTools::LongElement *arg1 = (XTools::LongElement *) 0 ;
  XTools::int64 arg2 ;
  
  arg1 = (XTools::LongElement *)jarg1; 
  arg2 = (XTools::int64)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LongElement(void * jarg1) {
  XTools::LongElement *arg1 = (XTools::LongElement *) 0 ;
  
  arg1 = (XTools::LongElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FloatElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::FloatElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::FloatElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( FloatElement **)&jresult = (&result)->get();
  } else {
    *( FloatElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FloatElement_GetValue(void * jarg1) {
  float jresult ;
  XTools::FloatElement *arg1 = (XTools::FloatElement *) 0 ;
  float result;
  
  arg1 = (XTools::FloatElement *)jarg1; 
  result = (float)((XTools::FloatElement const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FloatElement_SetValue(void * jarg1, float jarg2) {
  XTools::FloatElement *arg1 = (XTools::FloatElement *) 0 ;
  float arg2 ;
  
  arg1 = (XTools::FloatElement *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FloatElement(void * jarg1) {
  XTools::FloatElement *arg1 = (XTools::FloatElement *) 0 ;
  
  arg1 = (XTools::FloatElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DoubleElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::DoubleElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::DoubleElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( DoubleElement **)&jresult = (&result)->get();
  } else {
    *( DoubleElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DoubleElement_GetValue(void * jarg1) {
  double jresult ;
  XTools::DoubleElement *arg1 = (XTools::DoubleElement *) 0 ;
  double result;
  
  arg1 = (XTools::DoubleElement *)jarg1; 
  result = (double)((XTools::DoubleElement const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoubleElement_SetValue(void * jarg1, double jarg2) {
  XTools::DoubleElement *arg1 = (XTools::DoubleElement *) 0 ;
  double arg2 ;
  
  arg1 = (XTools::DoubleElement *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DoubleElement(void * jarg1) {
  XTools::DoubleElement *arg1 = (XTools::DoubleElement *) 0 ;
  
  arg1 = (XTools::DoubleElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::StringElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::StringElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( StringElement **)&jresult = (&result)->get();
  } else {
    *( StringElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringElement_GetValue(void * jarg1) {
  void * jresult ;
  XTools::StringElement *arg1 = (XTools::StringElement *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::StringElement *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::StringElement const *)arg1)->GetValue();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringElement_SetValue(void * jarg1, void * jarg2) {
  XTools::StringElement *arg1 = (XTools::StringElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::StringElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetValue((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringElement(void * jarg1) {
  XTools::StringElement *arg1 = (XTools::StringElement *) 0 ;
  
  arg1 = (XTools::StringElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArrayListener(void * jarg1) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_OnValueChanged(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnValueChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_OnValueChangedSwigExplicitIntArrayListener(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::IntArrayListener::OnValueChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_OnValueInserted(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnValueInserted(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_OnValueInsertedSwigExplicitIntArrayListener(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::IntArrayListener::OnValueInserted(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_OnValueRemoved(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnValueRemoved(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_OnValueRemovedSwigExplicitIntArrayListener(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayListener *arg1 = (XTools::IntArrayListener *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayListener *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::IntArrayListener::OnValueRemoved(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArrayListener() {
  void * jresult ;
  XTools::IntArrayListener *result = 0 ;
  
  result = (XTools::IntArrayListener *)new SwigDirector_IntArrayListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayListener_director_connect(void *objarg, SwigDirector_IntArrayListener::SWIG_Callback0_t callback0, SwigDirector_IntArrayListener::SWIG_Callback1_t callback1, SwigDirector_IntArrayListener::SWIG_Callback2_t callback2) {
  XTools::IntArrayListener *obj = (XTools::IntArrayListener *)objarg;
  SwigDirector_IntArrayListener *director = dynamic_cast<SwigDirector_IntArrayListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::IntArrayElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::IntArrayElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntArrayElement **)&jresult = (&result)->get();
  } else {
    *( IntArrayElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArrayElement_GetCount(void * jarg1) {
  int jresult ;
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  result = (XTools::int32)((XTools::IntArrayElement const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArrayElement_GetValue(void * jarg1, int jarg2) {
  int jresult ;
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 result;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (XTools::int32)((XTools::IntArrayElement const *)arg1)->GetValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayElement_SetValue(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->SetValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayElement_InsertValue(void * jarg1, int jarg2, int jarg3) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  int arg3 ;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->InsertValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayElement_RemoveValue(void * jarg1, int jarg2) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::int32 arg2 ;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->RemoveValue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayElement_AddListener(void * jarg1, void * jarg2) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::IntArrayListener *arg2 = (XTools::IntArrayListener *) 0 ;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  arg2 = (XTools::IntArrayListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArrayElement_RemoveListener(void * jarg1, void * jarg2) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  XTools::IntArrayListener *arg2 = (XTools::IntArrayListener *) 0 ;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  arg2 = (XTools::IntArrayListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArrayElement(void * jarg1) {
  XTools::IntArrayElement *arg1 = (XTools::IntArrayElement *) 0 ;
  
  arg1 = (XTools::IntArrayElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectElementListener(void * jarg1) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnBoolElementChanged(void * jarg1, long long jarg2, unsigned int jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  bool arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->OnBoolElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnBoolElementChangedSwigExplicitObjectElementListener(void * jarg1, long long jarg2, unsigned int jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  bool arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->XTools::ObjectElementListener::OnBoolElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnIntElementChanged(void * jarg1, long long jarg2, int jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->OnIntElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnIntElementChangedSwigExplicitObjectElementListener(void * jarg1, long long jarg2, int jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int32 arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnIntElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnLongElementChanged(void * jarg1, long long jarg2, long long jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int64 arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int64)jarg3; 
  (arg1)->OnLongElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnLongElementChangedSwigExplicitObjectElementListener(void * jarg1, long long jarg2, long long jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::int64 arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (XTools::int64)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnLongElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnFloatElementChanged(void * jarg1, long long jarg2, float jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  float arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnFloatElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnFloatElementChangedSwigExplicitObjectElementListener(void * jarg1, long long jarg2, float jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  float arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnFloatElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnDoubleElementChanged(void * jarg1, long long jarg2, double jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  double arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->OnDoubleElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnDoubleElementChangedSwigExplicitObjectElementListener(void * jarg1, long long jarg2, double jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  double arg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->XTools::ObjectElementListener::OnDoubleElementChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnStringElementChanged(void * jarg1, long long jarg2, void * jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnStringElementChanged(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnStringElementChangedSwigExplicitObjectElementListener(void * jarg1, long long jarg2, void * jarg3) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::XGuid arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::ObjectElementListener::OnStringElementChanged(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnElementAdded(void * jarg1, void * jarg2) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnElementAdded((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnElementAddedSwigExplicitObjectElementListener(void * jarg1, void * jarg2) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ObjectElementListener::OnElementAdded((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnElementDeleted(void * jarg1, void * jarg2) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnElementDeleted((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_OnElementDeletedSwigExplicitObjectElementListener(void * jarg1, void * jarg2) {
  XTools::ObjectElementListener *arg1 = (XTools::ObjectElementListener *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  arg1 = (XTools::ObjectElementListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ObjectElementListener::OnElementDeleted((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ObjectElementListener() {
  void * jresult ;
  XTools::ObjectElementListener *result = 0 ;
  
  result = (XTools::ObjectElementListener *)new SwigDirector_ObjectElementListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElementListener_director_connect(void *objarg, SwigDirector_ObjectElementListener::SWIG_Callback0_t callback0, SwigDirector_ObjectElementListener::SWIG_Callback1_t callback1, SwigDirector_ObjectElementListener::SWIG_Callback2_t callback2, SwigDirector_ObjectElementListener::SWIG_Callback3_t callback3, SwigDirector_ObjectElementListener::SWIG_Callback4_t callback4, SwigDirector_ObjectElementListener::SWIG_Callback5_t callback5, SwigDirector_ObjectElementListener::SWIG_Callback6_t callback6, SwigDirector_ObjectElementListener::SWIG_Callback7_t callback7) {
  XTools::ObjectElementListener *obj = (XTools::ObjectElementListener *)objarg;
  SwigDirector_ObjectElementListener *director = dynamic_cast<SwigDirector_ObjectElementListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_Cast(void * jarg1) {
  void * jresult ;
  XTools::ElementPtr *arg1 = 0 ;
  XTools::ElementPtr tempnull1 ;
  XTools::ElementPtr temp1 ;
  XTools::Element *smartarg1 ;
  XTools::ref_ptr< XTools::ObjectElement > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( Element **)&jarg1; 
    temp1 = XTools::ref_ptr<  Element >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::ObjectElement::Cast((XTools::ref_ptr< XTools::Element > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = (&result)->get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateBoolElement(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  bool arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::BoolElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = jarg3 ? true : false; 
  result = (arg1)->CreateBoolElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( BoolElement **)&jresult = (&result)->get();
  } else {
    *( BoolElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateIntElement(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::int32 arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::IntElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::int32)jarg3; 
  result = (arg1)->CreateIntElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntElement **)&jresult = (&result)->get();
  } else {
    *( IntElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateLongElement(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::int64 arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::LongElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::int64)jarg3; 
  result = (arg1)->CreateLongElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( LongElement **)&jresult = (&result)->get();
  } else {
    *( LongElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateFloatElement(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  float arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::FloatElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (float)jarg3; 
  result = (arg1)->CreateFloatElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( FloatElement **)&jresult = (&result)->get();
  } else {
    *( FloatElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateDoubleElement(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  double arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::DoubleElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (double)jarg3; 
  result = (arg1)->CreateDoubleElement((XTools::XStringPtr const &)*arg2,arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( DoubleElement **)&jresult = (&result)->get();
  } else {
    *( DoubleElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateStringElement(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  XTools::StringElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  result = (arg1)->CreateStringElement((XTools::XStringPtr const &)*arg2,(XTools::XStringPtr const &)*arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( StringElement **)&jresult = (&result)->get();
  } else {
    *( StringElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateObjectElement__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::User *arg3 = (XTools::User *) 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::ref_ptr< XTools::ObjectElement > result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::User *)jarg3; 
  result = (arg1)->CreateObjectElement((XTools::XStringPtr const &)*arg2,(XTools::User const *)arg3);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = (&result)->get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateObjectElement__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::ref_ptr< XTools::ObjectElement > result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (arg1)->CreateObjectElement((XTools::XStringPtr const &)*arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = (&result)->get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_CreateIntArrayElement(void * jarg1, void * jarg2) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::IntArrayElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (arg1)->CreateIntArrayElement((XTools::XStringPtr const &)*arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( IntArrayElement **)&jresult = (&result)->get();
  } else {
    *( IntArrayElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectElement_GetElementCount(void * jarg1) {
  int jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  result = (XTools::int32)((XTools::ObjectElement const *)arg1)->GetElementCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_GetElement__SWIG_0(void * jarg1, long long jarg2) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XGuid arg2 ;
  XTools::ElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  result = ((XTools::ObjectElement const *)arg1)->GetElement(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = (&result)->get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_GetElement__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::ElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = ((XTools::ObjectElement const *)arg1)->GetElement((XTools::XStringPtr const &)*arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = (&result)->get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ObjectElement_GetElementAt(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::int32 arg2 ;
  XTools::ElementPtr result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ObjectElement const *)arg1)->GetElementAt(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Element **)&jresult = (&result)->get();
  } else {
    *( Element **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElement_RemoveElement__SWIG_0(void * jarg1, void * jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::ElementPtr *arg2 = 0 ;
  XTools::ElementPtr tempnull2 ;
  XTools::ElementPtr temp2 ;
  XTools::Element *smartarg2 ;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Element **)&jarg2; 
    temp2 = XTools::ref_ptr<  Element >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->RemoveElement((XTools::ElementPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElement_RemoveElement__SWIG_1(void * jarg1, long long jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::XGuid arg2 ;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  arg2 = (XTools::XGuid)jarg2; 
  (arg1)->RemoveElement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElement_RemoveElementAt(void * jarg1, int jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::int32 arg2 ;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  (arg1)->RemoveElementAt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElement_AddListener(void * jarg1, void * jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::ObjectElementListener *arg2 = (XTools::ObjectElementListener *) 0 ;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  arg2 = (XTools::ObjectElementListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ObjectElement_RemoveListener(void * jarg1, void * jarg2) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::ObjectElementListener *arg2 = (XTools::ObjectElementListener *) 0 ;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  arg2 = (XTools::ObjectElementListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ObjectElement_GetOwnerID(void * jarg1) {
  int jresult ;
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  XTools::UserID result;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  result = (XTools::UserID)((XTools::ObjectElement const *)arg1)->GetOwnerID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ObjectElement(void * jarg1) {
  XTools::ObjectElement *arg1 = (XTools::ObjectElement *) 0 ;
  
  arg1 = (XTools::ObjectElement *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SyncListener_OnSyncChangesBegin(void * jarg1) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  arg1 = (XTools::SyncListener *)jarg1; 
  (arg1)->OnSyncChangesBegin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SyncListener_OnSyncChangesBeginSwigExplicitSyncListener(void * jarg1) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  arg1 = (XTools::SyncListener *)jarg1; 
  (arg1)->XTools::SyncListener::OnSyncChangesBegin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SyncListener_OnSyncChangesEnd(void * jarg1) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  arg1 = (XTools::SyncListener *)jarg1; 
  (arg1)->OnSyncChangesEnd();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SyncListener_OnSyncChangesEndSwigExplicitSyncListener(void * jarg1) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  arg1 = (XTools::SyncListener *)jarg1; 
  (arg1)->XTools::SyncListener::OnSyncChangesEnd();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SyncListener() {
  void * jresult ;
  XTools::SyncListener *result = 0 ;
  
  result = (XTools::SyncListener *)new SwigDirector_SyncListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SyncListener(void * jarg1) {
  XTools::SyncListener *arg1 = (XTools::SyncListener *) 0 ;
  
  arg1 = (XTools::SyncListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SyncListener_director_connect(void *objarg, SwigDirector_SyncListener::SWIG_Callback0_t callback0, SwigDirector_SyncListener::SWIG_Callback1_t callback1) {
  XTools::SyncListener *obj = (XTools::SyncListener *)objarg;
  SwigDirector_SyncListener *director = dynamic_cast<SwigDirector_SyncListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SessionListener(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnJoiningSession(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->OnJoiningSession();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnJoiningSessionSwigExplicitSessionListener(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->XTools::SessionListener::OnJoiningSession();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnJoinSucceeded(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->OnJoinSucceeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnJoinSucceededSwigExplicitSessionListener(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->XTools::SessionListener::OnJoinSucceeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnJoinFailed(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->OnJoinFailed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnJoinFailedSwigExplicitSessionListener(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->XTools::SessionListener::OnJoinFailed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnSessionDisconnected(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->OnSessionDisconnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_OnSessionDisconnectedSwigExplicitSessionListener(void * jarg1) {
  XTools::SessionListener *arg1 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::SessionListener *)jarg1; 
  (arg1)->XTools::SessionListener::OnSessionDisconnected();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SessionListener() {
  void * jresult ;
  XTools::SessionListener *result = 0 ;
  
  result = (XTools::SessionListener *)new SwigDirector_SessionListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionListener_director_connect(void *objarg, SwigDirector_SessionListener::SWIG_Callback0_t callback0, SwigDirector_SessionListener::SWIG_Callback1_t callback1, SwigDirector_SessionListener::SWIG_Callback2_t callback2, SwigDirector_SessionListener::SWIG_Callback3_t callback3) {
  XTools::SessionListener *obj = (XTools::SessionListener *)objarg;
  SwigDirector_SessionListener *director = dynamic_cast<SwigDirector_SessionListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Session_GetMachineSessionState(void * jarg1) {
  int jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::MachineSessionState result;
  
  arg1 = (XTools::Session *)jarg1; 
  result = (XTools::MachineSessionState)((XTools::Session const *)arg1)->GetMachineSessionState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Session_AddListener(void * jarg1, void * jarg2) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::SessionListener *arg2 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::Session *)jarg1; 
  arg2 = (XTools::SessionListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Session_RemoveListener(void * jarg1, void * jarg2) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::SessionListener *arg2 = (XTools::SessionListener *) 0 ;
  
  arg1 = (XTools::Session *)jarg1; 
  arg2 = (XTools::SessionListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Session_IsJoined(void * jarg1) {
  unsigned int jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  bool result;
  
  arg1 = (XTools::Session *)jarg1; 
  result = (bool)((XTools::Session const *)arg1)->IsJoined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Session_Join(void * jarg1) {
  unsigned int jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  bool result;
  
  arg1 = (XTools::Session *)jarg1; 
  result = (bool)(arg1)->Join();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Session_Leave(void * jarg1) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  
  arg1 = (XTools::Session *)jarg1; 
  (arg1)->Leave();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Session_GetUserCount(void * jarg1) {
  int jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::Session *)jarg1; 
  result = (XTools::int32)((XTools::Session const *)arg1)->GetUserCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Session_GetUser(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::int32 arg2 ;
  XTools::UserPtr result;
  
  arg1 = (XTools::Session *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetUser(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( User **)&jresult = (&result)->get();
  } else {
    *( User **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Session_GetSessionType(void * jarg1) {
  int jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::SessionType result;
  
  arg1 = (XTools::Session *)jarg1; 
  result = (XTools::SessionType)((XTools::Session const *)arg1)->GetSessionType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Session_GetName(void * jarg1) {
  void * jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::Session *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Session const *)arg1)->GetName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Session_GetSessionNetworkConnection(void * jarg1) {
  void * jresult ;
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  XTools::NetworkConnectionPtr result;
  
  arg1 = (XTools::Session *)jarg1; 
  result = ((XTools::Session const *)arg1)->GetSessionNetworkConnection();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkConnection **)&jresult = (&result)->get();
  } else {
    *( NetworkConnection **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Session(void * jarg1) {
  XTools::Session *arg1 = (XTools::Session *) 0 ;
  
  arg1 = (XTools::Session *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SessionManagerListener(void * jarg1) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnCreateSucceeded(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnCreateSucceeded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnCreateSucceededSwigExplicitSessionManagerListener(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnCreateSucceeded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnCreateFailed(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnCreateFailed((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnCreateFailedSwigExplicitSessionManagerListener(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnCreateFailed((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnSessionAdded(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnSessionAdded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnSessionAddedSwigExplicitSessionManagerListener(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnSessionAdded((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnSessionClosed(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnSessionClosed((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnSessionClosedSwigExplicitSessionManagerListener(void * jarg1, void * jarg2) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::SessionManagerListener::OnSessionClosed((XTools::SessionPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnUserJoinedSession(void * jarg1, void * jarg2, void * jarg3) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnUserJoinedSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnUserJoinedSessionSwigExplicitSessionManagerListener(void * jarg1, void * jarg2, void * jarg3) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::SessionManagerListener::OnUserJoinedSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnUserLeftSession(void * jarg1, void * jarg2, void * jarg3) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnUserLeftSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnUserLeftSessionSwigExplicitSessionManagerListener(void * jarg1, void * jarg2, void * jarg3) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::SessionManagerListener::OnUserLeftSession((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnUserChanged(void * jarg1, void * jarg2, void * jarg3) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnUserChanged((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnUserChangedSwigExplicitSessionManagerListener(void * jarg1, void * jarg2, void * jarg3) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  XTools::SessionPtr *arg2 = 0 ;
  XTools::UserPtr *arg3 = 0 ;
  XTools::SessionPtr tempnull2 ;
  XTools::SessionPtr temp2 ;
  XTools::Session *smartarg2 ;
  XTools::UserPtr tempnull3 ;
  XTools::UserPtr temp3 ;
  XTools::User *smartarg3 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Session **)&jarg2; 
    temp2 = XTools::ref_ptr<  Session >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( User **)&jarg3; 
    temp3 = XTools::ref_ptr<  User >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::SessionManagerListener::OnUserChanged((XTools::SessionPtr const &)*arg2,(XTools::UserPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnServerConnected(void * jarg1) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  (arg1)->OnServerConnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnServerConnectedSwigExplicitSessionManagerListener(void * jarg1) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  (arg1)->XTools::SessionManagerListener::OnServerConnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnServerDisconnected(void * jarg1) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  (arg1)->OnServerDisconnected();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_OnServerDisconnectedSwigExplicitSessionManagerListener(void * jarg1) {
  XTools::SessionManagerListener *arg1 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManagerListener *)jarg1; 
  (arg1)->XTools::SessionManagerListener::OnServerDisconnected();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SessionManagerListener() {
  void * jresult ;
  XTools::SessionManagerListener *result = 0 ;
  
  result = (XTools::SessionManagerListener *)new SwigDirector_SessionManagerListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManagerListener_director_connect(void *objarg, SwigDirector_SessionManagerListener::SWIG_Callback0_t callback0, SwigDirector_SessionManagerListener::SWIG_Callback1_t callback1, SwigDirector_SessionManagerListener::SWIG_Callback2_t callback2, SwigDirector_SessionManagerListener::SWIG_Callback3_t callback3, SwigDirector_SessionManagerListener::SWIG_Callback4_t callback4, SwigDirector_SessionManagerListener::SWIG_Callback5_t callback5, SwigDirector_SessionManagerListener::SWIG_Callback6_t callback6, SwigDirector_SessionManagerListener::SWIG_Callback7_t callback7, SwigDirector_SessionManagerListener::SWIG_Callback8_t callback8) {
  XTools::SessionManagerListener *obj = (XTools::SessionManagerListener *)objarg;
  SwigDirector_SessionManagerListener *director = dynamic_cast<SwigDirector_SessionManagerListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManager_AddListener(void * jarg1, void * jarg2) {
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::SessionManagerListener *arg2 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  arg2 = (XTools::SessionManagerListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SessionManager_RemoveListener(void * jarg1, void * jarg2) {
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::SessionManagerListener *arg2 = (XTools::SessionManagerListener *) 0 ;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  arg2 = (XTools::SessionManagerListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SessionManager_CreateSession(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  bool result;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)(arg1)->CreateSession((XTools::XStringPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SessionManager_GetSessionCount(void * jarg1) {
  int jresult ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  result = (XTools::int32)((XTools::SessionManager const *)arg1)->GetSessionCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SessionManager_GetSession(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::int32 arg2 ;
  XTools::SessionPtr result;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetSession(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Session **)&jresult = (&result)->get();
  } else {
    *( Session **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SessionManager_GetCurrentSession(void * jarg1) {
  void * jresult ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::SessionPtr result;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  result = (arg1)->GetCurrentSession();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Session **)&jresult = (&result)->get();
  } else {
    *( Session **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SessionManager_GetCurrentUser(void * jarg1) {
  void * jresult ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  XTools::UserPtr *result = 0 ;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  result = (XTools::UserPtr *) &((XTools::SessionManager const *)arg1)->GetCurrentUser();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( User **)&jresult = result->get();
  } else {
    *( User **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SessionManager_IsServerConnected(void * jarg1) {
  unsigned int jresult ;
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  bool result;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  result = (bool)((XTools::SessionManager const *)arg1)->IsServerConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SessionManager(void * jarg1) {
  XTools::SessionManager *arg1 = (XTools::SessionManager *) 0 ;
  
  arg1 = (XTools::SessionManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserPresenceManagerListener(void * jarg1) {
  XTools::UserPresenceManagerListener *arg1 = (XTools::UserPresenceManagerListener *) 0 ;
  
  arg1 = (XTools::UserPresenceManagerListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManagerListener_OnUserPresenceChanged(void * jarg1, void * jarg2) {
  XTools::UserPresenceManagerListener *arg1 = (XTools::UserPresenceManagerListener *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  
  arg1 = (XTools::UserPresenceManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnUserPresenceChanged((XTools::UserPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManagerListener_OnUserPresenceChangedSwigExplicitUserPresenceManagerListener(void * jarg1, void * jarg2) {
  XTools::UserPresenceManagerListener *arg1 = (XTools::UserPresenceManagerListener *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  
  arg1 = (XTools::UserPresenceManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::UserPresenceManagerListener::OnUserPresenceChanged((XTools::UserPtr const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UserPresenceManagerListener() {
  void * jresult ;
  XTools::UserPresenceManagerListener *result = 0 ;
  
  result = (XTools::UserPresenceManagerListener *)new SwigDirector_UserPresenceManagerListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManagerListener_director_connect(void *objarg, SwigDirector_UserPresenceManagerListener::SWIG_Callback0_t callback0) {
  XTools::UserPresenceManagerListener *obj = (XTools::UserPresenceManagerListener *)objarg;
  SwigDirector_UserPresenceManagerListener *director = dynamic_cast<SwigDirector_UserPresenceManagerListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManager_AddListener(void * jarg1, void * jarg2) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::UserPresenceManagerListener *arg2 = (XTools::UserPresenceManagerListener *) 0 ;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  arg2 = (XTools::UserPresenceManagerListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManager_RemoveListener(void * jarg1, void * jarg2) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::UserPresenceManagerListener *arg2 = (XTools::UserPresenceManagerListener *) 0 ;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  arg2 = (XTools::UserPresenceManagerListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UserPresenceManager_GetMuteState(void * jarg1) {
  unsigned int jresult ;
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  bool result;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  result = (bool)((XTools::UserPresenceManager const *)arg1)->GetMuteState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManager_SetMuteState(void * jarg1, unsigned int jarg2) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  bool arg2 ;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMuteState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManager_SetName(void * jarg1, void * jarg2) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetName((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UserPresenceManager_GetName(void * jarg1) {
  void * jresult ;
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  result = ((XTools::UserPresenceManager const *)arg1)->GetName();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserPresenceManager_SetUser(void * jarg1, void * jarg2) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  XTools::UserPtr *arg2 = 0 ;
  XTools::UserPtr tempnull2 ;
  XTools::UserPtr temp2 ;
  XTools::User *smartarg2 ;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( User **)&jarg2; 
    temp2 = XTools::ref_ptr<  User >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetUser((XTools::UserPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserPresenceManager(void * jarg1) {
  XTools::UserPresenceManager *arg1 = (XTools::UserPresenceManager *) 0 ;
  
  arg1 = (XTools::UserPresenceManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientConfig(int jarg1) {
  void * jresult ;
  XTools::ClientRole arg1 ;
  XTools::ClientConfig *result = 0 ;
  
  arg1 = (XTools::ClientRole)jarg1; 
  result = (XTools::ClientConfig *)new XTools::ClientConfig(arg1);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientConfig_GetRole(void * jarg1) {
  int jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::ClientRole result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  result = (XTools::ClientRole)((XTools::ClientConfig const *)arg1)->GetRole();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ClientConfig_GetServerAddress(void * jarg1) {
  char * jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  std::string result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  result = ((XTools::ClientConfig const *)arg1)->GetServerAddress();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientConfig_SetServerAddress(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->SetServerAddress((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientConfig_GetServerPort(void * jarg1) {
  int jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  result = (XTools::int32)((XTools::ClientConfig const *)arg1)->GetServerPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientConfig_SetServerPort(void * jarg1, int jarg2) {
  unsigned int jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::int32 arg2 ;
  bool result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (bool)(arg1)->SetServerPort(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientConfig_GetLogWriter(void * jarg1) {
  void * jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::LogWriter *result = 0 ;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  result = (XTools::LogWriter *)((XTools::ClientConfig const *)arg1)->GetLogWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientConfig_SetLogWriter(void * jarg1, void * jarg2) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  XTools::LogWriter *arg2 = (XTools::LogWriter *) 0 ;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  arg2 = (XTools::LogWriter *)jarg2; 
  (arg1)->SetLogWriter(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientConfig_GetIsAudioEndpoint(void * jarg1) {
  unsigned int jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  result = (bool)((XTools::ClientConfig const *)arg1)->GetIsAudioEndpoint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientConfig_SetIsAudioEndpoint(void * jarg1, unsigned int jarg2) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsAudioEndpoint(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientConfig_GetProfilerEnabled(void * jarg1) {
  unsigned int jresult ;
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool result;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  result = (bool)((XTools::ClientConfig const *)arg1)->GetProfilerEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientConfig_SetProfilerEnabled(void * jarg1, unsigned int jarg2) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetProfilerEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientConfig(void * jarg1) {
  XTools::ClientConfig *arg1 = (XTools::ClientConfig *) 0 ;
  
  arg1 = (XTools::ClientConfig *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioManager_SetMicrophoneEnabled(void * jarg1, unsigned int jarg2) {
  XTools::AudioManager *arg1 = (XTools::AudioManager *) 0 ;
  bool arg2 ;
  
  arg1 = (XTools::AudioManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMicrophoneEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioManager(void * jarg1) {
  XTools::AudioManager *arg1 = (XTools::AudioManager *) 0 ;
  
  arg1 = (XTools::AudioManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProfileManager(void * jarg1) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  
  arg1 = (XTools::ProfileManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfileManager_BeginRange(void * jarg1, char * jarg2) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XTools::ProfileManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->BeginRange((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfileManager_EndRange(void * jarg1) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  
  arg1 = (XTools::ProfileManager *)jarg1; 
  (arg1)->EndRange();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProfileManager_Log(void * jarg1, int jarg2, char * jarg3) {
  XTools::ProfileManager *arg1 = (XTools::ProfileManager *) 0 ;
  XTools::LogSeverity arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (XTools::ProfileManager *)jarg1; 
  arg2 = (XTools::LogSeverity)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->Log(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Profile_BeginRange(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XTools::Profile::BeginRange((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Profile_EndRange() {
  XTools::Profile::EndRange();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Profile() {
  void * jresult ;
  XTools::Profile *result = 0 ;
  
  result = (XTools::Profile *)new XTools::Profile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Profile(void * jarg1) {
  XTools::Profile *arg1 = (XTools::Profile *) 0 ;
  
  arg1 = (XTools::Profile *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Room_GetName(void * jarg1) {
  void * jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::Room *)jarg1; 
  result = ((XTools::Room const *)arg1)->GetName();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Room_GetID(void * jarg1) {
  long long jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::RoomID result;
  
  arg1 = (XTools::Room *)jarg1; 
  result = (XTools::RoomID)((XTools::Room const *)arg1)->GetID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Room_GetUserCount(void * jarg1) {
  int jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::Room *)jarg1; 
  result = (XTools::int32)(arg1)->GetUserCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Room_GetUserID(void * jarg1, int jarg2) {
  int jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 arg2 ;
  XTools::UserID result;
  
  arg1 = (XTools::Room *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (XTools::UserID)(arg1)->GetUserID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Room_GetKeepOpen(void * jarg1) {
  unsigned int jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  bool result;
  
  arg1 = (XTools::Room *)jarg1; 
  result = (bool)((XTools::Room const *)arg1)->GetKeepOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_SetKeepOpen(void * jarg1, unsigned int jarg2) {
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  bool arg2 ;
  
  arg1 = (XTools::Room *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetKeepOpen(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Room_GetAnchorCount(void * jarg1) {
  int jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::Room *)jarg1; 
  result = (XTools::int32)((XTools::Room const *)arg1)->GetAnchorCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Room_GetAnchorName(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::Room *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (XTools::XStringPtr *) &((XTools::Room const *)arg1)->GetAnchorName(arg2);
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Room(void * jarg1) {
  XTools::Room *arg1 = (XTools::Room *) 0 ;
  
  arg1 = (XTools::Room *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnchorDownloadRequest_GetAnchorName(void * jarg1) {
  void * jresult ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::AnchorDownloadRequest *)jarg1; 
  result = ((XTools::AnchorDownloadRequest const *)arg1)->GetAnchorName();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnchorDownloadRequest_GetRoom(void * jarg1) {
  void * jresult ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::RoomPtr result;
  
  arg1 = (XTools::AnchorDownloadRequest *)jarg1; 
  result = ((XTools::AnchorDownloadRequest const *)arg1)->GetRoom();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = (&result)->get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnchorDownloadRequest_GetDataSize(void * jarg1) {
  int jresult ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::AnchorDownloadRequest *)jarg1; 
  result = (XTools::int32)((XTools::AnchorDownloadRequest const *)arg1)->GetDataSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnchorDownloadRequest_GetData(void * jarg1, unsigned char* jarg2, int jarg3) {
  unsigned int jresult ;
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  bool result;
  
  arg1 = (XTools::AnchorDownloadRequest *)jarg1; 
  arg2 = jarg2;
  arg3 = (XTools::int32)jarg3; 
  result = (bool)((XTools::AnchorDownloadRequest const *)arg1)->GetData(arg2,arg3);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AnchorDownloadRequest(void * jarg1) {
  XTools::AnchorDownloadRequest *arg1 = (XTools::AnchorDownloadRequest *) 0 ;
  
  arg1 = (XTools::AnchorDownloadRequest *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RoomManagerListener(void * jarg1) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnRoomAdded(void * jarg1, void * jarg2) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnRoomAdded((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnRoomAddedSwigExplicitRoomManagerListener(void * jarg1, void * jarg2) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::RoomManagerListener::OnRoomAdded((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnRoomClosed(void * jarg1, void * jarg2) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnRoomClosed((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnRoomClosedSwigExplicitRoomManagerListener(void * jarg1, void * jarg2) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::RoomManagerListener::OnRoomClosed((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnUserJoinedRoom(void * jarg1, void * jarg2, int jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->OnUserJoinedRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnUserJoinedRoomSwigExplicitRoomManagerListener(void * jarg1, void * jarg2, int jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->XTools::RoomManagerListener::OnUserJoinedRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnUserLeftRoom(void * jarg1, void * jarg2, int jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->OnUserLeftRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnUserLeftRoomSwigExplicitRoomManagerListener(void * jarg1, void * jarg2, int jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::UserID arg3 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::UserID)jarg3; 
  (arg1)->XTools::RoomManagerListener::OnUserLeftRoom((XTools::RoomPtr const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnAnchorsChanged(void * jarg1, void * jarg2) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnAnchorsChanged((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnAnchorsChangedSwigExplicitRoomManagerListener(void * jarg1, void * jarg2) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::RoomManagerListener::OnAnchorsChanged((XTools::RoomPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnAnchorsDownloaded(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::AnchorDownloadRequestPtr *arg3 = 0 ;
  XTools::XStringPtr *arg4 = 0 ;
  XTools::AnchorDownloadRequestPtr tempnull3 ;
  XTools::AnchorDownloadRequestPtr temp3 ;
  XTools::AnchorDownloadRequest *smartarg3 ;
  XTools::XStringPtr tempnull4 ;
  XTools::XStringPtr temp4 ;
  XTools::XString *smartarg4 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( AnchorDownloadRequest **)&jarg3; 
    temp3 = XTools::ref_ptr<  AnchorDownloadRequest >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( XString **)&jarg4; 
    temp4 = XTools::ref_ptr<  XString >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  (arg1)->OnAnchorsDownloaded(arg2,(XTools::AnchorDownloadRequestPtr const &)*arg3,(XTools::XStringPtr const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnAnchorsDownloadedSwigExplicitRoomManagerListener(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::AnchorDownloadRequestPtr *arg3 = 0 ;
  XTools::XStringPtr *arg4 = 0 ;
  XTools::AnchorDownloadRequestPtr tempnull3 ;
  XTools::AnchorDownloadRequestPtr temp3 ;
  XTools::AnchorDownloadRequest *smartarg3 ;
  XTools::XStringPtr tempnull4 ;
  XTools::XStringPtr temp4 ;
  XTools::XString *smartarg4 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( AnchorDownloadRequest **)&jarg3; 
    temp3 = XTools::ref_ptr<  AnchorDownloadRequest >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  
  // ref_ptr by reference in
  if ( jarg4 ) {
    smartarg4 = *( XString **)&jarg4; 
    temp4 = XTools::ref_ptr<  XString >(smartarg4);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  (arg1)->XTools::RoomManagerListener::OnAnchorsDownloaded(arg2,(XTools::AnchorDownloadRequestPtr const &)*arg3,(XTools::XStringPtr const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnAnchorUploadComplete(void * jarg1, unsigned int jarg2, void * jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->OnAnchorUploadComplete(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_OnAnchorUploadCompleteSwigExplicitRoomManagerListener(void * jarg1, unsigned int jarg2, void * jarg3) {
  XTools::RoomManagerListener *arg1 = (XTools::RoomManagerListener *) 0 ;
  bool arg2 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  
  arg1 = (XTools::RoomManagerListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  (arg1)->XTools::RoomManagerListener::OnAnchorUploadComplete(arg2,(XTools::XStringPtr const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RoomManagerListener() {
  void * jresult ;
  XTools::RoomManagerListener *result = 0 ;
  
  result = (XTools::RoomManagerListener *)new SwigDirector_RoomManagerListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManagerListener_director_connect(void *objarg, SwigDirector_RoomManagerListener::SWIG_Callback0_t callback0, SwigDirector_RoomManagerListener::SWIG_Callback1_t callback1, SwigDirector_RoomManagerListener::SWIG_Callback2_t callback2, SwigDirector_RoomManagerListener::SWIG_Callback3_t callback3, SwigDirector_RoomManagerListener::SWIG_Callback4_t callback4, SwigDirector_RoomManagerListener::SWIG_Callback5_t callback5, SwigDirector_RoomManagerListener::SWIG_Callback6_t callback6) {
  XTools::RoomManagerListener *obj = (XTools::RoomManagerListener *)objarg;
  SwigDirector_RoomManagerListener *director = dynamic_cast<SwigDirector_RoomManagerListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManager_AddListener(void * jarg1, void * jarg2) {
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomManagerListener *arg2 = (XTools::RoomManagerListener *) 0 ;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  arg2 = (XTools::RoomManagerListener *)jarg2; 
  (arg1)->AddListener(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomManager_RemoveListener(void * jarg1, void * jarg2) {
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomManagerListener *arg2 = (XTools::RoomManagerListener *) 0 ;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  arg2 = (XTools::RoomManagerListener *)jarg2; 
  (arg1)->RemoveListener(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RoomManager_GetRoomCount(void * jarg1) {
  int jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  result = (XTools::int32)((XTools::RoomManager const *)arg1)->GetRoomCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomManager_GetRoom(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::int32 arg2 ;
  XTools::RoomPtr result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetRoom(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = (&result)->get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomManager_GetCurrentRoom(void * jarg1) {
  void * jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  result = (arg1)->GetCurrentRoom();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = (&result)->get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomManager_CreateRoom(void * jarg1, void * jarg2, long long jarg3, unsigned int jarg4) {
  void * jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::RoomID arg3 ;
  bool arg4 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  XTools::RoomPtr result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::RoomID)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->CreateRoom((XTools::XStringPtr const &)*arg2,arg3,arg4);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( Room **)&jresult = (&result)->get();
  } else {
    *( Room **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RoomManager_JoinRoom(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  bool result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  result = (bool)(arg1)->JoinRoom((XTools::RoomPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RoomManager_LeaveRoom(void * jarg1) {
  unsigned int jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  bool result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  result = (bool)(arg1)->LeaveRoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RoomManager_DownloadAnchor(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  bool result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  result = (bool)(arg1)->DownloadAnchor((XTools::RoomPtr const &)*arg2,(XTools::XStringPtr const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RoomManager_UploadAnchor(void * jarg1, void * jarg2, void * jarg3, unsigned char* jarg4, int jarg5) {
  unsigned int jresult ;
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  XTools::RoomPtr *arg2 = 0 ;
  XTools::XStringPtr *arg3 = 0 ;
  XTools::byte *arg4 = (XTools::byte *) 0 ;
  XTools::int32 arg5 ;
  XTools::RoomPtr tempnull2 ;
  XTools::RoomPtr temp2 ;
  XTools::Room *smartarg2 ;
  XTools::XStringPtr tempnull3 ;
  XTools::XStringPtr temp3 ;
  XTools::XString *smartarg3 ;
  bool result;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( Room **)&jarg2; 
    temp2 = XTools::ref_ptr<  Room >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  
  // ref_ptr by reference in
  if ( jarg3 ) {
    smartarg3 = *( XString **)&jarg3; 
    temp3 = XTools::ref_ptr<  XString >(smartarg3);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  arg4 = jarg4;
  arg5 = (XTools::int32)jarg5; 
  result = (bool)(arg1)->UploadAnchor((XTools::RoomPtr const &)*arg2,(XTools::XStringPtr const &)*arg3,(XTools::byte const *)arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RoomManager(void * jarg1) {
  XTools::RoomManager *arg1 = (XTools::RoomManager *) 0 ;
  
  arg1 = (XTools::RoomManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Settings() {
  void * jresult ;
  XTools::Settings *result = 0 ;
  
  result = (XTools::Settings *)new XTools::Settings();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Settings_GetServerAddress(void * jarg1) {
  void * jresult ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::Settings *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Settings const *)arg1)->GetServerAddress();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_GetServerPort(void * jarg1) {
  int jresult ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::Settings *)jarg1; 
  result = (XTools::int32)((XTools::Settings const *)arg1)->GetServerPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Settings_GetViewerAddress(void * jarg1) {
  void * jresult ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::Settings *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Settings const *)arg1)->GetViewerAddress();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Settings_GetViewerPort(void * jarg1) {
  int jresult ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::Settings *)jarg1; 
  result = (XTools::int32)((XTools::Settings const *)arg1)->GetViewerPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Settings_GetLocalUserName(void * jarg1) {
  void * jresult ;
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  XTools::XStringPtr *result = 0 ;
  
  arg1 = (XTools::Settings *)jarg1; 
  result = (XTools::XStringPtr *) &((XTools::Settings const *)arg1)->GetLocalUserName();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( XString **)&jresult = result->get();
  } else {
    *( XString **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Settings(void * jarg1) {
  XTools::Settings *arg1 = (XTools::Settings *) 0 ;
  
  arg1 = (XTools::Settings *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairMaker_IsReceiver(void * jarg1) {
  unsigned int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (bool)(arg1)->IsReceiver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairMaker_IsReceiverSwigExplicitPairMaker(void * jarg1) {
  unsigned int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (bool)(arg1)->XTools::PairMaker::IsReceiver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PairMaker_GetAddressCount(void * jarg1) {
  int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::int32)(arg1)->GetAddressCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PairMaker_GetAddress(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PairMaker_GetAddressSwigExplicitPairMaker(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->XTools::PairMaker::GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PairMaker_GetPort(void * jarg1) {
  unsigned short jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::uint16 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::uint16)(arg1)->GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PairMaker_GetPortSwigExplicitPairMaker(void * jarg1) {
  unsigned short jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::uint16 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::uint16)(arg1)->XTools::PairMaker::GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairMaker_Update(void * jarg1) {
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairMaker_UpdateSwigExplicitPairMaker(void * jarg1) {
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  (arg1)->XTools::PairMaker::Update();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairMaker_IsReadyToConnect(void * jarg1) {
  unsigned int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (bool)(arg1)->IsReadyToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairMaker_IsReadyToConnectSwigExplicitPairMaker(void * jarg1) {
  unsigned int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  bool result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (bool)(arg1)->XTools::PairMaker::IsReadyToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PairMaker_GetLocalKey(void * jarg1) {
  int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::int32)(arg1)->GetLocalKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PairMaker_GetLocalKeySwigExplicitPairMaker(void * jarg1) {
  int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::int32)(arg1)->XTools::PairMaker::GetLocalKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PairMaker_GetRemoteKey(void * jarg1) {
  int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::int32)(arg1)->GetRemoteKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PairMaker_GetRemoteKeySwigExplicitPairMaker(void * jarg1) {
  int jresult ;
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  result = (XTools::int32)(arg1)->XTools::PairMaker::GetRemoteKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PairMaker() {
  void * jresult ;
  XTools::PairMaker *result = 0 ;
  
  result = (XTools::PairMaker *)new SwigDirector_PairMaker();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PairMaker(void * jarg1) {
  XTools::PairMaker *arg1 = (XTools::PairMaker *) 0 ;
  
  arg1 = (XTools::PairMaker *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairMaker_director_connect(void *objarg, SwigDirector_PairMaker::SWIG_Callback0_t callback0, SwigDirector_PairMaker::SWIG_Callback1_t callback1, SwigDirector_PairMaker::SWIG_Callback2_t callback2, SwigDirector_PairMaker::SWIG_Callback3_t callback3, SwigDirector_PairMaker::SWIG_Callback4_t callback4, SwigDirector_PairMaker::SWIG_Callback5_t callback5, SwigDirector_PairMaker::SWIG_Callback6_t callback6, SwigDirector_PairMaker::SWIG_Callback7_t callback7) {
  XTools::PairMaker *obj = (XTools::PairMaker *)objarg;
  SwigDirector_PairMaker *director = dynamic_cast<SwigDirector_PairMaker *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingListener_PairingConnectionSucceeded(void * jarg1) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  
  arg1 = (XTools::PairingListener *)jarg1; 
  (arg1)->PairingConnectionSucceeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingListener_PairingConnectionSucceededSwigExplicitPairingListener(void * jarg1) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  
  arg1 = (XTools::PairingListener *)jarg1; 
  (arg1)->XTools::PairingListener::PairingConnectionSucceeded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingListener_PairingConnectionFailed(void * jarg1, int jarg2) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  XTools::PairingResult arg2 ;
  
  arg1 = (XTools::PairingListener *)jarg1; 
  arg2 = (XTools::PairingResult)jarg2; 
  (arg1)->PairingConnectionFailed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingListener_PairingConnectionFailedSwigExplicitPairingListener(void * jarg1, int jarg2) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  XTools::PairingResult arg2 ;
  
  arg1 = (XTools::PairingListener *)jarg1; 
  arg2 = (XTools::PairingResult)jarg2; 
  (arg1)->XTools::PairingListener::PairingConnectionFailed(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PairingListener() {
  void * jresult ;
  XTools::PairingListener *result = 0 ;
  
  result = (XTools::PairingListener *)new SwigDirector_PairingListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PairingListener(void * jarg1) {
  XTools::PairingListener *arg1 = (XTools::PairingListener *) 0 ;
  
  arg1 = (XTools::PairingListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingListener_director_connect(void *objarg, SwigDirector_PairingListener::SWIG_Callback0_t callback0, SwigDirector_PairingListener::SWIG_Callback1_t callback1) {
  XTools::PairingListener *obj = (XTools::PairingListener *)objarg;
  SwigDirector_PairingListener *director = dynamic_cast<SwigDirector_PairingListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairingManager_HasPairingInfo(void * jarg1) {
  unsigned int jresult ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  bool result;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  result = (bool)((XTools::PairingManager const *)arg1)->HasPairingInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingManager_ClearPairingInfo(void * jarg1) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  (arg1)->ClearPairingInfo();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairingManager_BeginConnecting(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  XTools::PairingListener *arg2 = (XTools::PairingListener *) 0 ;
  bool result;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  arg2 = (XTools::PairingListener *)jarg2; 
  result = (bool)(arg1)->BeginConnecting(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingManager_CancelConnecting(void * jarg1) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  (arg1)->CancelConnecting();
}


SWIGEXPORT int SWIGSTDCALL CSharp_PairingManager_BeginPairing(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  XTools::PairMakerPtr *arg2 = 0 ;
  XTools::PairingListener *arg3 = (XTools::PairingListener *) 0 ;
  XTools::PairMakerPtr tempnull2 ;
  XTools::PairMakerPtr temp2 ;
  XTools::PairMaker *smartarg2 ;
  XTools::PairingResult result;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( PairMaker **)&jarg2; 
    temp2 = XTools::ref_ptr<  PairMaker >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::PairingListener *)jarg3; 
  result = (XTools::PairingResult)(arg1)->BeginPairing((XTools::PairMakerPtr const &)*arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairingManager_CancelPairing(void * jarg1) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  (arg1)->CancelPairing();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairingManager_IsPairing(void * jarg1) {
  unsigned int jresult ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  bool result;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  result = (bool)((XTools::PairingManager const *)arg1)->IsPairing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PairingManager_IsConnected(void * jarg1) {
  unsigned int jresult ;
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  bool result;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  result = (bool)((XTools::PairingManager const *)arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PairingManager(void * jarg1) {
  XTools::PairingManager *arg1 = (XTools::PairingManager *) 0 ;
  
  arg1 = (XTools::PairingManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_Create(void * jarg1) {
  void * jresult ;
  XTools::ClientConfigPtr *arg1 = 0 ;
  XTools::ClientConfigPtr tempnull1 ;
  XTools::ClientConfigPtr temp1 ;
  XTools::ClientConfig *smartarg1 ;
  XTools::ref_ptr< XTools::SharingManager > result;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( ClientConfig **)&jarg1; 
    temp1 = XTools::ref_ptr<  ClientConfig >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = XTools::SharingManager::Create((XTools::ref_ptr< XTools::ClientConfig > const &)*arg1);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( SharingManager **)&jresult = (&result)->get();
  } else {
    *( SharingManager **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetSessionManager(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::SessionManagerPtr *result = 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (XTools::SessionManagerPtr *) &((XTools::SharingManager const *)arg1)->GetSessionManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( SessionManager **)&jresult = result->get();
  } else {
    *( SessionManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetUserPresenceManager(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::UserPresenceManagerPtr *result = 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (XTools::UserPresenceManagerPtr *) &((XTools::SharingManager const *)arg1)->GetUserPresenceManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( UserPresenceManager **)&jresult = result->get();
  } else {
    *( UserPresenceManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetAudioManager(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::AudioManagerPtr *result = 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (XTools::AudioManagerPtr *) &((XTools::SharingManager const *)arg1)->GetAudioManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( AudioManager **)&jresult = result->get();
  } else {
    *( AudioManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetPairingManager(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::PairingManagerPtr *result = 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (XTools::PairingManagerPtr *) &((XTools::SharingManager const *)arg1)->GetPairingManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( PairingManager **)&jresult = result->get();
  } else {
    *( PairingManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetRoomManager(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::RoomManagerPtr *result = 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (XTools::RoomManagerPtr *) &((XTools::SharingManager const *)arg1)->GetRoomManager();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( RoomManager **)&jresult = result->get();
  } else {
    *( RoomManager **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetRootSyncObject(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::ObjectElementPtr result;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (arg1)->GetRootSyncObject();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ObjectElement **)&jresult = (&result)->get();
  } else {
    *( ObjectElement **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SharingManager_RegisterSyncListener(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::SyncListener *arg2 = (XTools::SyncListener *) 0 ;
  bool result;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  arg2 = (XTools::SyncListener *)jarg2; 
  result = (bool)(arg1)->RegisterSyncListener(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharingManager_Update(void * jarg1) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetPairedConnection(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::NetworkConnectionPtr result;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (arg1)->GetPairedConnection();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkConnection **)&jresult = (&result)->get();
  } else {
    *( NetworkConnection **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetServerConnection(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::NetworkConnectionPtr result;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (arg1)->GetServerConnection();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( NetworkConnection **)&jresult = (&result)->get();
  } else {
    *( NetworkConnection **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetSettings(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::SettingsPtr *result = 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (XTools::SettingsPtr *) &(arg1)->GetSettings();
  
  // ref_ptr by reference out
  if (*result) {
    result->get()->AddRef();
    *( Settings **)&jresult = result->get();
  } else {
    *( Settings **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharingManager_SetServerConnectionInfo(void * jarg1, void * jarg2, unsigned int jarg3) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::uint32 arg3 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (XTools::uint32)jarg3; 
  (arg1)->SetServerConnectionInfo((XTools::XStringPtr const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharingManager_GetLocalUser(void * jarg1) {
  void * jresult ;
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::UserPtr result;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  result = (arg1)->GetLocalUser();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( User **)&jresult = (&result)->get();
  } else {
    *( User **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharingManager_SetUserName(void * jarg1, void * jarg2) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetUserName((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharingManager(void * jarg1) {
  XTools::SharingManager *arg1 = (XTools::SharingManager *) 0 ;
  
  arg1 = (XTools::SharingManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageTagLocation(void * jarg1) {
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  
  arg1 = (XTools::ImageTagLocation *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageTagLocation_GetTagId(void * jarg1) {
  int jresult ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  int result;
  
  arg1 = (XTools::ImageTagLocation *)jarg1; 
  result = (int)(arg1)->GetTagId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageTagLocation_GetPixelX(void * jarg1, int jarg2) {
  float jresult ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  XTools::ImageTagLocationType arg2 ;
  float result;
  
  arg1 = (XTools::ImageTagLocation *)jarg1; 
  arg2 = (XTools::ImageTagLocationType)jarg2; 
  result = (float)(arg1)->GetPixelX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageTagLocation_GetPixelY(void * jarg1, int jarg2) {
  float jresult ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  XTools::ImageTagLocationType arg2 ;
  float result;
  
  arg1 = (XTools::ImageTagLocation *)jarg1; 
  arg2 = (XTools::ImageTagLocationType)jarg2; 
  result = (float)(arg1)->GetPixelY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageTagLocation_GetModelViewMatrix(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  float jresult ;
  XTools::ImageTagLocation *arg1 = (XTools::ImageTagLocation *) 0 ;
  XTools::int32 arg2 ;
  XTools::int32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float result;
  
  arg1 = (XTools::ImageTagLocation *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  arg3 = (XTools::int32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  result = (float)(arg1)->GetModelViewMatrix(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageTagLocationListener(void * jarg1) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  
  arg1 = (XTools::ImageTagLocationListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTagLocationListener_OnTagLocated(void * jarg1, void * jarg2) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  XTools::ImageTagLocationPtr *arg2 = 0 ;
  XTools::ImageTagLocationPtr tempnull2 ;
  XTools::ImageTagLocationPtr temp2 ;
  XTools::ImageTagLocation *smartarg2 ;
  
  arg1 = (XTools::ImageTagLocationListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ImageTagLocation **)&jarg2; 
    temp2 = XTools::ref_ptr<  ImageTagLocation >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->OnTagLocated((XTools::ImageTagLocationPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTagLocationListener_OnTagLocatedSwigExplicitImageTagLocationListener(void * jarg1, void * jarg2) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  XTools::ImageTagLocationPtr *arg2 = 0 ;
  XTools::ImageTagLocationPtr tempnull2 ;
  XTools::ImageTagLocationPtr temp2 ;
  XTools::ImageTagLocation *smartarg2 ;
  
  arg1 = (XTools::ImageTagLocationListener *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( ImageTagLocation **)&jarg2; 
    temp2 = XTools::ref_ptr<  ImageTagLocation >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->XTools::ImageTagLocationListener::OnTagLocated((XTools::ImageTagLocationPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTagLocationListener_OnTagLocatingCompleted(void * jarg1) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  
  arg1 = (XTools::ImageTagLocationListener *)jarg1; 
  (arg1)->OnTagLocatingCompleted();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTagLocationListener_OnTagLocatingCompletedSwigExplicitImageTagLocationListener(void * jarg1) {
  XTools::ImageTagLocationListener *arg1 = (XTools::ImageTagLocationListener *) 0 ;
  
  arg1 = (XTools::ImageTagLocationListener *)jarg1; 
  (arg1)->XTools::ImageTagLocationListener::OnTagLocatingCompleted();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageTagLocationListener() {
  void * jresult ;
  XTools::ImageTagLocationListener *result = 0 ;
  
  result = (XTools::ImageTagLocationListener *)new SwigDirector_ImageTagLocationListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTagLocationListener_director_connect(void *objarg, SwigDirector_ImageTagLocationListener::SWIG_Callback0_t callback0, SwigDirector_ImageTagLocationListener::SWIG_Callback1_t callback1) {
  XTools::ImageTagLocationListener *obj = (XTools::ImageTagLocationListener *)objarg;
  SwigDirector_ImageTagLocationListener *director = dynamic_cast<SwigDirector_ImageTagLocationListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagImage_GetWidth(void * jarg1) {
  int jresult ;
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::TagImage *)jarg1; 
  result = (XTools::int32)((XTools::TagImage const *)arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TagImage_GetHeight(void * jarg1) {
  int jresult ;
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::TagImage *)jarg1; 
  result = (XTools::int32)((XTools::TagImage const *)arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TagImage_CopyImageData(void * jarg1, unsigned char* jarg2, int jarg3, int jarg4) {
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  XTools::int32 arg4 ;
  
  arg1 = (XTools::TagImage *)jarg1; 
  arg2 = jarg2;
  arg3 = (XTools::int32)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  ((XTools::TagImage const *)arg1)->CopyImageData(arg2,arg3,arg4);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TagImage(void * jarg1) {
  XTools::TagImage *arg1 = (XTools::TagImage *) 0 ;
  
  arg1 = (XTools::TagImage *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageTagManager(void * jarg1) {
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  
  arg1 = (XTools::ImageTagManager *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTagManager_Update(void * jarg1) {
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  
  arg1 = (XTools::ImageTagManager *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageTagManager_FindTags(void * jarg1, unsigned char* jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  XTools::int32 arg4 ;
  XTools::int32 arg5 ;
  XTools::ImageTagLocationListener *arg6 = (XTools::ImageTagLocationListener *) 0 ;
  bool result;
  
  arg1 = (XTools::ImageTagManager *)jarg1; 
  arg2 = jarg2;
  arg3 = (XTools::int32)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  arg5 = (XTools::int32)jarg5; 
  arg6 = (XTools::ImageTagLocationListener *)jarg6; 
  result = (bool)(arg1)->FindTags((XTools::byte const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageTagManager_CreateTagImage(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::ImageTagManager *arg1 = (XTools::ImageTagManager *) 0 ;
  XTools::int32 arg2 ;
  XTools::TagImagePtr result;
  
  arg1 = (XTools::ImageTagManager *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = ((XTools::ImageTagManager const *)arg1)->CreateTagImage(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( TagImage **)&jresult = (&result)->get();
  } else {
    *( TagImage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageTagManager_Create() {
  void * jresult ;
  XTools::ref_ptr< XTools::ImageTagManager > result;
  
  result = XTools::ImageTagManager::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( ImageTagManager **)&jresult = (&result)->get();
  } else {
    *( ImageTagManager **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectPairConnector__SWIG_0() {
  void * jresult ;
  XTools::DirectPairConnector *result = 0 ;
  
  result = (XTools::DirectPairConnector *)new XTools::DirectPairConnector();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectPairConnector__SWIG_1(void * jarg1) {
  void * jresult ;
  XTools::XStringPtr *arg1 = 0 ;
  XTools::XStringPtr tempnull1 ;
  XTools::XStringPtr temp1 ;
  XTools::XString *smartarg1 ;
  XTools::DirectPairConnector *result = 0 ;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( XString **)&jarg1; 
    temp1 = XTools::ref_ptr<  XString >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  result = (XTools::DirectPairConnector *)new XTools::DirectPairConnector((XTools::XStringPtr const &)*arg1);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectPairConnector__SWIG_2(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  XTools::XStringPtr *arg1 = 0 ;
  XTools::uint16 arg2 ;
  XTools::XStringPtr tempnull1 ;
  XTools::XStringPtr temp1 ;
  XTools::XString *smartarg1 ;
  XTools::DirectPairConnector *result = 0 ;
  
  
  // ref_ptr by reference in
  if ( jarg1 ) {
    smartarg1 = *( XString **)&jarg1; 
    temp1 = XTools::ref_ptr<  XString >(smartarg1);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  arg2 = (XTools::uint16)jarg2; 
  result = (XTools::DirectPairConnector *)new XTools::DirectPairConnector((XTools::XStringPtr const &)*arg1,arg2);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectPairConnector_IsReceiver(void * jarg1) {
  unsigned int jresult ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  bool result;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  result = (bool)(arg1)->IsReceiver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirectPairConnector_GetAddressCount(void * jarg1) {
  int jresult ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  result = (XTools::int32)(arg1)->GetAddressCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectPairConnector_GetAddress(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DirectPairConnector_GetPort(void * jarg1) {
  unsigned short jresult ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::uint16 result;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  result = (XTools::uint16)(arg1)->GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectPairConnector_Update(void * jarg1) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectPairConnector_IsReadyToConnect(void * jarg1) {
  unsigned int jresult ;
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  bool result;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  result = (bool)(arg1)->IsReadyToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectPairConnector_SetRemoteAddress(void * jarg1, void * jarg2) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::XStringPtr *arg2 = 0 ;
  XTools::XStringPtr tempnull2 ;
  XTools::XStringPtr temp2 ;
  XTools::XString *smartarg2 ;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  
  // ref_ptr by reference in
  if ( jarg2 ) {
    smartarg2 = *( XString **)&jarg2; 
    temp2 = XTools::ref_ptr<  XString >(smartarg2);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  (arg1)->SetRemoteAddress((XTools::XStringPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectPairConnector_SetRemotePort(void * jarg1, unsigned short jarg2) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  XTools::uint16 arg2 ;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  arg2 = (XTools::uint16)jarg2; 
  (arg1)->SetRemotePort(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectPairConnector(void * jarg1) {
  XTools::DirectPairConnector *arg1 = (XTools::DirectPairConnector *) 0 ;
  
  arg1 = (XTools::DirectPairConnector *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectPairReceiver__SWIG_0() {
  void * jresult ;
  XTools::DirectPairReceiver *result = 0 ;
  
  result = (XTools::DirectPairReceiver *)new XTools::DirectPairReceiver();
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectPairReceiver__SWIG_1(unsigned short jarg1) {
  void * jresult ;
  XTools::uint16 arg1 ;
  XTools::DirectPairReceiver *result = 0 ;
  
  arg1 = (XTools::uint16)jarg1; 
  result = (XTools::DirectPairReceiver *)new XTools::DirectPairReceiver(arg1);
  jresult = (void *)result; 
  if(result) result->AddRef();
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectPairReceiver_IsReceiver(void * jarg1) {
  unsigned int jresult ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  bool result;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  result = (bool)(arg1)->IsReceiver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirectPairReceiver_GetAddressCount(void * jarg1) {
  int jresult ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::int32 result;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  result = (XTools::int32)(arg1)->GetAddressCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectPairReceiver_GetAddress(void * jarg1, int jarg2) {
  void * jresult ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::int32 arg2 ;
  XTools::XStringPtr result;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  arg2 = (XTools::int32)jarg2; 
  result = (arg1)->GetAddress(arg2);
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( XString **)&jresult = (&result)->get();
  } else {
    *( XString **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DirectPairReceiver_GetPort(void * jarg1) {
  unsigned short jresult ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::uint16 result;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  result = (XTools::uint16)(arg1)->GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectPairReceiver_Update(void * jarg1) {
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectPairReceiver_IsReadyToConnect(void * jarg1) {
  unsigned int jresult ;
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  bool result;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  result = (bool)(arg1)->IsReadyToConnect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectPairReceiver_SetIncomingPort(void * jarg1, unsigned short jarg2) {
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  XTools::uint16 arg2 ;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  arg2 = (XTools::uint16)jarg2; 
  (arg1)->SetIncomingPort(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectPairReceiver(void * jarg1) {
  XTools::DirectPairReceiver *arg1 = (XTools::DirectPairReceiver *) 0 ;
  
  arg1 = (XTools::DirectPairReceiver *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualPairReceiver_Create() {
  void * jresult ;
  XTools::ref_ptr< XTools::VisualPairReceiver > result;
  
  result = XTools::VisualPairReceiver::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( VisualPairReceiver **)&jresult = (&result)->get();
  } else {
    *( VisualPairReceiver **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualPairReceiver_CreateTagImage(void * jarg1) {
  void * jresult ;
  XTools::VisualPairReceiver *arg1 = (XTools::VisualPairReceiver *) 0 ;
  XTools::TagImagePtr result;
  
  arg1 = (XTools::VisualPairReceiver *)jarg1; 
  result = ((XTools::VisualPairReceiver const *)arg1)->CreateTagImage();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( TagImage **)&jresult = (&result)->get();
  } else {
    *( TagImage **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VisualPairReceiver(void * jarg1) {
  XTools::VisualPairReceiver *arg1 = (XTools::VisualPairReceiver *) 0 ;
  
  arg1 = (XTools::VisualPairReceiver *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualPairConnector_Create() {
  void * jresult ;
  XTools::ref_ptr< XTools::VisualPairConnector > result;
  
  result = XTools::VisualPairConnector::Create();
  
  // ref_ptr by value out
  if (result) {
    result->AddRef();
    *( VisualPairConnector **)&jresult = (&result)->get();
  } else {
    *( VisualPairConnector **)&jresult = 0; 
  }
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualPairConnector_ProcessImage(void * jarg1, unsigned char* jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  XTools::VisualPairConnector *arg1 = (XTools::VisualPairConnector *) 0 ;
  XTools::byte *arg2 = (XTools::byte *) 0 ;
  XTools::int32 arg3 ;
  XTools::int32 arg4 ;
  XTools::int32 arg5 ;
  bool result;
  
  arg1 = (XTools::VisualPairConnector *)jarg1; 
  arg2 = jarg2;
  arg3 = (XTools::int32)jarg3; 
  arg4 = (XTools::int32)jarg4; 
  arg5 = (XTools::int32)jarg5; 
  result = (bool)(arg1)->ProcessImage(arg2,arg3,arg4,arg5);
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualPairConnector_IsProcessingImage(void * jarg1) {
  unsigned int jresult ;
  XTools::VisualPairConnector *arg1 = (XTools::VisualPairConnector *) 0 ;
  bool result;
  
  arg1 = (XTools::VisualPairConnector *)jarg1; 
  result = (bool)((XTools::VisualPairConnector const *)arg1)->IsProcessingImage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VisualPairConnector(void * jarg1) {
  XTools::VisualPairConnector *arg1 = (XTools::VisualPairConnector *) 0 ;
  
  arg1 = (XTools::VisualPairConnector *)jarg1; 
  if(arg1) arg1->RemoveRef();
}


SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_NetworkConnectionListener_SWIGUpcast(XTools::NetworkConnectionListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_BoolElement_SWIGUpcast(XTools::BoolElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_IntElement_SWIGUpcast(XTools::IntElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_LongElement_SWIGUpcast(XTools::LongElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_FloatElement_SWIGUpcast(XTools::FloatElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_DoubleElement_SWIGUpcast(XTools::DoubleElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_StringElement_SWIGUpcast(XTools::StringElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_IntArrayListener_SWIGUpcast(XTools::IntArrayListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_IntArrayElement_SWIGUpcast(XTools::IntArrayElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_ObjectElementListener_SWIGUpcast(XTools::ObjectElementListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Element * SWIGSTDCALL CSharp_ObjectElement_SWIGUpcast(XTools::ObjectElement *jarg1) {
    return (XTools::Element *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_SyncListener_SWIGUpcast(XTools::SyncListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_SessionListener_SWIGUpcast(XTools::SessionListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_SessionManagerListener_SWIGUpcast(XTools::SessionManagerListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_UserPresenceManagerListener_SWIGUpcast(XTools::UserPresenceManagerListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_RoomManagerListener_SWIGUpcast(XTools::RoomManagerListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_PairingListener_SWIGUpcast(XTools::PairingListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::Listener * SWIGSTDCALL CSharp_ImageTagLocationListener_SWIGUpcast(XTools::ImageTagLocationListener *jarg1) {
    return (XTools::Listener *)jarg1;
}

SWIGEXPORT XTools::PairMaker * SWIGSTDCALL CSharp_DirectPairConnector_SWIGUpcast(XTools::DirectPairConnector *jarg1) {
    return (XTools::PairMaker *)jarg1;
}

SWIGEXPORT XTools::PairMaker * SWIGSTDCALL CSharp_DirectPairReceiver_SWIGUpcast(XTools::DirectPairReceiver *jarg1) {
    return (XTools::PairMaker *)jarg1;
}

SWIGEXPORT XTools::PairMaker * SWIGSTDCALL CSharp_VisualPairReceiver_SWIGUpcast(XTools::VisualPairReceiver *jarg1) {
    return (XTools::PairMaker *)jarg1;
}

SWIGEXPORT XTools::PairMaker * SWIGSTDCALL CSharp_VisualPairConnector_SWIGUpcast(XTools::VisualPairConnector *jarg1) {
    return (XTools::PairMaker *)jarg1;
}

#ifdef __cplusplus
}
#endif

