diff --git a/sandbox/mac/launchd_interception_server.cc b/sandbox/mac/launchd_interception_server.cc
index 167fbab..ea009b4 100644
--- a/sandbox/mac/launchd_interception_server.cc
+++ b/sandbox/mac/launchd_interception_server.cc
@@ -172,8 +172,10 @@ void LaunchdInterceptionServer::ForwardMessage(IPCMessage request) {
   // as if it were coming from the sandbox host process (this).
   if (xpc_launchd_) {
     // xpc_dictionary_set_mach_send increments the send right count.
+#ifndef MAS_BUILD
     xpc_dictionary_set_mach_send(request.xpc, "domain-port",
                                  sandbox_->real_bootstrap_port());
+#endif
   }
 
   message_server_->ForwardMessage(request, sandbox_->real_bootstrap_port());
diff --git a/sandbox/mac/os_compatibility.cc b/sandbox/mac/os_compatibility.cc
index e15e9cf..194e9f3 100644
--- a/sandbox/mac/os_compatibility.cc
+++ b/sandbox/mac/os_compatibility.cc
@@ -157,7 +157,9 @@ class OSCompatibility_10_10 : public OSCompatibility {
 
   void WriteServiceLookUpReply(IPCMessage message,
                                mach_port_t service_port) override {
+#ifndef MAS_BUILD
     xpc_dictionary_set_mach_send(message.xpc, "port", service_port);
+#endif
   }
 
   bool IsSwapIntegerReadOnly(const IPCMessage message) override {
diff --git a/sandbox/mac/pre_exec_delegate.cc b/sandbox/mac/pre_exec_delegate.cc
index 1aac68b..f60b76d 100644
--- a/sandbox/mac/pre_exec_delegate.cc
+++ b/sandbox/mac/pre_exec_delegate.cc
@@ -70,7 +70,9 @@ xpc_object_t PreExecDelegate::CreateBootstrapLookUpMessage() {
     xpc_dictionary_set_uint64(dictionary, "routine", 207);
     // Add a NULL port so that the slot in the dictionary is already
     // allocated.
+#ifndef MAS_BUILD
     xpc_dictionary_set_mach_send(dictionary, "domain-port", MACH_PORT_NULL);
+#endif
     return dictionary;
   }
 
@@ -79,6 +81,7 @@ xpc_object_t PreExecDelegate::CreateBootstrapLookUpMessage() {
 
 kern_return_t PreExecDelegate::DoBootstrapLookUp(mach_port_t* out_port) {
   if (is_yosemite_or_later_) {
+#ifndef MAS_BUILD
     xpc_dictionary_set_mach_send(look_up_message_, "domain-port",
         bootstrap_port);
 
@@ -94,6 +97,9 @@ kern_return_t PreExecDelegate::DoBootstrapLookUp(mach_port_t* out_port) {
       *out_port = xpc_mach_send_get_right(port_value);
       return *out_port != MACH_PORT_NULL ? KERN_SUCCESS : KERN_INVALID_RIGHT;
     }
+#else
+    return KERN_SUCCESS;
+#endif
   } else {
     // On non-XPC launchd systems, bootstrap_look_up() is MIG-based and
     // generally safe.
diff --git a/sandbox/mac/xpc_message_server.cc b/sandbox/mac/xpc_message_server.cc
index 858c7dd..df0ab5d 100644
--- a/sandbox/mac/xpc_message_server.cc
+++ b/sandbox/mac/xpc_message_server.cc
@@ -52,7 +52,9 @@ void XPCMessageServer::Shutdown() {
 
 pid_t XPCMessageServer::GetMessageSenderPID(IPCMessage request) {
   audit_token_t token;
+#ifndef MAS_BUILD
   xpc_dictionary_get_audit_token(request.xpc, &token);
+#endif
   pid_t sender_pid = audit_token_to_pid(token);
   return sender_pid;
 }
@@ -70,22 +72,26 @@ bool XPCMessageServer::SendReply(IPCMessage reply) {
   if (!reply.xpc)
     return false;
 
+#ifndef MAS_BUILD
   int rv = xpc_pipe_routine_reply(reply.xpc);
   if (rv) {
     LOG(ERROR) << "Failed to xpc_pipe_routine_reply(): " << rv;
     return false;
   }
+#endif
   return true;
 }
 
 void XPCMessageServer::ForwardMessage(IPCMessage request,
                                       mach_port_t destination) {
+#ifndef MAS_BUILD
   xpc_pipe_t pipe = xpc_pipe_create_from_port(destination, 0);
   int rv = xpc_pipe_routine_forward(pipe, request.xpc);
   if (rv) {
     LOG(ERROR) << "Failed to xpc_pipe_routine_forward(): " << rv;
   }
   xpc_release(pipe);
+#endif
 }
 
 void XPCMessageServer::RejectMessage(IPCMessage request, int error_code) {
@@ -102,6 +108,7 @@ mach_port_t XPCMessageServer::GetServerPort() const {
 }
 
 void XPCMessageServer::ReceiveMessage() {
+#ifndef MAS_BUILD
   IPCMessage request;
   int rv = xpc_pipe_receive(server_port_.get(), &request.xpc);
   if (rv) {
@@ -116,6 +123,7 @@ void XPCMessageServer::ReceiveMessage() {
     xpc_release(reply_message_);
     reply_message_ = NULL;
   }
+#endif
 }
 
 }  // namespace sandbox
