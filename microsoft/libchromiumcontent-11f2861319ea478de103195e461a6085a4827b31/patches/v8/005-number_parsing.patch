diff --git a/src/inspector/DEPS b/src/inspector/DEPS
index 2d77fb7aa7..b69626cdb8 100644
--- a/src/inspector/DEPS
+++ b/src/inspector/DEPS
@@ -6,6 +6,7 @@ include_rules = [
   "+src/base/logging.h",
   "+src/base/platform/platform.h",
   "+src/conversions.h",
+  "+src/unicode-cache.h",
   "+src/inspector",
   "+src/tracing",
   "+src/debug/debug-interface.h",
diff --git a/src/inspector/string-util.cc b/src/inspector/string-util.cc
index 31b2db572d..95d4247d14 100644
--- a/src/inspector/string-util.cc
+++ b/src/inspector/string-util.cc
@@ -4,7 +4,9 @@
 
 #include "src/inspector/string-util.h"
 
+#include "src/conversions.h"
 #include "src/inspector/protocol/Protocol.h"
+#include "src/unicode-cache.h"
 
 namespace v8_inspector {
 
@@ -92,6 +94,16 @@ bool stringViewStartsWith(const StringView& string, const char* prefix) {
 
 namespace protocol {
 
+// static
+double StringUtil::toDouble(const char* s, size_t len, bool* isOk) {
+  v8::internal::UnicodeCache unicode_cache;
+  int flags = v8::internal::ALLOW_HEX | v8::internal::ALLOW_OCTAL |
+              v8::internal::ALLOW_BINARY;
+  double result = StringToDouble(&unicode_cache, s, flags);
+  *isOk = !std::isnan(result);
+  return result;
+}
+
 std::unique_ptr<protocol::Value> StringUtil::parseJSON(
     const StringView& string) {
   if (!string.length()) return nullptr;
diff --git a/src/inspector/string-util.h b/src/inspector/string-util.h
index 6f0e3d5ff5..134ff425e1 100644
--- a/src/inspector/string-util.h
+++ b/src/inspector/string-util.h
@@ -32,6 +32,7 @@ class StringUtil {
     return String::fromInteger(number);
   }
   static String fromDouble(double number) { return String::fromDouble(number); }
+  static double toDouble(const char* s, size_t len, bool* isOk);
   static size_t find(const String& s, const char* needle) {
     return s.find(needle);
   }
