<Window x:Class="StressTestSimulator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:StressTestSimulator.ViewModels"
        xmlns:converters="clr-namespace:StressTestSimulator.Converters"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="Stress test simulator" 
        SizeToContent="WidthAndHeight"
        SnapsToDevicePixels="True"
        WindowStartupLocation="Manual"
        Top="0"
        Left="0"
        MaxHeight="{x:Static SystemParameters.MaximizedPrimaryScreenHeight}"
        >
    <Window.DataContext>
        <viewModels:MainWindowViewModel></viewModels:MainWindowViewModel>
    </Window.DataContext>
    <Window.Resources>
        <converters:TimeSpanToDoubleConverter x:Key="DoubleToTimeSpanConverter" />
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <converters:StringToBooleanConverter x:Key="StringToBooleanConverter" />
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converters:DoubleSumConverter x:Key="DoubleSumConverter" />

        <Style x:Key="ConnectionStringTextBox" TargetType="TextBox">
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="AcceptsReturn" Value="True" />
            <Setter Property="Padding" Value="3" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsConnecting}" Value="True">
                    <Setter Property="IsEnabled" Value="False"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>
    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition>
                <RowDefinition.Style>
                    <Style TargetType="RowDefinition">
                        <Setter Property="Height" Value="Auto"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAdvancedMode}" Value="True">
                                <Setter Property="Height" Value="*"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </RowDefinition.Style>
            </RowDefinition>
            <RowDefinition>
                <RowDefinition.Style>
                    <Style TargetType="RowDefinition">
                        <Setter Property="Height" Value="Auto"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsAdvancedMode}" Value="False">
                                <Setter Property="Height" Value="*"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </RowDefinition.Style>
            </RowDefinition>
        </Grid.RowDefinitions>

        <DockPanel Margin="0 0 0 10">
            <Grid DockPanel.Dock="Right" Visibility="{Binding IsConnected, Converter={StaticResource BooleanToVisibilityConverter}}">
                <CheckBox Margin="10 5 0 0" VerticalAlignment="Top" Content="Advanced mode" IsChecked="{Binding IsAdvancedMode}"></CheckBox>
            </Grid>

            <Expander MinWidth="600px" DockPanel.Dock="Left" Header="Connection details" IsExpanded="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}, Mode=OneWay}">
                <StackPanel  Orientation="Vertical">
                    <Label Content="DB connection string">
                    </Label>
                    <TextBox x:Name="txtDBConnectionString" Style="{StaticResource ConnectionStringTextBox}"  Text="{Binding DataBaseConnectionString, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"  />

                    <Label Content="IoT Hub connection string"></Label>
                    <TextBox x:Name="txtIoTHubConnectionString" Style="{StaticResource ConnectionStringTextBox}"  Text="{Binding IoTHubConnectionString, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />

                    <Button Command="{Binding ConnectCommand}" Margin="0 10 0 0" Padding="3">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Content" Value="Connect"></Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Text, ElementName=txtDBConnectionString}" Value="">
                                        <Setter Property="IsEnabled" Value="False"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Text, ElementName=txtIoTHubConnectionString}" Value="">
                                        <Setter Property="IsEnabled" Value="False"></Setter>
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding IsConnecting}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"></Setter>
                                        <Setter Property="Content" Value="Connecting..."></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </StackPanel>
            </Expander>
        </DockPanel>

        <Button Grid.Row="2" MinHeight="40" VerticalAlignment="Stretch" Command="{Binding ToggleStartCommand}" Visibility="{Binding IsConnected, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Button.Style>
                <Style TargetType="Button">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsStarted}" Value="True">
                            <Setter Property="Content" Value="Stop"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsStarted}" Value="False">
                            <Setter Property="Content" Value="Start"></Setter>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsAdvancedMode}" Value="False">
                            <Setter Property="Height" Value="NaN"></Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <Grid Grid.Row="1" VerticalAlignment="Stretch" Visibility="{Binding IsAdvancedMode, Converter={StaticResource BooleanToVisibilityConverter}}">
            <DataGrid Margin="0 5 0 5" SelectionMode="Single" ItemsSource="{Binding Sensors}" Visibility="{Binding DevicesGridVisibility}" VerticalScrollBarVisibility="Auto" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" IsReadOnly="True">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Sensor.ErrorMessage, Converter={StaticResource StringToBooleanConverter}}" Value="True">
                                <Setter Property="Background" Value="DarkRed"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTemplateColumn Header="Enabled">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <CheckBox IsChecked="{Binding IsToggleEnabledChecked, Mode=OneWay}" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=DataGrid}}" Command="{Binding ToggleEnabledCommand}" CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"></CheckBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox Margin="4 0 0 0" IsChecked="{Binding Sensor.Enabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></CheckBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTextColumn Header="Gateway" Binding="{Binding Sensor.BACmap.GatewayName}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Tag" Binding="{Binding Sensor.BACmap.TagName}"></DataGridTextColumn>
                    <DataGridTextColumn Header="Name" Binding="{Binding Sensor.FullAssetPath}" Width="Auto" />

                    <DataGridTemplateColumn MinWidth="200" Width="200" Header="Value">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                                    <StackPanel.Width>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType=DataGridColumnHeader}" Converter="{StaticResource DoubleSumConverter}">
                                            <Binding.ConverterParameter>
                                                <system:Double>-10</system:Double>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </StackPanel.Width>
                                    <DockPanel Margin="5" LastChildFill="True">
                                        <TextBox DockPanel.Dock="Left" Text="{Binding MinRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="25px"></TextBox>
                                        <TextBox DockPanel.Dock="Right" Text="{Binding MaxRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="25px"></TextBox>

                                        <xctk:RangeSlider Minimum="-50" Maximum="150" LowerValue="{Binding MinRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HigherValue="{Binding MaxRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Step="1"></xctk:RangeSlider>
                                    </DockPanel>
                                    <Button DockPanel.Dock="Bottom" Margin="0 2px 0 0" Content="Randomize Values" Command="{Binding RandomizeValuesCommand}"></Button>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <DockPanel>
                                    <TextBox DockPanel.Dock="Right" Width="30px" Text="{Binding Sensor.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                                    <Slider Minimum="-50" IsSnapToTickEnabled="True" TickFrequency="1" Maximum="150" Value="{Binding Sensor.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                </DockPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Width="Auto" Header="10%">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <CheckBox Content="10%" IsChecked="True" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=DataGrid}}" Command="{Binding ToggleVariableValueCommand}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"></CheckBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox Content="10%" IsChecked="{Binding Sensor.IsVariableValueEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></CheckBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTextColumn Header="Sent Value" Binding="{Binding Sensor.LastReadingValue}" />

                    <DataGridTemplateColumn MinWidth="200" Width="200" Header="Interval">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                                    <StackPanel.Width>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType=DataGridColumnHeader}" Converter="{StaticResource DoubleSumConverter}">
                                            <Binding.ConverterParameter>
                                                <system:Double>-10</system:Double>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </StackPanel.Width>
                                    <DockPanel LastChildFill="True">
                                        <TextBox DockPanel.Dock="Left" Text="{Binding MinIntervalRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="50px"></TextBox>
                                        <TextBox DockPanel.Dock="Right" Text="{Binding MaxIntervalRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="50px"></TextBox>

                                        <xctk:RangeSlider Minimum="1" Maximum="3600" LowerValue="{Binding MinIntervalRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DoubleToTimeSpanConverter}}" HigherValue="{Binding MaxIntervalRandom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DoubleToTimeSpanConverter}}" Step="1"></xctk:RangeSlider>
                                    </DockPanel>
                                    <Button DockPanel.Dock="Bottom" Margin="0 2px 0 0" Content="Randomize Intervals" Command="{Binding RandomizeIntervalsCommand}"></Button>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <DockPanel>
                                    <TextBox DockPanel.Dock="Right" Text="{Binding Interval, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="50px"></TextBox>
                                    <Slider Minimum="1" IsSnapToTickEnabled="True" TickFrequency="1" Maximum="3600" Value="{Binding Interval, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource DoubleToTimeSpanConverter}}" />
                                </DockPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <Button DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType=DataGrid}}" Content="Randomize" Command="{Binding RandomizeReadInCommand}">
                                    <Button.Width>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType=DataGridColumnHeader}" Converter="{StaticResource DoubleSumConverter}">
                                            <Binding.ConverterParameter>
                                                <system:Double>-10</system:Double>
                                            </Binding.ConverterParameter>
                                        </Binding>
                                    </Button.Width>
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding NextReadingIn}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Error message" Binding="{Binding Sensor.ErrorMessage}"></DataGridTextColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </Grid>
</Window>
