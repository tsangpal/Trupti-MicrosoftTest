=== tests/cases/compiler/capturedLetConstInLoop3_ES6.ts ===

///=========let
declare function use(a: any);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>a : Symbol(a, Decl(capturedLetConstInLoop3_ES6.ts, 2, 21))

function foo0(x) {
>foo0 : Symbol(foo0, Decl(capturedLetConstInLoop3_ES6.ts, 2, 29))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 3, 14))

    for (let x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 4, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 5, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 4, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 4, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 5, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 4, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 5, 11))
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 5, 11))
}

function foo0_1(x) {
>foo0_1 : Symbol(foo0_1, Decl(capturedLetConstInLoop3_ES6.ts, 11, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 13, 16))

    for (let x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 14, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 15, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 14, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 14, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 15, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 14, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 15, 11))
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 15, 11))
}

function foo1(x) {
>foo1 : Symbol(foo1, Decl(capturedLetConstInLoop3_ES6.ts, 21, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 23, 14))

    for (let x = 0; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 24, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 24, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 24, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 25, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 24, 12))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 24, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 25, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 24, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 25, 11))
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 25, 11))
}

function foo2(x) {
>foo2 : Symbol(foo2, Decl(capturedLetConstInLoop3_ES6.ts, 31, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 33, 14))

    while (1 === 1) {
        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 35, 11))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 36, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 35, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 35, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 36, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 35, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 36, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 36, 11))
}

function foo3(x) {
>foo3 : Symbol(foo3, Decl(capturedLetConstInLoop3_ES6.ts, 42, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 44, 14))

    do {
        let x;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 46, 11))

        var v;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 47, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 46, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 47, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 46, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 47, 11))

    } while (1 === 1);
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 47, 11))
}

function foo4(x) {
>foo4 : Symbol(foo4, Decl(capturedLetConstInLoop3_ES6.ts, 53, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 55, 14))

    for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 56, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 56, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 56, 12))

        var v = y;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 57, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 56, 12))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 58, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 58, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 57, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 58, 11))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 57, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 57, 11))
}

function foo5(x) {
>foo5 : Symbol(foo5, Decl(capturedLetConstInLoop3_ES6.ts, 64, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 66, 14))

    for (let x = 0, y = 1; x < 1; ++x) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 67, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 67, 19))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 67, 12))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 67, 12))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 68, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 67, 12))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 67, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 67, 19))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 68, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 67, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 67, 19))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 68, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 68, 11))
}


function foo6(x) {
>foo6 : Symbol(foo6, Decl(capturedLetConstInLoop3_ES6.ts, 74, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 77, 14))

    while (1 === 1) {
        let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 79, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 79, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 80, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 79, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 79, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 79, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 80, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 79, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 79, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 80, 11))
    }
    
    use(v)
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 80, 11))
}

function foo7(x) {
>foo7 : Symbol(foo7, Decl(capturedLetConstInLoop3_ES6.ts, 86, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 88, 14))

    do {
        let x, y;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 90, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 90, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 91, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 90, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 90, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 90, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 91, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 90, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 90, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 91, 11))

    } while (1 === 1);
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 91, 11))
}


function foo8(x) {
>foo8 : Symbol(foo8, Decl(capturedLetConstInLoop3_ES6.ts, 97, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 100, 14))

    for (let y = 0; y < 1; ++y) {
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 101, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 101, 12))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 101, 12))

        let x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 102, 11))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 103, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 102, 11))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 102, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 101, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 103, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 102, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 101, 12))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 103, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 103, 11))
}
//===const
function foo0_c(x) {
>foo0_c : Symbol(foo0_c, Decl(capturedLetConstInLoop3_ES6.ts, 109, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 111, 16))

    for (const x of []) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 112, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 113, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 112, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 112, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 113, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 112, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 113, 11))
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 113, 11))
}

function foo0_1_c(x) {
>foo0_1_c : Symbol(foo0_1_c, Decl(capturedLetConstInLoop3_ES6.ts, 119, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 121, 18))

    for (const x in []) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 122, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 123, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 122, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 122, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 123, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 122, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 123, 11))
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 123, 11))
}

function foo1_c(x) {
>foo1_c : Symbol(foo1_c, Decl(capturedLetConstInLoop3_ES6.ts, 129, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 131, 16))

    for (const x = 0; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 132, 14))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 132, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 133, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 132, 14))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 132, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 133, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 132, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 133, 11))
    }

    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 133, 11))
}

function foo2_c(x) {
>foo2_c : Symbol(foo2_c, Decl(capturedLetConstInLoop3_ES6.ts, 139, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 141, 16))

    while (1 === 1) {
        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 143, 13))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 144, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 143, 13))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 143, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 144, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 143, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 144, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 144, 11))
}

function foo3_c(x) {
>foo3_c : Symbol(foo3_c, Decl(capturedLetConstInLoop3_ES6.ts, 150, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 152, 16))

    do {
        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 154, 13))

        var v;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 155, 11))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 154, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 155, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 154, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 155, 11))

    } while (1 === 1);
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 155, 11))
}

function foo4_c(x) {
>foo4_c : Symbol(foo4_c, Decl(capturedLetConstInLoop3_ES6.ts, 161, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 163, 16))

    for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 164, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 164, 14))

        var v = y;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 165, 11))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 164, 14))

        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 166, 13))

        (function() { return x + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 166, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 165, 11))

        (() => x + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 166, 13))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 165, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 165, 11))
}

function foo5_c(x) {
>foo5_c : Symbol(foo5_c, Decl(capturedLetConstInLoop3_ES6.ts, 172, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 174, 16))

    for (const x = 0, y = 1; x < 1;) {
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 175, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 175, 21))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 175, 14))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 176, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 175, 14))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 175, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 175, 21))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 176, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 175, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 175, 21))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 176, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 176, 11))
}


function foo6_c(x) {
>foo6_c : Symbol(foo6_c, Decl(capturedLetConstInLoop3_ES6.ts, 182, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 185, 16))

    while (1 === 1) {
        const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 187, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 187, 20))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 188, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 187, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 187, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 187, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 188, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 187, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 187, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 188, 11))
    }
    
    use(v)
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 188, 11))
}

function foo7_c(x) {
>foo7_c : Symbol(foo7_c, Decl(capturedLetConstInLoop3_ES6.ts, 194, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 196, 16))

    do {
        const x = 1, y = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 198, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 198, 20))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 199, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 198, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 198, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 198, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 199, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 198, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 198, 20))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 199, 11))

    } while (1 === 1);
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 199, 11))
}


function foo8_c(x) {
>foo8_c : Symbol(foo8_c, Decl(capturedLetConstInLoop3_ES6.ts, 205, 1))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 208, 16))

    for (const y = 0; y < 1;) {
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 209, 14))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 209, 14))

        const x = 1;
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 210, 13))

        var v = x;
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 211, 11))
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 210, 13))

        (function() { return x + y + v });
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 210, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 209, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 211, 11))

        (() => x + y + v);
>x : Symbol(x, Decl(capturedLetConstInLoop3_ES6.ts, 210, 13))
>y : Symbol(y, Decl(capturedLetConstInLoop3_ES6.ts, 209, 14))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 211, 11))
    }
    
    use(v);
>use : Symbol(use, Decl(capturedLetConstInLoop3_ES6.ts, 0, 0))
>v : Symbol(v, Decl(capturedLetConstInLoop3_ES6.ts, 211, 11))
}
