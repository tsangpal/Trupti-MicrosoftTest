=== tests/cases/compiler/main.ts ===
/// <reference path="O.d.ts" />

import {Observable} from "Observable";
>Observable : Symbol(Observable, Decl(main.ts, 2, 8))

import "Map";
let x: Observable;
>x : Symbol(x, Decl(main.ts, 4, 3))
>Observable : Symbol(Observable, Decl(main.ts, 2, 8))

x.foo().x;
>x.foo().x : Symbol(Cls.x, Decl(O.d.ts, 6, 15))
>x.foo : Symbol(Observable.foo, Decl(O.d.ts, 12, 30))
>x : Symbol(x, Decl(main.ts, 4, 3))
>foo : Symbol(Observable.foo, Decl(O.d.ts, 12, 30))
>x : Symbol(Cls.x, Decl(O.d.ts, 6, 15))

x.foo2().x2;
>x.foo2().x2 : Symbol(Cls2.x2, Decl(O.d.ts, 19, 16))
>x.foo2 : Symbol(Observable.foo2, Decl(O.d.ts, 21, 30))
>x : Symbol(x, Decl(main.ts, 4, 3))
>foo2 : Symbol(Observable.foo2, Decl(O.d.ts, 21, 30))
>x2 : Symbol(Cls2.x2, Decl(O.d.ts, 19, 16))

=== tests/cases/compiler/O.d.ts ===

declare module "Observable" {
    class Observable {}
>Observable : Symbol(Observable, Decl(O.d.ts, 1, 29), Decl(O.d.ts, 11, 25), Decl(O.d.ts, 20, 25))
}

declare module "M" {
    class Cls { x: number }
>Cls : Symbol(Cls, Decl(O.d.ts, 5, 20))
>x : Symbol(Cls.x, Decl(O.d.ts, 6, 15))
}

declare module "Map" {
    import { Cls } from "M";
>Cls : Symbol(Cls, Decl(O.d.ts, 10, 12))

    module "Observable" {
        interface Observable {
>Observable : Symbol(Observable, Decl(O.d.ts, 1, 29), Decl(O.d.ts, 11, 25), Decl(O.d.ts, 20, 25))

            foo(): Cls;
>foo : Symbol(Observable.foo, Decl(O.d.ts, 12, 30))
>Cls : Symbol(Cls, Decl(O.d.ts, 10, 12))
        }
    }
}

declare module "Map" {
    class Cls2 { x2: number }
>Cls2 : Symbol(Cls2, Decl(O.d.ts, 18, 22))
>x2 : Symbol(Cls2.x2, Decl(O.d.ts, 19, 16))

    module "Observable" {
        interface Observable {
>Observable : Symbol(Observable, Decl(O.d.ts, 1, 29), Decl(O.d.ts, 11, 25), Decl(O.d.ts, 20, 25))

            foo2(): Cls2;
>foo2 : Symbol(Observable.foo2, Decl(O.d.ts, 21, 30))
>Cls2 : Symbol(Cls2, Decl(O.d.ts, 18, 22))
        }
    }
}

