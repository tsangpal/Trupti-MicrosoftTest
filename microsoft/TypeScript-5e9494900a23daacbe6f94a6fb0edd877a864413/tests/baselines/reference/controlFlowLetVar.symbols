=== tests/cases/compiler/controlFlowLetVar.ts ===

declare let cond: boolean;
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

// CFA for 'let' with no type annotation and initializer
function f1() {
>f1 : Symbol(f1, Decl(controlFlowLetVar.ts, 1, 26))

    let x;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 5, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 5, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 5, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowLetVar.ts, 12, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 5, 7))
}

// CFA for 'let' with no type annotation and 'undefined' initializer
function f2() {
>f2 : Symbol(f2, Decl(controlFlowLetVar.ts, 13, 1))

    let x = undefined;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 17, 7))
>undefined : Symbol(undefined)

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 17, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 17, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowLetVar.ts, 24, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 17, 7))
}

// CFA for 'let' with no type annotation and 'null' initializer
function f3() {
>f3 : Symbol(f3, Decl(controlFlowLetVar.ts, 25, 1))

    let x = null;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 29, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 29, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 29, 7))
    }
    const y = x;  // string | number | null
>y : Symbol(y, Decl(controlFlowLetVar.ts, 36, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 29, 7))
}

// No CFA for 'let' with with type annotation
function f4() {
>f4 : Symbol(f4, Decl(controlFlowLetVar.ts, 37, 1))

    let x: any;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 41, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 41, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 41, 7))
    }
    const y = x;  // any
>y : Symbol(y, Decl(controlFlowLetVar.ts, 48, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 41, 7))
}

// CFA for 'var' with no type annotation and initializer
function f5() {
>f5 : Symbol(f5, Decl(controlFlowLetVar.ts, 49, 1))

    var x;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 53, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 53, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 53, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowLetVar.ts, 60, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 53, 7))
}

// CFA for 'var' with no type annotation and 'undefined' initializer
function f6() {
>f6 : Symbol(f6, Decl(controlFlowLetVar.ts, 61, 1))

    var x = undefined;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 65, 7))
>undefined : Symbol(undefined)

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 65, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 65, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowLetVar.ts, 72, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 65, 7))
}

// CFA for 'var' with no type annotation and 'null' initializer
function f7() {
>f7 : Symbol(f7, Decl(controlFlowLetVar.ts, 73, 1))

    var x = null;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 77, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 77, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 77, 7))
    }
    const y = x;  // string | number | null
>y : Symbol(y, Decl(controlFlowLetVar.ts, 84, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 77, 7))
}

// No CFA for 'var' with with type annotation
function f8() {
>f8 : Symbol(f8, Decl(controlFlowLetVar.ts, 85, 1))

    var x: any;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 89, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 89, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 89, 7))
    }
    const y = x;  // any
>y : Symbol(y, Decl(controlFlowLetVar.ts, 96, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 89, 7))
}

// No CFA for captured outer variables
function f9() {
>f9 : Symbol(f9, Decl(controlFlowLetVar.ts, 97, 1))

    let x;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 101, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 101, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 101, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowLetVar.ts, 108, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 101, 7))

    function f() {
>f : Symbol(f, Decl(controlFlowLetVar.ts, 108, 16))

        const z = x;  // any
>z : Symbol(z, Decl(controlFlowLetVar.ts, 110, 13))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 101, 7))
    }
}

// No CFA for captured outer variables
function f10() {
>f10 : Symbol(f10, Decl(controlFlowLetVar.ts, 112, 1))

    let x;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 116, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = 1;
>x : Symbol(x, Decl(controlFlowLetVar.ts, 116, 7))
    }
    if (cond) {
>cond : Symbol(cond, Decl(controlFlowLetVar.ts, 1, 11))

        x = "hello";
>x : Symbol(x, Decl(controlFlowLetVar.ts, 116, 7))
    }
    const y = x;  // string | number | undefined
>y : Symbol(y, Decl(controlFlowLetVar.ts, 123, 9))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 116, 7))

    const f = () => {
>f : Symbol(f, Decl(controlFlowLetVar.ts, 124, 9))

        const z = x;  // any
>z : Symbol(z, Decl(controlFlowLetVar.ts, 125, 13))
>x : Symbol(x, Decl(controlFlowLetVar.ts, 116, 7))

    };
}
